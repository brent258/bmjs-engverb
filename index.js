module.exports = function (verbString) {
  if (!verbString || verbString === undefined || typeof verbString !== 'string') {
    throw new TypeError('No valid verb string entered.');
  }
  // Initialize verb object with empty values
  let lowercasedVerbString = verbString.toLowerCase();
  let verbObject = {infinitive: "", firstPresent: "", singularPresent: "", pluralPresent: "", firstPast: "", singularPast: "", pluralPast: "", perfect: "", continuous: ""};
  verbObject.infinitive = lowercasedVerbString;
  // Assign values for "be" verb
  if (lowercasedVerbString === "be") {
    verbObject.firstPresent = "am";
    verbObject.singularPresent = "is";
    verbObject.pluralPresent = "are";
    verbObject.firstPast = "was";
    verbObject.singularPast = "was";
    verbObject.pluralPast = "were";
    verbObject.perfect = "been";
    verbObject.continuous = "being";
  }
  else {
    // Assign values for irregular verb tenses
    let regexString = " " + lowercasedVerbString;
    let regex;
    if (regexString.match(/(un|re|re+\-|un+\-|\s)+(abet)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=abet)/)[0].trim(); verbObject.singularPast = regex + "abetted"; verbObject.continuous = regex + "abetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(abut)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=abut)/)[0].trim(); verbObject.singularPast = regex + "abutted"; verbObject.continuous = regex + "abutting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(accompany)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=accompany)/)[0].trim(); verbObject.singularPast = regex + "accompanied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(acetify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=acetify)/)[0].trim(); verbObject.singularPast = regex + "acetified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(acidify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=acidify)/)[0].trim(); verbObject.singularPast = regex + "acidified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(acquit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=acquit)/)[0].trim(); verbObject.singularPast = regex + "acquitted"; verbObject.continuous = regex + "acquitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(admit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=admit)/)[0].trim(); verbObject.singularPast = regex + "admitted"; verbObject.continuous = regex + "admitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(aerify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=aerify)/)[0].trim(); verbObject.singularPast = regex + "aerified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(airdrop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=airdrop)/)[0].trim(); verbObject.singularPast = regex + "airdropped"; verbObject.continuous = regex + "airdropping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(alkalify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=alkalify)/)[0].trim(); verbObject.singularPast = regex + "alkalified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(allot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=allot)/)[0].trim(); verbObject.singularPast = regex + "allotted"; verbObject.continuous = regex + "allotting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ally)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ally)/)[0].trim(); verbObject.singularPast = regex + "allied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ammonify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ammonify)/)[0].trim(); verbObject.singularPast = regex + "ammonified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(amnesty)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=amnesty)/)[0].trim(); verbObject.singularPast = regex + "amnestied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(amplify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=amplify)/)[0].trim(); verbObject.singularPast = regex + "amplified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(anglify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=anglify)/)[0].trim(); verbObject.singularPast = regex + "anglified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(annul)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=annul)/)[0].trim(); verbObject.singularPast = regex + "annulled"; verbObject.continuous = regex + "annulling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(appall)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=appall)/)[0].trim(); verbObject.singularPast = regex + "appalled"; verbObject.continuous = regex + "appalling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(apply)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=apply)/)[0].trim(); verbObject.singularPast = regex + "applied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(arc)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=arc)/)[0].trim(); verbObject.singularPast = regex + "arcked"; verbObject.continuous = regex + "arcking"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(argufy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=argufy)/)[0].trim(); verbObject.singularPast = regex + "argufied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(arise)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=arise)/)[0].trim(); verbObject.perfect = regex + "arisen"; verbObject.singularPast = regex + "arose"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(atrophy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=atrophy)/)[0].trim(); verbObject.singularPast = regex + "atrophied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(aver)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=aver)/)[0].trim(); verbObject.singularPast = regex + "averred"; verbObject.continuous = regex + "averring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(awake)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=awake)/)[0].trim(); verbObject.singularPast = regex + "awoke"; verbObject.perfect = regex + "awoken"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(baby)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=baby)/)[0].trim(); verbObject.singularPast = regex + "babied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(backbite)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=backbite)/)[0].trim(); verbObject.singularPast = regex + "backbit"; verbObject.perfect = regex + "backbitten"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(backslide)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=backslide)/)[0].trim(); verbObject.singularPast = regex + "backslid"; verbObject.perfect = regex + "backslidden"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bag)/)[0].trim(); verbObject.singularPast = regex + "bagged"; verbObject.continuous = regex + "bagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ballyrag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ballyrag)/)[0].trim(); verbObject.singularPast = regex + "ballyragged"; verbObject.continuous = regex + "ballyragging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ban)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ban)/)[0].trim(); verbObject.singularPast = regex + "banned"; verbObject.continuous = regex + "banning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bandy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bandy)/)[0].trim(); verbObject.singularPast = regex + "bandied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bar)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bar)/)[0].trim(); verbObject.singularPast = regex + "barred"; verbObject.continuous = regex + "barring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(barrel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=barrel)/)[0].trim(); verbObject.singularPast = regex + "barrelled"; verbObject.continuous = regex + "barrelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(basify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=basify)/)[0].trim(); verbObject.singularPast = regex + "basified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bat)/)[0].trim(); verbObject.singularPast = regex + "batted"; verbObject.continuous = regex + "batting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bayonet)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bayonet)/)[0].trim(); verbObject.singularPast = regex + "bayonetted"; verbObject.continuous = regex + "bayonetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bear)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bear)/)[0].trim(); verbObject.singularPast = regex + "bore"; verbObject.perfect = regex + "born"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(beat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=beat)/)[0].trim(); verbObject.perfect = regex + "beaten"; verbObject.singularPast = regex + "beat"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(beatify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=beatify)/)[0].trim(); verbObject.singularPast = regex + "beatified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(beautify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=beautify)/)[0].trim(); verbObject.singularPast = regex + "beautified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(become)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=become)/)[0].trim(); verbObject.singularPast = regex + "became"; verbObject.perfect = regex + "become"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bed)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bed)/)[0].trim(); verbObject.singularPast = regex + "bedded"; verbObject.continuous = regex + "bedding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bedevil)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bedevil)/)[0].trim(); verbObject.singularPast = regex + "bedevilled"; verbObject.continuous = regex + "bedevilling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bedim)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bedim)/)[0].trim(); verbObject.singularPast = regex + "bedimmed"; verbObject.continuous = regex + "bedimming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(befall)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=befall)/)[0].trim(); verbObject.perfect = regex + "befallen"; verbObject.singularPast = regex + "befell"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(befit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=befit)/)[0].trim(); verbObject.singularPast = regex + "befitted"; verbObject.continuous = regex + "befitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(befog)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=befog)/)[0].trim(); verbObject.singularPast = regex + "befogged"; verbObject.continuous = regex + "befogging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(beg)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=beg)/)[0].trim(); verbObject.singularPast = regex + "begged"; verbObject.continuous = regex + "begging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(beget)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=beget)/)[0].trim(); verbObject.continuous = regex + "begetting"; verbObject.singularPast = regex + "begot"; verbObject.perfect = regex + "begotten"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(begin)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=begin)/)[0].trim(); verbObject.singularPast = regex + "began"; verbObject.continuous = regex + "beginning"; verbObject.perfect = regex + "begun"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(begird)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=begird)/)[0].trim(); verbObject.singularPast = regex + "begirt"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(behold)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=behold)/)[0].trim(); verbObject.singularPast = regex + "beheld"; verbObject.perfect = regex + "beholden"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bejewel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bejewel)/)[0].trim(); verbObject.singularPast = regex + "bejewelled"; verbObject.continuous = regex + "bejewelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(belie)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=belie)/)[0].trim(); verbObject.continuous = regex + "belying"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(belly)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=belly)/)[0].trim(); verbObject.singularPast = regex + "bellied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bend)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bend)/)[0].trim(); verbObject.singularPast = regex + "bent"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(benefit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=benefit)/)[0].trim(); verbObject.singularPast = regex + "benefitted"; verbObject.continuous = regex + "benefitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(berry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=berry)/)[0].trim(); verbObject.singularPast = regex + "berried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(beseech)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=beseech)/)[0].trim(); verbObject.singularPast = regex + "besought"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(beset)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=beset)/)[0].trim(); verbObject.continuous = regex + "besetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bespeak)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bespeak)/)[0].trim(); verbObject.singularPast = regex + "bespoke"; verbObject.perfect = regex + "bespoken"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bestir)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bestir)/)[0].trim(); verbObject.singularPast = regex + "bestirred"; verbObject.continuous = regex + "bestirring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bestrew)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bestrew)/)[0].trim(); verbObject.perfect = regex + "bestrewn"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bestride)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bestride)/)[0].trim(); verbObject.perfect = regex + "bestridden"; verbObject.singularPast = regex + "bestrode"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bet)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bet)/)[0].trim(); verbObject.singularPast = regex + "bet"; verbObject.continuous = regex + "betting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(betake)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=betake)/)[0].trim(); verbObject.perfect = regex + "betaken"; verbObject.singularPast = regex + "betook"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bethink)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bethink)/)[0].trim(); verbObject.singularPast = regex + "bethought"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bevel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bevel)/)[0].trim(); verbObject.singularPast = regex + "bevelled"; verbObject.continuous = regex + "bevelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bias)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bias)/)[0].trim(); verbObject.singularPast = regex + "biassed"; verbObject.continuous = regex + "biassing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bid)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bid)/)[0].trim(); verbObject.singularPast = regex + "bid"; verbObject.continuous = regex + "bidding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bin)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bin)/)[0].trim(); verbObject.singularPast = regex + "binned"; verbObject.continuous = regex + "binning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bind)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bind)/)[0].trim(); verbObject.singularPast = regex + "bound"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bing)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bing)/)[0].trim(); verbObject.continuous = regex + "bing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bit)/)[0].trim(); verbObject.singularPast = regex + "bitted"; verbObject.continuous = regex + "bitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bite)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bite)/)[0].trim(); verbObject.singularPast = regex + "bit"; verbObject.perfect = regex + "bitten"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bivouac)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bivouac)/)[0].trim(); verbObject.singularPast = regex + "bivouacked"; verbObject.continuous = regex + "bivouacking"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(blab)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=blab)/)[0].trim(); verbObject.singularPast = regex + "blabbed"; verbObject.continuous = regex + "blabbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(blackberry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=blackberry)/)[0].trim(); verbObject.singularPast = regex + "blackberried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(blackleg)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=blackleg)/)[0].trim(); verbObject.singularPast = regex + "blacklegged"; verbObject.continuous = regex + "blacklegging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(blat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=blat)/)[0].trim(); verbObject.singularPast = regex + "blatted"; verbObject.continuous = regex + "blatting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bleed)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bleed)/)[0].trim(); verbObject.singularPast = regex + "bled"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(blip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=blip)/)[0].trim(); verbObject.singularPast = regex + "blipped"; verbObject.continuous = regex + "blipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(blob)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=blob)/)[0].trim(); verbObject.singularPast = regex + "blobbed"; verbObject.continuous = regex + "blobbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bloody)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bloody)/)[0].trim(); verbObject.singularPast = regex + "bloodied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(blot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=blot)/)[0].trim(); verbObject.singularPast = regex + "blotted"; verbObject.continuous = regex + "blotting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(blow)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=blow)/)[0].trim(); verbObject.singularPast = regex + "blew"; verbObject.perfect = regex + "blown"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(blub)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=blub)/)[0].trim(); verbObject.singularPast = regex + "blubbed"; verbObject.continuous = regex + "blubbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(blur)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=blur)/)[0].trim(); verbObject.singularPast = regex + "blurred"; verbObject.continuous = regex + "blurring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bob)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bob)/)[0].trim(); verbObject.singularPast = regex + "bobbed"; verbObject.continuous = regex + "bobbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(body)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=body)/)[0].trim(); verbObject.singularPast = regex + "bodied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bootleg)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bootleg)/)[0].trim(); verbObject.singularPast = regex + "bootlegged"; verbObject.continuous = regex + "bootlegging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bop)/)[0].trim(); verbObject.singularPast = regex + "bopped"; verbObject.continuous = regex + "bopping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(brag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=brag)/)[0].trim(); verbObject.singularPast = regex + "bragged"; verbObject.continuous = regex + "bragging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(break)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=break)/)[0].trim(); verbObject.singularPast = regex + "broke"; verbObject.perfect = regex + "broken"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(breed)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=breed)/)[0].trim(); verbObject.singularPast = regex + "bred"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(brevet)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=brevet)/)[0].trim(); verbObject.singularPast = regex + "brevetted"; verbObject.continuous = regex + "brevetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(brim)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=brim)/)[0].trim(); verbObject.singularPast = regex + "brimmed"; verbObject.continuous = regex + "brimming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bring)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bring)/)[0].trim(); verbObject.singularPast = regex + "brought"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(browbeat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=browbeat)/)[0].trim(); verbObject.perfect = regex + "browbeaten"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(brutify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=brutify)/)[0].trim(); verbObject.singularPast = regex + "brutified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bud)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bud)/)[0].trim(); verbObject.singularPast = regex + "budded"; verbObject.continuous = regex + "budding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bug)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bug)/)[0].trim(); verbObject.singularPast = regex + "bugged"; verbObject.continuous = regex + "bugging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(build)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=build)/)[0].trim(); verbObject.singularPast = regex + "built"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bulldog)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bulldog)/)[0].trim(); verbObject.continuous = regex + "bulldogging"; verbObject.singularPast = regex + "bulldogged"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bullshit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bullshit)/)[0].trim(); verbObject.singularPast = regex + "bullshitted"; verbObject.continuous = regex + "bullshitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bullwhip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bullwhip)/)[0].trim(); verbObject.singularPast = regex + "bullwhipped"; verbObject.continuous = regex + "bullwhipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bully)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bully)/)[0].trim(); verbObject.singularPast = regex + "bullied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bullyrag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bullyrag)/)[0].trim(); verbObject.singularPast = regex + "bullyragged"; verbObject.continuous = regex + "bullyragging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bum)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bum)/)[0].trim(); verbObject.singularPast = regex + "bummed"; verbObject.continuous = regex + "bumming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bur)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bur)/)[0].trim(); verbObject.singularPast = regex + "burred"; verbObject.continuous = regex + "burring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bury)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bury)/)[0].trim(); verbObject.singularPast = regex + "buried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(bushel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=bushel)/)[0].trim(); verbObject.singularPast = regex + "bushelled"; verbObject.continuous = regex + "bushelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(busy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=busy)/)[0].trim(); verbObject.singularPast = regex + "busied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(buy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=buy)/)[0].trim(); verbObject.singularPast = regex + "bought"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(cabal)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=cabal)/)[0].trim(); verbObject.singularPast = regex + "caballed"; verbObject.continuous = regex + "caballing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(caddy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=caddy)/)[0].trim(); verbObject.singularPast = regex + "caddied"; verbObject.singularPresent = regex + "caddies"; verbObject.continuous = regex + "caddying"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(calcify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=calcify)/)[0].trim(); verbObject.singularPast = regex + "calcified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(can)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=can)/)[0].trim(); verbObject.singularPast = regex + "canned"; verbObject.continuous = regex + "canning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(canal)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=canal)/)[0].trim(); verbObject.singularPast = regex + "canalled"; verbObject.continuous = regex + "canalling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(cancel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=cancel)/)[0].trim(); verbObject.singularPast = regex + "cancelled"; verbObject.continuous = regex + "cancelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(candy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=candy)/)[0].trim(); verbObject.singularPast = regex + "candied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(canopy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=canopy)/)[0].trim(); verbObject.singularPast = regex + "canopied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(cap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=cap)/)[0].trim(); verbObject.singularPast = regex + "capped"; verbObject.continuous = regex + "capping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(carburet)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=carburet)/)[0].trim(); verbObject.singularPast = regex + "carburetted"; verbObject.continuous = regex + "carburetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(carillon)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=carillon)/)[0].trim(); verbObject.singularPast = regex + "carillonned"; verbObject.continuous = regex + "carillonning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(carnify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=carnify)/)[0].trim(); verbObject.singularPast = regex + "carnified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(carny)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=carny)/)[0].trim(); verbObject.singularPast = regex + "carnied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(carol)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=carol)/)[0].trim(); verbObject.singularPast = regex + "carolled"; verbObject.continuous = regex + "carolling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(carry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=carry)/)[0].trim(); verbObject.singularPast = regex + "carried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(casefy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=casefy)/)[0].trim(); verbObject.singularPast = regex + "casefied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(cat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=cat)/)[0].trim(); verbObject.singularPast = regex + "catted"; verbObject.continuous = regex + "catting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(catch)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=catch)/)[0].trim(); verbObject.singularPast = regex + "caught"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(catnap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=catnap)/)[0].trim(); verbObject.singularPast = regex + "catnapped"; verbObject.continuous = regex + "catnapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(cavil)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=cavil)/)[0].trim(); verbObject.singularPast = regex + "cavilled"; verbObject.continuous = regex + "cavilling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(certify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=certify)/)[0].trim(); verbObject.singularPast = regex + "certified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(channel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=channel)/)[0].trim(); verbObject.singularPast = regex + "channelled"; verbObject.continuous = regex + "channelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(chap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=chap)/)[0].trim(); verbObject.singularPast = regex + "chapped"; verbObject.continuous = regex + "chapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(char)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=char)/)[0].trim(); verbObject.singularPast = regex + "charred"; verbObject.continuous = regex + "charring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(chat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=chat)/)[0].trim(); verbObject.singularPast = regex + "chatted"; verbObject.continuous = regex + "chatting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(chin)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=chin)/)[0].trim(); verbObject.singularPast = regex + "chinned"; verbObject.continuous = regex + "chinning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(chip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=chip)/)[0].trim(); verbObject.singularPast = regex + "chipped"; verbObject.continuous = regex + "chipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(chisel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=chisel)/)[0].trim(); verbObject.singularPast = regex + "chiselled"; verbObject.continuous = regex + "chiselling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(chitchat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=chitchat)/)[0].trim(); verbObject.singularPast = regex + "chitchatted"; verbObject.continuous = regex + "chitchatting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(chiv)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=chiv)/)[0].trim(); verbObject.singularPast = regex + "chivved"; verbObject.continuous = regex + "chivving"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(chivy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=chivy)/)[0].trim(); verbObject.singularPast = regex + "chivvied"; verbObject.singularPresent = regex + "chivvies"; verbObject.continuous = regex + "chivvying"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(chondrify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=chondrify)/)[0].trim(); verbObject.singularPast = regex + "chondrified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(choose)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=choose)/)[0].trim(); verbObject.singularPast = regex + "chose"; verbObject.perfect = regex + "chosen"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(chop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=chop)/)[0].trim(); verbObject.singularPast = regex + "chopped"; verbObject.continuous = regex + "chopping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(chug)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=chug)/)[0].trim(); verbObject.singularPast = regex + "chugged"; verbObject.continuous = regex + "chugging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(chum)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=chum)/)[0].trim(); verbObject.singularPast = regex + "chummed"; verbObject.continuous = regex + "chumming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(citify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=citify)/)[0].trim(); verbObject.singularPast = regex + "citified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(clad)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=clad)/)[0].trim(); verbObject.continuous = regex + "cladding"; verbObject.singularPast = regex + "cladded"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(clam)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=clam)/)[0].trim(); verbObject.singularPast = regex + "clammed"; verbObject.continuous = regex + "clamming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(clap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=clap)/)[0].trim(); verbObject.singularPast = regex + "clapped"; verbObject.continuous = regex + "clapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(clarify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=clarify)/)[0].trim(); verbObject.singularPast = regex + "clarified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(classify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=classify)/)[0].trim(); verbObject.singularPast = regex + "classified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(cleave)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=cleave)/)[0].trim(); verbObject.singularPast = regex + "clove"; verbObject.perfect = regex + "cloven"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(clem)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=clem)/)[0].trim(); verbObject.singularPast = regex + "clemmed"; verbObject.continuous = regex + "clemming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(clepe)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=clepe)/)[0].trim(); verbObject.singularPast = regex + "clept"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(cling)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=cling)/)[0].trim(); verbObject.singularPast = regex + "clung"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(clip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=clip)/)[0].trim(); verbObject.singularPast = regex + "clipped"; verbObject.continuous = regex + "clipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(clog)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=clog)/)[0].trim(); verbObject.singularPast = regex + "clogged"; verbObject.continuous = regex + "clogging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(clop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=clop)/)[0].trim(); verbObject.singularPast = regex + "clopped"; verbObject.continuous = regex + "clopping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(clot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=clot)/)[0].trim(); verbObject.singularPast = regex + "clotted"; verbObject.continuous = regex + "clotting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(clothe)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=clothe)/)[0].trim(); verbObject.singularPast = regex + "clad"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(club)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=club)/)[0].trim(); verbObject.singularPast = regex + "clubbed"; verbObject.continuous = regex + "clubbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(cockneyfy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=cockneyfy)/)[0].trim(); verbObject.singularPast = regex + "cockneyfied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(cod)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=cod)/)[0].trim(); verbObject.singularPast = regex + "codded"; verbObject.continuous = regex + "codding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(codify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=codify)/)[0].trim(); verbObject.singularPast = regex + "codified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(cog)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=cog)/)[0].trim(); verbObject.singularPast = regex + "cogged"; verbObject.continuous = regex + "cogging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(coif)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=coif)/)[0].trim(); verbObject.singularPast = regex + "coiffed"; verbObject.continuous = regex + "coiffing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(colly)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=colly)/)[0].trim(); verbObject.singularPast = regex + "collied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(combat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=combat)/)[0].trim(); verbObject.singularPast = regex + "combatted"; verbObject.continuous = regex + "combatting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(come)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=come)/)[0].trim(); verbObject.singularPast = regex + "came"; verbObject.perfect = regex + "come"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(commit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=commit)/)[0].trim(); verbObject.singularPast = regex + "committed"; verbObject.continuous = regex + "committing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(compel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=compel)/)[0].trim(); verbObject.singularPast = regex + "compelled"; verbObject.continuous = regex + "compelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(complot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=complot)/)[0].trim(); verbObject.singularPast = regex + "complotted"; verbObject.continuous = regex + "complotting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(comply)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=comply)/)[0].trim(); verbObject.singularPast = regex + "complied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(con)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=con)/)[0].trim(); verbObject.singularPast = regex + "conned"; verbObject.continuous = regex + "conning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(concur)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=concur)/)[0].trim(); verbObject.singularPast = regex + "concurred"; verbObject.continuous = regex + "concurring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(confab)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=confab)/)[0].trim(); verbObject.singularPast = regex + "confabbed"; verbObject.continuous = regex + "confabbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(confer)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=confer)/)[0].trim(); verbObject.singularPast = regex + "conferred"; verbObject.continuous = regex + "conferring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(control)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=control)/)[0].trim(); verbObject.singularPast = regex + "controlled"; verbObject.continuous = regex + "controlling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(cop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=cop)/)[0].trim(); verbObject.singularPast = regex + "copped"; verbObject.continuous = regex + "copping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(copy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=copy)/)[0].trim(); verbObject.singularPast = regex + "copied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(coquet)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=coquet)/)[0].trim(); verbObject.singularPast = regex + "coquetted"; verbObject.continuous = regex + "coquetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(corral)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=corral)/)[0].trim(); verbObject.singularPast = regex + "corralled"; verbObject.continuous = regex + "corralling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(counsel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=counsel)/)[0].trim(); verbObject.singularPast = regex + "counselled"; verbObject.continuous = regex + "counselling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(counterplot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=counterplot)/)[0].trim(); verbObject.singularPast = regex + "counterplotted"; verbObject.continuous = regex + "counterplotting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(countersink)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=countersink)/)[0].trim(); verbObject.singularPast = regex + "countersank"; verbObject.perfect = regex + "countersunk"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(crab)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=crab)/)[0].trim(); verbObject.singularPast = regex + "crabbed"; verbObject.continuous = regex + "crabbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(cram)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=cram)/)[0].trim(); verbObject.singularPast = regex + "crammed"; verbObject.continuous = regex + "cramming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(crap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=crap)/)[0].trim(); verbObject.singularPast = regex + "crapped"; verbObject.continuous = regex + "crapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(creep)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=creep)/)[0].trim(); verbObject.singularPast = regex + "crept"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(crib)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=crib)/)[0].trim(); verbObject.singularPast = regex + "cribbed"; verbObject.continuous = regex + "cribbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(crop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=crop)/)[0].trim(); verbObject.singularPast = regex + "cropped"; verbObject.continuous = regex + "cropping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(crossbreed)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=crossbreed)/)[0].trim(); verbObject.singularPast = regex + "crossbred"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(crosscut)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=crosscut)/)[0].trim(); verbObject.continuous = regex + "crosscutting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(crucify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=crucify)/)[0].trim(); verbObject.singularPast = regex + "crucified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(cry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=cry)/)[0].trim(); verbObject.singularPast = regex + "cried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(cub)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=cub)/)[0].trim(); verbObject.singularPast = regex + "cubbed"; verbObject.continuous = regex + "cubbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(cudgel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=cudgel)/)[0].trim(); verbObject.singularPast = regex + "cudgelled"; verbObject.continuous = regex + "cudgelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(cup)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=cup)/)[0].trim(); verbObject.singularPast = regex + "cupped"; verbObject.continuous = regex + "cupping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(cupel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=cupel)/)[0].trim(); verbObject.singularPast = regex + "cupelled"; verbObject.continuous = regex + "cupelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(curet)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=curet)/)[0].trim(); verbObject.singularPast = regex + "curetted"; verbObject.continuous = regex + "curetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(curry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=curry)/)[0].trim(); verbObject.singularPast = regex + "curried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(curtsy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=curtsy)/)[0].trim(); verbObject.singularPast = regex + "curtsied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(curvet)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=curvet)/)[0].trim(); verbObject.singularPast = regex + "curvetted"; verbObject.continuous = regex + "curvetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(cut)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=cut)/)[0].trim(); verbObject.continuous = regex + "cutting"; verbObject.singularPast = regex + "cut"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dab)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dab)/)[0].trim(); verbObject.singularPast = regex + "dabbed"; verbObject.continuous = regex + "dabbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dag)/)[0].trim(); verbObject.singularPast = regex + "dagged"; verbObject.continuous = regex + "dagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dally)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dally)/)[0].trim(); verbObject.singularPast = regex + "dallied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dam)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dam)/)[0].trim(); verbObject.singularPast = regex + "dammed"; verbObject.continuous = regex + "damming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(damnify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=damnify)/)[0].trim(); verbObject.singularPast = regex + "damnified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dandify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dandify)/)[0].trim(); verbObject.singularPast = regex + "dandified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dap)/)[0].trim(); verbObject.singularPast = regex + "dapped"; verbObject.continuous = regex + "dapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(deal)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=deal)/)[0].trim(); verbObject.singularPast = regex + "dealt"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(debar)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=debar)/)[0].trim(); verbObject.singularPast = regex + "debarred"; verbObject.continuous = regex + "debarring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(debug)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=debug)/)[0].trim(); verbObject.singularPast = regex + "debugged"; verbObject.continuous = regex + "debugging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(debus)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=debus)/)[0].trim(); verbObject.singularPast = regex + "debussed"; verbObject.singularPresent = regex + "debusses"; verbObject.continuous = regex + "debussing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(decalcify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=decalcify)/)[0].trim(); verbObject.singularPast = regex + "decalcified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(declassify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=declassify)/)[0].trim(); verbObject.singularPast = regex + "declassified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(decontrol)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=decontrol)/)[0].trim(); verbObject.singularPast = regex + "decontrolled"; verbObject.continuous = regex + "decontrolling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(decry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=decry)/)[0].trim(); verbObject.singularPast = regex + "decried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(defer)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=defer)/)[0].trim(); verbObject.singularPast = regex + "deferred"; verbObject.continuous = regex + "deferring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(defy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=defy)/)[0].trim(); verbObject.singularPast = regex + "defied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(degas)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=degas)/)[0].trim(); verbObject.singularPast = regex + "degassed"; verbObject.singularPresent = regex + "degasses"; verbObject.continuous = regex + "degassing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dehumidify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dehumidify)/)[0].trim(); verbObject.singularPast = regex + "dehumidified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(deify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=deify)/)[0].trim(); verbObject.singularPast = regex + "deified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(demit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=demit)/)[0].trim(); verbObject.singularPast = regex + "demitted"; verbObject.continuous = regex + "demitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(demob)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=demob)/)[0].trim(); verbObject.singularPast = regex + "demobbed"; verbObject.continuous = regex + "demobbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(demulsify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=demulsify)/)[0].trim(); verbObject.singularPast = regex + "demulsified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(demur)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=demur)/)[0].trim(); verbObject.singularPast = regex + "demurred"; verbObject.continuous = regex + "demurring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(demystify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=demystify)/)[0].trim(); verbObject.singularPast = regex + "demystified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(den)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=den)/)[0].trim(); verbObject.singularPast = regex + "denned"; verbObject.continuous = regex + "denning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(denazify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=denazify)/)[0].trim(); verbObject.singularPast = regex + "denazified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(denitrify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=denitrify)/)[0].trim(); verbObject.singularPast = regex + "denitrified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(deny)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=deny)/)[0].trim(); verbObject.singularPast = regex + "denied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(descry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=descry)/)[0].trim(); verbObject.singularPast = regex + "descried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(deter)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=deter)/)[0].trim(); verbObject.singularPast = regex + "deterred"; verbObject.continuous = regex + "deterring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(detoxify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=detoxify)/)[0].trim(); verbObject.singularPast = regex + "detoxified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(devil)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=devil)/)[0].trim(); verbObject.singularPast = regex + "devilled"; verbObject.continuous = regex + "devilling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(devitrify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=devitrify)/)[0].trim(); verbObject.singularPast = regex + "devitrified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(diagram)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=diagram)/)[0].trim(); verbObject.singularPast = regex + "diagrammed"; verbObject.continuous = regex + "diagramming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dial)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dial)/)[0].trim(); verbObject.singularPast = regex + "dialled"; verbObject.continuous = regex + "dialling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dib)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dib)/)[0].trim(); verbObject.singularPast = regex + "dibbed"; verbObject.continuous = regex + "dibbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(die)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=die)/)[0].trim(); verbObject.continuous = regex + "dying"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dig)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dig)/)[0].trim(); verbObject.continuous = regex + "digging"; verbObject.singularPast = regex + "dug"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dignify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dignify)/)[0].trim(); verbObject.singularPast = regex + "dignified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dim)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dim)/)[0].trim(); verbObject.singularPast = regex + "dimmed"; verbObject.continuous = regex + "dimming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(din)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=din)/)[0].trim(); verbObject.singularPast = regex + "dinned"; verbObject.continuous = regex + "dinning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dip)/)[0].trim(); verbObject.singularPast = regex + "dipped"; verbObject.continuous = regex + "dipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dirty)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dirty)/)[0].trim(); verbObject.singularPast = regex + "dirtied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(disannul)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=disannul)/)[0].trim(); verbObject.singularPast = regex + "disannulled"; verbObject.continuous = regex + "disannulling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(disbar)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=disbar)/)[0].trim(); verbObject.singularPast = regex + "disbarred"; verbObject.continuous = regex + "disbarring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(disbud)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=disbud)/)[0].trim(); verbObject.singularPast = regex + "disbudded"; verbObject.continuous = regex + "disbudding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(disembody)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=disembody)/)[0].trim(); verbObject.singularPast = regex + "disembodied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(disembowel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=disembowel)/)[0].trim(); verbObject.singularPast = regex + "disembowelled"; verbObject.continuous = regex + "disembowelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(disenthrall)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=disenthrall)/)[0].trim(); verbObject.singularPast = regex + "disenthralled"; verbObject.continuous = regex + "disenthralling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dishevel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dishevel)/)[0].trim(); verbObject.singularPast = regex + "dishevelled"; verbObject.continuous = regex + "dishevelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(disinter)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=disinter)/)[0].trim(); verbObject.singularPast = regex + "disinterred"; verbObject.continuous = regex + "disinterring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dispel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dispel)/)[0].trim(); verbObject.singularPast = regex + "dispelled"; verbObject.continuous = regex + "dispelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(disqualify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=disqualify)/)[0].trim(); verbObject.singularPast = regex + "disqualified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dissatisfy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dissatisfy)/)[0].trim(); verbObject.singularPast = regex + "dissatisfied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(distill)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=distill)/)[0].trim(); verbObject.singularPast = regex + "distilled"; verbObject.continuous = regex + "distilling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(diversify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=diversify)/)[0].trim(); verbObject.singularPast = regex + "diversified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(divvy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=divvy)/)[0].trim(); verbObject.singularPast = regex + "divvied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dizzy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dizzy)/)[0].trim(); verbObject.singularPast = regex + "dizzied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(do)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=do)/)[0].trim(); verbObject.singularPast = regex + "did"; verbObject.perfect = regex + "done"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dog)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dog)/)[0].trim(); verbObject.singularPast = regex + "dogged"; verbObject.continuous = regex + "dogging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dogleg)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dogleg)/)[0].trim(); verbObject.singularPast = regex + "doglegged"; verbObject.continuous = regex + "doglegging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dolly)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dolly)/)[0].trim(); verbObject.singularPast = regex + "dollied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(don)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=don)/)[0].trim(); verbObject.singularPast = regex + "donned"; verbObject.continuous = regex + "donning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dot)/)[0].trim(); verbObject.singularPast = regex + "dotted"; verbObject.continuous = regex + "dotting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dow)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dow)/)[0].trim(); verbObject.singularPast = regex + "dought"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(drab)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=drab)/)[0].trim(); verbObject.singularPast = regex + "drabbed"; verbObject.continuous = regex + "drabbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(drag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=drag)/)[0].trim(); verbObject.singularPast = regex + "dragged"; verbObject.continuous = regex + "dragging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(draw)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=draw)/)[0].trim(); verbObject.perfect = regex + "drawn"; verbObject.singularPast = regex + "drew"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(drink)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=drink)/)[0].trim(); verbObject.singularPast = regex + "drank"; verbObject.perfect = regex + "drunk"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(drip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=drip)/)[0].trim(); verbObject.singularPast = regex + "dripped"; verbObject.continuous = regex + "dripping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(drive)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=drive)/)[0].trim(); verbObject.perfect = regex + "driven"; verbObject.singularPast = regex + "drove"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(drivel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=drivel)/)[0].trim(); verbObject.singularPast = regex + "drivelled"; verbObject.continuous = regex + "drivelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(drop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=drop)/)[0].trim(); verbObject.singularPast = regex + "dropped"; verbObject.continuous = regex + "dropping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(drub)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=drub)/)[0].trim(); verbObject.singularPast = regex + "drubbed"; verbObject.continuous = regex + "drubbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(drug)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=drug)/)[0].trim(); verbObject.singularPast = regex + "drugged"; verbObject.continuous = regex + "drugging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(drum)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=drum)/)[0].trim(); verbObject.singularPast = regex + "drummed"; verbObject.continuous = regex + "drumming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dry)/)[0].trim(); verbObject.singularPast = regex + "dried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dub)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dub)/)[0].trim(); verbObject.singularPast = regex + "dubbed"; verbObject.continuous = regex + "dubbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(duel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=duel)/)[0].trim(); verbObject.singularPast = regex + "duelled"; verbObject.continuous = regex + "duelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dulcify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dulcify)/)[0].trim(); verbObject.singularPast = regex + "dulcified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dummy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dummy)/)[0].trim(); verbObject.singularPast = regex + "dummied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(dun)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=dun)/)[0].trim(); verbObject.singularPast = regex + "dunned"; verbObject.continuous = regex + "dunning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(easy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=easy)/)[0].trim(); verbObject.singularPast = regex + "easied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(eat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=eat)/)[0].trim(); verbObject.singularPast = regex + "ate"; verbObject.perfect = regex + "eaten"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(eavesdrop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=eavesdrop)/)[0].trim(); verbObject.singularPast = regex + "eavesdropped"; verbObject.continuous = regex + "eavesdropping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(eddy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=eddy)/)[0].trim(); verbObject.singularPast = regex + "eddied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(edify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=edify)/)[0].trim(); verbObject.singularPast = regex + "edified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(electrify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=electrify)/)[0].trim(); verbObject.singularPast = regex + "electrified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(embed)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=embed)/)[0].trim(); verbObject.singularPast = regex + "embedded"; verbObject.continuous = regex + "embedding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(embody)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=embody)/)[0].trim(); verbObject.singularPast = regex + "embodied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(embus)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=embus)/)[0].trim(); verbObject.singularPast = regex + "embussed"; verbObject.singularPresent = regex + "embusses"; verbObject.continuous = regex + "embussing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(emit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=emit)/)[0].trim(); verbObject.singularPast = regex + "emitted"; verbObject.continuous = regex + "emitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(empanel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=empanel)/)[0].trim(); verbObject.singularPast = regex + "empanelled"; verbObject.continuous = regex + "empanelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(empty)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=empty)/)[0].trim(); verbObject.singularPast = regex + "emptied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(emulsify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=emulsify)/)[0].trim(); verbObject.singularPast = regex + "emulsified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(enamel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=enamel)/)[0].trim(); verbObject.singularPast = regex + "enamelled"; verbObject.continuous = regex + "enamelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(englut)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=englut)/)[0].trim(); verbObject.singularPast = regex + "englutted"; verbObject.continuous = regex + "englutting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(enroll)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=enroll)/)[0].trim(); verbObject.singularPast = regex + "enrolled"; verbObject.continuous = regex + "enrolling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(enthrall)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=enthrall)/)[0].trim(); verbObject.singularPast = regex + "enthralled"; verbObject.continuous = regex + "enthralling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(entrammel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=entrammel)/)[0].trim(); verbObject.singularPast = regex + "entrammelled"; verbObject.continuous = regex + "entrammelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(entrap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=entrap)/)[0].trim(); verbObject.singularPast = regex + "entrapped"; verbObject.continuous = regex + "entrapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(envy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=envy)/)[0].trim(); verbObject.singularPast = regex + "envied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(enwind)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=enwind)/)[0].trim(); verbObject.singularPast = regex + "enwound"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(enwrap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=enwrap)/)[0].trim(); verbObject.singularPast = regex + "enwrapped"; verbObject.continuous = regex + "enwrapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(equal)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=equal)/)[0].trim(); verbObject.singularPast = regex + "equalled"; verbObject.continuous = regex + "equalling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(equip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=equip)/)[0].trim(); verbObject.singularPast = regex + "equipped"; verbObject.continuous = regex + "equipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(espy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=espy)/)[0].trim(); verbObject.singularPast = regex + "espied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(esterify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=esterify)/)[0].trim(); verbObject.singularPast = regex + "esterified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(estop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=estop)/)[0].trim(); verbObject.singularPast = regex + "estopped"; verbObject.continuous = regex + "estopping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(etherify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=etherify)/)[0].trim(); verbObject.singularPast = regex + "etherified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(excel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=excel)/)[0].trim(); verbObject.singularPast = regex + "excelled"; verbObject.continuous = regex + "excelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(exemplify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=exemplify)/)[0].trim(); verbObject.singularPast = regex + "exemplified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(expel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=expel)/)[0].trim(); verbObject.singularPast = regex + "expelled"; verbObject.continuous = regex + "expelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(extoll)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=extoll)/)[0].trim(); verbObject.singularPast = regex + "extolled"; verbObject.continuous = regex + "extolling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(facet)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=facet)/)[0].trim(); verbObject.singularPast = regex + "facetted"; verbObject.continuous = regex + "facetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fag)/)[0].trim(); verbObject.singularPast = regex + "fagged"; verbObject.continuous = regex + "fagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fall)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fall)/)[0].trim(); verbObject.perfect = regex + "fallen"; verbObject.singularPast = regex + "fell"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(falsify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=falsify)/)[0].trim(); verbObject.singularPast = regex + "falsified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fan)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fan)/)[0].trim(); verbObject.singularPast = regex + "fanned"; verbObject.continuous = regex + "fanning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fancy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fancy)/)[0].trim(); verbObject.singularPast = regex + "fancied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fantasy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fantasy)/)[0].trim(); verbObject.singularPast = regex + "fantasied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fat)/)[0].trim(); verbObject.singularPast = regex + "fatted"; verbObject.continuous = regex + "fatting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(featherbed)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=featherbed)/)[0].trim(); verbObject.singularPast = regex + "featherbedded"; verbObject.continuous = regex + "featherbedding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fee)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fee)/)[0].trim(); verbObject.singularPast = regex + "feed"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(feed)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=feed)/)[0].trim(); verbObject.singularPast = regex + "fed"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(feel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=feel)/)[0].trim(); verbObject.singularPast = regex + "felt"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ferry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ferry)/)[0].trim(); verbObject.singularPast = regex + "ferried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fib)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fib)/)[0].trim(); verbObject.singularPast = regex + "fibbed"; verbObject.continuous = regex + "fibbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fig)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fig)/)[0].trim(); verbObject.singularPast = regex + "figged"; verbObject.continuous = regex + "figging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fight)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fight)/)[0].trim(); verbObject.singularPast = regex + "fought"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fin)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fin)/)[0].trim(); verbObject.singularPast = regex + "finned"; verbObject.continuous = regex + "finning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(find)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=find)/)[0].trim(); verbObject.singularPast = regex + "found"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fit)/)[0].trim(); verbObject.singularPast = regex + "fitted"; verbObject.continuous = regex + "fitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(flag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=flag)/)[0].trim(); verbObject.singularPast = regex + "flagged"; verbObject.continuous = regex + "flagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(flam)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=flam)/)[0].trim(); verbObject.singularPast = regex + "flammed"; verbObject.continuous = regex + "flamming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(flannel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=flannel)/)[0].trim(); verbObject.singularPast = regex + "flannelled"; verbObject.continuous = regex + "flannelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(flap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=flap)/)[0].trim(); verbObject.singularPast = regex + "flapped"; verbObject.continuous = regex + "flapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(flat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=flat)/)[0].trim(); verbObject.singularPast = regex + "flatted"; verbObject.continuous = regex + "flatting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(flee)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=flee)/)[0].trim(); verbObject.singularPast = regex + "fled"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(flimflam)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=flimflam)/)[0].trim(); verbObject.singularPast = regex + "flimflammed"; verbObject.continuous = regex + "flimflamming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fling)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fling)/)[0].trim(); verbObject.singularPast = regex + "flung"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(flip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=flip)/)[0].trim(); verbObject.singularPast = regex + "flipped"; verbObject.continuous = regex + "flipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(flit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=flit)/)[0].trim(); verbObject.singularPast = regex + "flitted"; verbObject.continuous = regex + "flitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(flog)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=flog)/)[0].trim(); verbObject.singularPast = regex + "flogged"; verbObject.continuous = regex + "flogging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(floodlight)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=floodlight)/)[0].trim(); verbObject.singularPast = regex + "floodlit"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(flop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=flop)/)[0].trim(); verbObject.singularPast = regex + "flopped"; verbObject.continuous = regex + "flopping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(flub)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=flub)/)[0].trim(); verbObject.singularPast = regex + "flubbed"; verbObject.continuous = regex + "flubbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(flurry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=flurry)/)[0].trim(); verbObject.singularPast = regex + "flurried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fly)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fly)/)[0].trim(); verbObject.singularPast = regex + "flew"; verbObject.perfect = regex + "flown"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(flyblow)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=flyblow)/)[0].trim(); verbObject.singularPast = regex + "flyblew"; verbObject.perfect = regex + "flyblown"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fob)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fob)/)[0].trim(); verbObject.singularPast = regex + "fobbed"; verbObject.continuous = regex + "fobbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fog)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fog)/)[0].trim(); verbObject.singularPast = regex + "fogged"; verbObject.continuous = regex + "fogging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(footslog)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=footslog)/)[0].trim(); verbObject.singularPast = regex + "footslogged"; verbObject.continuous = regex + "footslogging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(forbear)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=forbear)/)[0].trim(); verbObject.singularPast = regex + "forbore"; verbObject.perfect = regex + "forborne"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(forbid)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=forbid)/)[0].trim(); verbObject.singularPast = regex + "forbad"; verbObject.perfect = regex + "forbidden"; verbObject.continuous = regex + "forbidding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fordo)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fordo)/)[0].trim(); verbObject.singularPast = regex + "fordid"; verbObject.perfect = regex + "fordone"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(foredo)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=foredo)/)[0].trim(); verbObject.singularPast = regex + "foredid"; verbObject.perfect = regex + "foredone"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(forego)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=forego)/)[0].trim(); verbObject.perfect = regex + "foregone"; verbObject.singularPast = regex + "forewent"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(foreknow)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=foreknow)/)[0].trim(); verbObject.singularPast = regex + "foreknew"; verbObject.perfect = regex + "foreknown"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(forerun)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=forerun)/)[0].trim(); verbObject.singularPast = regex + "foreran"; verbObject.continuous = regex + "forerunning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(foresee)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=foresee)/)[0].trim(); verbObject.singularPast = regex + "foresaw"; verbObject.perfect = regex + "foreseen"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(foreshow)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=foreshow)/)[0].trim(); verbObject.perfect = regex + "foreshown"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(forespeak)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=forespeak)/)[0].trim(); verbObject.singularPast = regex + "forespoke"; verbObject.perfect = regex + "forespoken"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(foretell)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=foretell)/)[0].trim(); verbObject.singularPast = regex + "foretold"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(forget)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=forget)/)[0].trim(); verbObject.continuous = regex + "forgetting"; verbObject.singularPast = regex + "forgot"; verbObject.perfect = regex + "forgotten"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(forgive)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=forgive)/)[0].trim(); verbObject.singularPast = regex + "forgave"; verbObject.perfect = regex + "forgiven"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(forgo)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=forgo)/)[0].trim(); verbObject.perfect = regex + "forgone"; verbObject.singularPast = regex + "forwent"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(format)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=format)/)[0].trim(); verbObject.singularPast = regex + "formatted"; verbObject.continuous = regex + "formatting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(forsake)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=forsake)/)[0].trim(); verbObject.perfect = regex + "forsaken"; verbObject.singularPast = regex + "forsook"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(forspeak)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=forspeak)/)[0].trim(); verbObject.singularPast = regex + "forspoke"; verbObject.perfect = regex + "forspoken"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(forswear)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=forswear)/)[0].trim(); verbObject.singularPast = regex + "forswore"; verbObject.perfect = regex + "forsworn"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fortify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fortify)/)[0].trim(); verbObject.singularPast = regex + "fortified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(foxtrot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=foxtrot)/)[0].trim(); verbObject.singularPast = regex + "foxtrotted"; verbObject.continuous = regex + "foxtrotting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(frap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=frap)/)[0].trim(); verbObject.singularPast = regex + "frapped"; verbObject.continuous = regex + "frapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(freeze)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=freeze)/)[0].trim(); verbObject.singularPast = regex + "froze"; verbObject.perfect = regex + "frozen"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(frenchify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=frenchify)/)[0].trim(); verbObject.singularPast = regex + "frenchified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(frenzy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=frenzy)/)[0].trim(); verbObject.singularPast = regex + "frenzied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fret)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fret)/)[0].trim(); verbObject.singularPast = regex + "fretted"; verbObject.continuous = regex + "fretting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(frig)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=frig)/)[0].trim(); verbObject.singularPast = regex + "frigged"; verbObject.continuous = regex + "frigging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fritt)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fritt)/)[0].trim(); verbObject.singularPast = regex + "fritted"; verbObject.continuous = regex + "fritting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(frivol)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=frivol)/)[0].trim(); verbObject.singularPast = regex + "frivolled"; verbObject.continuous = regex + "frivolling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(frog)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=frog)/)[0].trim(); verbObject.singularPast = regex + "frogged"; verbObject.continuous = regex + "frogging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(frolic)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=frolic)/)[0].trim(); verbObject.singularPast = regex + "frolicked"; verbObject.continuous = regex + "frolicking"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fructify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fructify)/)[0].trim(); verbObject.singularPast = regex + "fructified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fry)/)[0].trim(); verbObject.singularPast = regex + "fried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fuel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fuel)/)[0].trim(); verbObject.singularPast = regex + "fuelled"; verbObject.continuous = regex + "fuelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fulfill)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fulfill)/)[0].trim(); verbObject.singularPast = regex + "fulfilled"; verbObject.continuous = regex + "fulfilling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fun)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fun)/)[0].trim(); verbObject.singularPast = regex + "funned"; verbObject.continuous = regex + "funning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(funnel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=funnel)/)[0].trim(); verbObject.singularPast = regex + "funnelled"; verbObject.continuous = regex + "funnelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(fur)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=fur)/)[0].trim(); verbObject.singularPast = regex + "furred"; verbObject.continuous = regex + "furring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(gad)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=gad)/)[0].trim(); verbObject.singularPast = regex + "gadded"; verbObject.continuous = regex + "gadding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(gag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=gag)/)[0].trim(); verbObject.singularPast = regex + "gagged"; verbObject.continuous = regex + "gagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(gainsay)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=gainsay)/)[0].trim(); verbObject.singularPast = regex + "gainsaid"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(gam)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=gam)/)[0].trim(); verbObject.singularPast = regex + "gammed"; verbObject.continuous = regex + "gamming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(gambol)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=gambol)/)[0].trim(); verbObject.singularPast = regex + "gambolled"; verbObject.continuous = regex + "gambolling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(gan)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=gan)/)[0].trim(); verbObject.singularPast = regex + "ganned"; verbObject.continuous = regex + "ganning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(gap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=gap)/)[0].trim(); verbObject.singularPast = regex + "gapped"; verbObject.continuous = regex + "gapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(gas)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=gas)/)[0].trim(); verbObject.singularPast = regex + "gassed"; verbObject.singularPresent = regex + "gasses"; verbObject.continuous = regex + "gassing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(gasify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=gasify)/)[0].trim(); verbObject.singularPast = regex + "gasified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(gel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=gel)/)[0].trim(); verbObject.singularPast = regex + "gelled"; verbObject.continuous = regex + "gelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(gem)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=gem)/)[0].trim(); verbObject.singularPast = regex + "gemmed"; verbObject.continuous = regex + "gemming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(get)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=get)/)[0].trim(); verbObject.continuous = regex + "getting"; verbObject.singularPast = regex + "got"; verbObject.perfect = regex + "gotten"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ghostwrite)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ghostwrite)/)[0].trim(); verbObject.perfect = regex + "ghostwritten"; verbObject.singularPast = regex + "ghostwrote"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(gib)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=gib)/)[0].trim(); verbObject.singularPast = regex + "gibbed"; verbObject.continuous = regex + "gibbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(giddy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=giddy)/)[0].trim(); verbObject.singularPast = regex + "giddied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(giftwrap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=giftwrap)/)[0].trim(); verbObject.singularPast = regex + "giftwrapped"; verbObject.continuous = regex + "giftwrapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(gig)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=gig)/)[0].trim(); verbObject.singularPast = regex + "gigged"; verbObject.continuous = regex + "gigging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(gin)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=gin)/)[0].trim(); verbObject.singularPast = regex + "ginned"; verbObject.continuous = regex + "ginning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(gip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=gip)/)[0].trim(); verbObject.singularPast = regex + "gipped"; verbObject.continuous = regex + "gipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(give)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=give)/)[0].trim(); verbObject.singularPast = regex + "gave"; verbObject.perfect = regex + "given"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(glom)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=glom)/)[0].trim(); verbObject.singularPast = regex + "glommed"; verbObject.continuous = regex + "glomming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(glorify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=glorify)/)[0].trim(); verbObject.singularPast = regex + "glorified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(glory)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=glory)/)[0].trim(); verbObject.singularPast = regex + "gloried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(glut)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=glut)/)[0].trim(); verbObject.singularPast = regex + "glutted"; verbObject.continuous = regex + "glutting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(go)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=go)/)[0].trim(); verbObject.perfect = regex + "gone"; verbObject.singularPast = regex + "went"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(golly)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=golly)/)[0].trim(); verbObject.singularPast = regex + "gollied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(grab)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=grab)/)[0].trim(); verbObject.singularPast = regex + "grabbed"; verbObject.continuous = regex + "grabbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(gratify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=gratify)/)[0].trim(); verbObject.singularPast = regex + "gratified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(grave)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=grave)/)[0].trim(); verbObject.perfect = regex + "graven"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(gravel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=gravel)/)[0].trim(); verbObject.singularPast = regex + "gravelled"; verbObject.continuous = regex + "gravelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(grin)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=grin)/)[0].trim(); verbObject.singularPast = regex + "grinned"; verbObject.continuous = regex + "grinning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(grind)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=grind)/)[0].trim(); verbObject.singularPast = regex + "ground"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(grip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=grip)/)[0].trim(); verbObject.singularPast = regex + "gripped"; verbObject.continuous = regex + "gripping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(grit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=grit)/)[0].trim(); verbObject.singularPast = regex + "gritted"; verbObject.continuous = regex + "gritting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(grovel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=grovel)/)[0].trim(); verbObject.singularPast = regex + "grovelled"; verbObject.continuous = regex + "grovelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(grow)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=grow)/)[0].trim(); verbObject.singularPast = regex + "grew"; verbObject.perfect = regex + "grown"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(grub)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=grub)/)[0].trim(); verbObject.singularPast = regex + "grubbed"; verbObject.continuous = regex + "grubbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(guaranty)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=guaranty)/)[0].trim(); verbObject.singularPast = regex + "guarantied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(gully)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=gully)/)[0].trim(); verbObject.singularPast = regex + "gullied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(gum)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=gum)/)[0].trim(); verbObject.singularPast = regex + "gummed"; verbObject.continuous = regex + "gumming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(gun)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=gun)/)[0].trim(); verbObject.singularPast = regex + "gunned"; verbObject.continuous = regex + "gunning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(gyp)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=gyp)/)[0].trim(); verbObject.singularPast = regex + "gypped"; verbObject.continuous = regex + "gypping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hacksaw)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hacksaw)/)[0].trim(); verbObject.perfect = regex + "hacksawn"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ham)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ham)/)[0].trim(); verbObject.singularPast = regex + "hammed"; verbObject.continuous = regex + "hamming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hamstring)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hamstring)/)[0].trim(); verbObject.singularPast = regex + "hamstrung"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(handfeed)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=handfeed)/)[0].trim(); verbObject.singularPast = regex + "handfed"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(handicap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=handicap)/)[0].trim(); verbObject.singularPast = regex + "handicapped"; verbObject.continuous = regex + "handicapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(handsel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=handsel)/)[0].trim(); verbObject.singularPast = regex + "handselled"; verbObject.continuous = regex + "handselling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hang)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hang)/)[0].trim(); verbObject.singularPast = regex + "hung"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(harry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=harry)/)[0].trim(); verbObject.singularPast = regex + "harried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hat)/)[0].trim(); verbObject.singularPast = regex + "hatted"; verbObject.continuous = regex + "hatting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hatchel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hatchel)/)[0].trim(); verbObject.singularPast = regex + "hatchelled"; verbObject.continuous = regex + "hatchelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(have)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=have)/)[0].trim(); verbObject.singularPast = regex + "had"; verbObject.singularPresent = regex + "has"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hear)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hear)/)[0].trim(); verbObject.singularPast = regex + "heard"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hedgehop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hedgehop)/)[0].trim(); verbObject.singularPast = regex + "hedgehopped"; verbObject.continuous = regex + "hedgehopping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hem)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hem)/)[0].trim(); verbObject.singularPast = regex + "hemmed"; verbObject.continuous = regex + "hemming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hew)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hew)/)[0].trim(); verbObject.perfect = regex + "hewn"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hiccup)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hiccup)/)[0].trim(); verbObject.singularPast = regex + "hiccupped"; verbObject.continuous = regex + "hiccupping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hide)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hide)/)[0].trim(); verbObject.singularPast = regex + "hid"; verbObject.perfect = regex + "hidden"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hinny)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hinny)/)[0].trim(); verbObject.singularPast = regex + "hinnied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hit)/)[0].trim(); verbObject.continuous = regex + "hitting"; verbObject.singularPast = regex + "hit"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hob)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hob)/)[0].trim(); verbObject.singularPast = regex + "hobbed"; verbObject.continuous = regex + "hobbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hobnob)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hobnob)/)[0].trim(); verbObject.singularPast = regex + "hobnobbed"; verbObject.continuous = regex + "hobnobbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hocus)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hocus)/)[0].trim(); verbObject.singularPast = regex + "hocussed"; verbObject.continuous = regex + "hocussing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hog)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hog)/)[0].trim(); verbObject.singularPast = regex + "hogged"; verbObject.continuous = regex + "hogging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hogtie)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hogtie)/)[0].trim(); verbObject.continuous = regex + "hogtying"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hold)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hold)/)[0].trim(); verbObject.singularPast = regex + "held"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hop)/)[0].trim(); verbObject.singularPast = regex + "hopped"; verbObject.continuous = regex + "hopping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(horrify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=horrify)/)[0].trim(); verbObject.singularPast = regex + "horrified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(horsewhip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=horsewhip)/)[0].trim(); verbObject.singularPast = regex + "horsewhipped"; verbObject.continuous = regex + "horsewhipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(housel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=housel)/)[0].trim(); verbObject.singularPast = regex + "houselled"; verbObject.continuous = regex + "houselling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hovel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hovel)/)[0].trim(); verbObject.singularPast = regex + "hovelled"; verbObject.continuous = regex + "hovelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hug)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hug)/)[0].trim(); verbObject.singularPast = regex + "hugged"; verbObject.continuous = regex + "hugging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hum)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hum)/)[0].trim(); verbObject.singularPast = regex + "hummed"; verbObject.continuous = regex + "humming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(humbug)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=humbug)/)[0].trim(); verbObject.singularPast = regex + "humbugged"; verbObject.continuous = regex + "humbugging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(humidify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=humidify)/)[0].trim(); verbObject.singularPast = regex + "humidified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hurry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hurry)/)[0].trim(); verbObject.singularPast = regex + "hurried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(hypertrophy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=hypertrophy)/)[0].trim(); verbObject.singularPast = regex + "hypertrophied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(identify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=identify)/)[0].trim(); verbObject.singularPast = regex + "identified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(imbed)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=imbed)/)[0].trim(); verbObject.singularPast = regex + "imbedded"; verbObject.continuous = regex + "imbedding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(impanel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=impanel)/)[0].trim(); verbObject.singularPast = regex + "impanelled"; verbObject.continuous = regex + "impanelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(impel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=impel)/)[0].trim(); verbObject.singularPast = regex + "impelled"; verbObject.continuous = regex + "impelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(imply)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=imply)/)[0].trim(); verbObject.singularPast = regex + "implied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(inbreed)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=inbreed)/)[0].trim(); verbObject.singularPast = regex + "inbred"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(incur)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=incur)/)[0].trim(); verbObject.singularPast = regex + "incurred"; verbObject.continuous = regex + "incurring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(indemnify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=indemnify)/)[0].trim(); verbObject.singularPast = regex + "indemnified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(infer)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=infer)/)[0].trim(); verbObject.singularPast = regex + "inferred"; verbObject.continuous = regex + "inferring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(initial)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=initial)/)[0].trim(); verbObject.singularPast = regex + "initialled"; verbObject.continuous = regex + "initialling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(inlay)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=inlay)/)[0].trim(); verbObject.singularPast = regex + "inlaid"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(inset)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=inset)/)[0].trim(); verbObject.continuous = regex + "insetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(inspan)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=inspan)/)[0].trim(); verbObject.singularPast = regex + "inspanned"; verbObject.continuous = regex + "inspanning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(install)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=install)/)[0].trim(); verbObject.singularPast = regex + "installed"; verbObject.continuous = regex + "installing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(intensify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=intensify)/)[0].trim(); verbObject.singularPast = regex + "intensified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(inter)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=inter)/)[0].trim(); verbObject.singularPast = regex + "interred"; verbObject.continuous = regex + "interring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(interbreed)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=interbreed)/)[0].trim(); verbObject.singularPast = regex + "interbred"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(intercrop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=intercrop)/)[0].trim(); verbObject.singularPast = regex + "intercropped"; verbObject.continuous = regex + "intercropping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(intercut)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=intercut)/)[0].trim(); verbObject.continuous = regex + "intercutting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(interlap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=interlap)/)[0].trim(); verbObject.singularPast = regex + "interlapped"; verbObject.continuous = regex + "interlapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(interlay)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=interlay)/)[0].trim(); verbObject.singularPast = regex + "interlaid"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(intermarry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=intermarry)/)[0].trim(); verbObject.singularPast = regex + "intermarried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(intermit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=intermit)/)[0].trim(); verbObject.singularPast = regex + "intermitted"; verbObject.continuous = regex + "intermitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(interplead)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=interplead)/)[0].trim(); verbObject.singularPast = regex + "interpled"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(interstratify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=interstratify)/)[0].trim(); verbObject.singularPast = regex + "interstratified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(interweave)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=interweave)/)[0].trim(); verbObject.singularPast = regex + "interwove"; verbObject.perfect = regex + "interwoven"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(intromit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=intromit)/)[0].trim(); verbObject.singularPast = regex + "intromitted"; verbObject.continuous = regex + "intromitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(inweave)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=inweave)/)[0].trim(); verbObject.singularPast = regex + "inwove"; verbObject.perfect = regex + "inwoven"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(inwrap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=inwrap)/)[0].trim(); verbObject.singularPast = regex + "inwrapped"; verbObject.continuous = regex + "inwrapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(jab)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=jab)/)[0].trim(); verbObject.singularPast = regex + "jabbed"; verbObject.continuous = regex + "jabbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(jag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=jag)/)[0].trim(); verbObject.singularPast = regex + "jagged"; verbObject.continuous = regex + "jagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(jam)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=jam)/)[0].trim(); verbObject.singularPast = regex + "jammed"; verbObject.continuous = regex + "jamming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(japan)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=japan)/)[0].trim(); verbObject.singularPast = regex + "japanned"; verbObject.continuous = regex + "japanning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(jar)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=jar)/)[0].trim(); verbObject.singularPast = regex + "jarred"; verbObject.continuous = regex + "jarring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(jellify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=jellify)/)[0].trim(); verbObject.singularPast = regex + "jellified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(jelly)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=jelly)/)[0].trim(); verbObject.singularPast = regex + "jellied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(jemmy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=jemmy)/)[0].trim(); verbObject.singularPast = regex + "jemmied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(jet)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=jet)/)[0].trim(); verbObject.singularPast = regex + "jetted"; verbObject.continuous = regex + "jetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(jewel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=jewel)/)[0].trim(); verbObject.singularPast = regex + "jewelled"; verbObject.continuous = regex + "jewelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(jib)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=jib)/)[0].trim(); verbObject.singularPast = regex + "jibbed"; verbObject.continuous = regex + "jibbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(jig)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=jig)/)[0].trim(); verbObject.singularPast = regex + "jigged"; verbObject.continuous = regex + "jigging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(jimmy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=jimmy)/)[0].trim(); verbObject.singularPast = regex + "jimmied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(jitterbug)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=jitterbug)/)[0].trim(); verbObject.singularPast = regex + "jitterbugged"; verbObject.continuous = regex + "jitterbugging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(job)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=job)/)[0].trim(); verbObject.singularPast = regex + "jobbed"; verbObject.continuous = regex + "jobbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(jog)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=jog)/)[0].trim(); verbObject.singularPast = regex + "jogged"; verbObject.continuous = regex + "jogging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(jollify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=jollify)/)[0].trim(); verbObject.singularPast = regex + "jollified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(jolly)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=jolly)/)[0].trim(); verbObject.singularPast = regex + "jollied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(jot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=jot)/)[0].trim(); verbObject.singularPast = regex + "jotted"; verbObject.continuous = regex + "jotting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(joypop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=joypop)/)[0].trim(); verbObject.singularPast = regex + "joypopped"; verbObject.continuous = regex + "joypopping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(jug)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=jug)/)[0].trim(); verbObject.singularPast = regex + "jugged"; verbObject.continuous = regex + "jugging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(justify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=justify)/)[0].trim(); verbObject.singularPast = regex + "justified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(jut)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=jut)/)[0].trim(); verbObject.singularPast = regex + "jutted"; verbObject.continuous = regex + "jutting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(keep)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=keep)/)[0].trim(); verbObject.singularPast = regex + "kept"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ken)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ken)/)[0].trim(); verbObject.singularPast = regex + "kenned"; verbObject.continuous = regex + "kenning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(kennel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=kennel)/)[0].trim(); verbObject.singularPast = regex + "kennelled"; verbObject.continuous = regex + "kennelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(kernel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=kernel)/)[0].trim(); verbObject.singularPast = regex + "kernelled"; verbObject.continuous = regex + "kernelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(kid)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=kid)/)[0].trim(); verbObject.singularPast = regex + "kidded"; verbObject.continuous = regex + "kidding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(kidnap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=kidnap)/)[0].trim(); verbObject.singularPast = regex + "kidnapped"; verbObject.continuous = regex + "kidnapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(kip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=kip)/)[0].trim(); verbObject.singularPast = regex + "kipped"; verbObject.continuous = regex + "kipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(knap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=knap)/)[0].trim(); verbObject.singularPast = regex + "knapped"; verbObject.continuous = regex + "knapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(kneecap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=kneecap)/)[0].trim(); verbObject.singularPast = regex + "kneecapped"; verbObject.continuous = regex + "kneecapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(knit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=knit)/)[0].trim(); verbObject.singularPast = regex + "knitted"; verbObject.continuous = regex + "knitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(knob)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=knob)/)[0].trim(); verbObject.singularPast = regex + "knobbed"; verbObject.continuous = regex + "knobbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(knot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=knot)/)[0].trim(); verbObject.singularPast = regex + "knotted"; verbObject.continuous = regex + "knotting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(know)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=know)/)[0].trim(); verbObject.singularPast = regex + "knew"; verbObject.perfect = regex + "known"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ko)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ko)/)[0].trim(); verbObject.singularPresent = regex + "ko's"; verbObject.singularPast = regex + "ko'd"; verbObject.continuous = regex + "ko'ing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(label)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=label)/)[0].trim(); verbObject.singularPast = regex + "labelled"; verbObject.continuous = regex + "labelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(lade)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=lade)/)[0].trim(); verbObject.perfect = regex + "laden"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ladify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ladify)/)[0].trim(); verbObject.singularPast = regex + "ladyfied"; verbObject.singularPresent = regex + "ladyfies"; verbObject.continuous = regex + "ladyfying"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(lag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=lag)/)[0].trim(); verbObject.singularPast = regex + "lagged"; verbObject.continuous = regex + "lagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(lallygag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=lallygag)/)[0].trim(); verbObject.singularPast = regex + "lallygagged"; verbObject.continuous = regex + "lallygagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(lam)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=lam)/)[0].trim(); verbObject.singularPast = regex + "lammed"; verbObject.continuous = regex + "lamming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(lap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=lap)/)[0].trim(); verbObject.singularPast = regex + "lapped"; verbObject.continuous = regex + "lapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(lapidify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=lapidify)/)[0].trim(); verbObject.singularPast = regex + "lapidified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(laurel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=laurel)/)[0].trim(); verbObject.singularPast = regex + "laurelled"; verbObject.continuous = regex + "laurelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(lay)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=lay)/)[0].trim(); verbObject.singularPast = regex + "laid"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(lead)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=lead)/)[0].trim(); verbObject.singularPast = regex + "led"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(leapfrog)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=leapfrog)/)[0].trim(); verbObject.singularPast = regex + "leapfrogged"; verbObject.continuous = regex + "leapfrogging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(leave)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=leave)/)[0].trim(); verbObject.singularPast = regex + "left"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(lend)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=lend)/)[0].trim(); verbObject.singularPast = regex + "lent"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(let)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=let)/)[0].trim(); verbObject.continuous = regex + "letting"; verbObject.singularPast = regex + "let"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(level)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=level)/)[0].trim(); verbObject.singularPast = regex + "levelled"; verbObject.continuous = regex + "levelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(levy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=levy)/)[0].trim(); verbObject.singularPast = regex + "levied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(libel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=libel)/)[0].trim(); verbObject.singularPast = regex + "libelled"; verbObject.continuous = regex + "libelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(lie)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=lie)/)[0].trim(); verbObject.perfect = regex + "lain"; verbObject.singularPast = regex + "lay"; verbObject.continuous = regex + "lying"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(light)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=light)/)[0].trim(); verbObject.singularPast = regex + "lit"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(lignify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=lignify)/)[0].trim(); verbObject.singularPast = regex + "lignified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(lip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=lip)/)[0].trim(); verbObject.singularPast = regex + "lipped"; verbObject.continuous = regex + "lipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(liquefy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=liquefy)/)[0].trim(); verbObject.singularPast = regex + "liquefied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(liquify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=liquify)/)[0].trim(); verbObject.singularPast = regex + "liquified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(lob)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=lob)/)[0].trim(); verbObject.singularPast = regex + "lobbed"; verbObject.continuous = regex + "lobbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(lobby)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=lobby)/)[0].trim(); verbObject.singularPast = regex + "lobbied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(log)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=log)/)[0].trim(); verbObject.singularPast = regex + "logged"; verbObject.continuous = regex + "logging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(lop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=lop)/)[0].trim(); verbObject.singularPast = regex + "lopped"; verbObject.continuous = regex + "lopping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(lose)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=lose)/)[0].trim(); verbObject.singularPast = regex + "lost"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(lot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=lot)/)[0].trim(); verbObject.singularPast = regex + "lotted"; verbObject.continuous = regex + "lotting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(lug)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=lug)/)[0].trim(); verbObject.singularPast = regex + "lugged"; verbObject.continuous = regex + "lugging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(lullaby)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=lullaby)/)[0].trim(); verbObject.singularPast = regex + "lullabied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(mad)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=mad)/)[0].trim(); verbObject.singularPast = regex + "madded"; verbObject.continuous = regex + "madding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(magnify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=magnify)/)[0].trim(); verbObject.singularPast = regex + "magnified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(make)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=make)/)[0].trim(); verbObject.singularPast = regex + "made"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(man)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=man)/)[0].trim(); verbObject.singularPast = regex + "manned"; verbObject.continuous = regex + "manning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(manumit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=manumit)/)[0].trim(); verbObject.singularPast = regex + "manumitted"; verbObject.continuous = regex + "manumitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(map)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=map)/)[0].trim(); verbObject.singularPast = regex + "mapped"; verbObject.continuous = regex + "mapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(mar)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=mar)/)[0].trim(); verbObject.singularPast = regex + "marred"; verbObject.continuous = regex + "marring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(marcel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=marcel)/)[0].trim(); verbObject.singularPast = regex + "marcelled"; verbObject.continuous = regex + "marcelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(marry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=marry)/)[0].trim(); verbObject.singularPast = regex + "married"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(marshal)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=marshal)/)[0].trim(); verbObject.singularPast = regex + "marshalled"; verbObject.continuous = regex + "marshalling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(marvel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=marvel)/)[0].trim(); verbObject.singularPast = regex + "marvelled"; verbObject.continuous = regex + "marvelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(mat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=mat)/)[0].trim(); verbObject.singularPast = regex + "matted"; verbObject.continuous = regex + "matting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(mean)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=mean)/)[0].trim(); verbObject.singularPast = regex + "meant"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(medal)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=medal)/)[0].trim(); verbObject.singularPast = regex + "medalled"; verbObject.continuous = regex + "medalling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(meet)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=meet)/)[0].trim(); verbObject.singularPast = regex + "met"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(metal)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=metal)/)[0].trim(); verbObject.singularPast = regex + "metalled"; verbObject.continuous = regex + "metalling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(metrify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=metrify)/)[0].trim(); verbObject.singularPast = regex + "metrified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(mimic)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=mimic)/)[0].trim(); verbObject.singularPast = regex + "mimicked"; verbObject.continuous = regex + "mimicking"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(minify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=minify)/)[0].trim(); verbObject.singularPast = regex + "minified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(misapply)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=misapply)/)[0].trim(); verbObject.singularPast = regex + "misapplied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(misbecome)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=misbecome)/)[0].trim(); verbObject.singularPast = regex + "misbecame"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(miscarry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=miscarry)/)[0].trim(); verbObject.singularPast = regex + "miscarried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(misdeal)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=misdeal)/)[0].trim(); verbObject.singularPast = regex + "misdealt"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(misfit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=misfit)/)[0].trim(); verbObject.singularPast = regex + "misfitted"; verbObject.continuous = regex + "misfitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(misgive)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=misgive)/)[0].trim(); verbObject.singularPast = regex + "misgave"; verbObject.perfect = regex + "misgiven"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(mishit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=mishit)/)[0].trim(); verbObject.continuous = regex + "mishitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(mislay)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=mislay)/)[0].trim(); verbObject.singularPast = regex + "mislaid"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(mislead)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=mislead)/)[0].trim(); verbObject.singularPast = regex + "misled"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(misplead)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=misplead)/)[0].trim(); verbObject.singularPast = regex + "mispled"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(misspend)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=misspend)/)[0].trim(); verbObject.singularPast = regex + "misspent"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(mistake)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=mistake)/)[0].trim(); verbObject.perfect = regex + "mistaken"; verbObject.singularPast = regex + "mistook"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(misunderstand)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=misunderstand)/)[0].trim(); verbObject.singularPast = regex + "misunderstood"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(mob)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=mob)/)[0].trim(); verbObject.singularPast = regex + "mobbed"; verbObject.continuous = regex + "mobbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(model)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=model)/)[0].trim(); verbObject.singularPast = regex + "modelled"; verbObject.continuous = regex + "modelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(modify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=modify)/)[0].trim(); verbObject.singularPast = regex + "modified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(mollify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=mollify)/)[0].trim(); verbObject.singularPast = regex + "mollified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(mop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=mop)/)[0].trim(); verbObject.singularPast = regex + "mopped"; verbObject.continuous = regex + "mopping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(mortify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=mortify)/)[0].trim(); verbObject.singularPast = regex + "mortified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(mow)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=mow)/)[0].trim(); verbObject.perfect = regex + "mown"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(mud)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=mud)/)[0].trim(); verbObject.singularPast = regex + "mudded"; verbObject.continuous = regex + "mudding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(muddy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=muddy)/)[0].trim(); verbObject.singularPast = regex + "muddied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(mug)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=mug)/)[0].trim(); verbObject.singularPast = regex + "mugged"; verbObject.continuous = regex + "mugging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(multiply)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=multiply)/)[0].trim(); verbObject.singularPast = regex + "multiplied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(mum)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=mum)/)[0].trim(); verbObject.singularPast = regex + "mummed"; verbObject.continuous = regex + "mumming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(mummify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=mummify)/)[0].trim(); verbObject.singularPast = regex + "mummified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(mutiny)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=mutiny)/)[0].trim(); verbObject.singularPast = regex + "mutinied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(mystify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=mystify)/)[0].trim(); verbObject.singularPast = regex + "mystified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(nab)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=nab)/)[0].trim(); verbObject.singularPast = regex + "nabbed"; verbObject.continuous = regex + "nabbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(nag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=nag)/)[0].trim(); verbObject.singularPast = regex + "nagged"; verbObject.continuous = regex + "nagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(nap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=nap)/)[0].trim(); verbObject.singularPast = regex + "napped"; verbObject.continuous = regex + "napping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(net)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=net)/)[0].trim(); verbObject.singularPast = regex + "netted"; verbObject.continuous = regex + "netting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(nib)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=nib)/)[0].trim(); verbObject.singularPast = regex + "nibbed"; verbObject.continuous = regex + "nibbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(nickel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=nickel)/)[0].trim(); verbObject.singularPast = regex + "nickelled"; verbObject.continuous = regex + "nickelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(nidify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=nidify)/)[0].trim(); verbObject.singularPast = regex + "nidified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(nigrify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=nigrify)/)[0].trim(); verbObject.singularPast = regex + "nigrified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(nip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=nip)/)[0].trim(); verbObject.singularPast = regex + "nipped"; verbObject.continuous = regex + "nipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(nitrify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=nitrify)/)[0].trim(); verbObject.singularPast = regex + "nitrified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(nod)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=nod)/)[0].trim(); verbObject.singularPast = regex + "nodded"; verbObject.continuous = regex + "nodding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(nonplus)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=nonplus)/)[0].trim(); verbObject.singularPast = regex + "nonplussed"; verbObject.singularPresent = regex + "nonplusses"; verbObject.continuous = regex + "nonplussing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(notify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=notify)/)[0].trim(); verbObject.singularPast = regex + "notified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(nullify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=nullify)/)[0].trim(); verbObject.singularPast = regex + "nullified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(nut)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=nut)/)[0].trim(); verbObject.singularPast = regex + "nutted"; verbObject.continuous = regex + "nutting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(objectify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=objectify)/)[0].trim(); verbObject.singularPast = regex + "objectified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(occupy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=occupy)/)[0].trim(); verbObject.singularPast = regex + "occupied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(occur)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=occur)/)[0].trim(); verbObject.singularPast = regex + "occurred"; verbObject.continuous = regex + "occurring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(offset)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=offset)/)[0].trim(); verbObject.continuous = regex + "offsetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(omit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=omit)/)[0].trim(); verbObject.singularPast = regex + "omitted"; verbObject.continuous = regex + "omitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ossify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ossify)/)[0].trim(); verbObject.singularPast = regex + "ossified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outbid)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outbid)/)[0].trim(); verbObject.perfect = regex + "outbidden"; verbObject.continuous = regex + "outbidding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outbreed)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outbreed)/)[0].trim(); verbObject.singularPast = regex + "outbred"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outcrop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outcrop)/)[0].trim(); verbObject.singularPast = regex + "outcropped"; verbObject.continuous = regex + "outcropping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outcry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outcry)/)[0].trim(); verbObject.singularPast = regex + "outcried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outdo)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outdo)/)[0].trim(); verbObject.singularPast = regex + "outdid"; verbObject.perfect = regex + "outdone"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outdraw)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outdraw)/)[0].trim(); verbObject.perfect = regex + "outdrawn"; verbObject.singularPast = regex + "outdrew"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outfight)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outfight)/)[0].trim(); verbObject.singularPast = regex + "outfought"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outfit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outfit)/)[0].trim(); verbObject.singularPast = regex + "outfitted"; verbObject.continuous = regex + "outfitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outgas)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outgas)/)[0].trim(); verbObject.singularPast = regex + "outgassed"; verbObject.singularPresent = regex + "outgasses"; verbObject.continuous = regex + "outgassing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outgeneral)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outgeneral)/)[0].trim(); verbObject.singularPast = regex + "outgeneralled"; verbObject.continuous = regex + "outgeneralling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outgo)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outgo)/)[0].trim(); verbObject.perfect = regex + "outgone"; verbObject.singularPast = regex + "outwent"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outgrow)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outgrow)/)[0].trim(); verbObject.singularPast = regex + "outgrew"; verbObject.perfect = regex + "outgrown"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outlay)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outlay)/)[0].trim(); verbObject.singularPast = regex + "outlaid"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outman)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outman)/)[0].trim(); verbObject.singularPast = regex + "outmanned"; verbObject.continuous = regex + "outmanning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(output)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=output)/)[0].trim(); verbObject.singularPast = regex + "outputted"; verbObject.continuous = regex + "outputting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outride)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outride)/)[0].trim(); verbObject.perfect = regex + "outridden"; verbObject.singularPast = regex + "outrode"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outrun)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outrun)/)[0].trim(); verbObject.singularPast = regex + "outran"; verbObject.continuous = regex + "outrunning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outsell)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outsell)/)[0].trim(); verbObject.singularPast = regex + "outsold"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outshine)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outshine)/)[0].trim(); verbObject.singularPast = regex + "outshone"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outshoot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outshoot)/)[0].trim(); verbObject.singularPast = regex + "outshot"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outspan)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outspan)/)[0].trim(); verbObject.singularPast = regex + "outspanned"; verbObject.continuous = regex + "outspanning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outstand)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outstand)/)[0].trim(); verbObject.singularPast = regex + "outstood"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outstrip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outstrip)/)[0].trim(); verbObject.singularPast = regex + "outstripped"; verbObject.continuous = regex + "outstripping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outthink)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outthink)/)[0].trim(); verbObject.singularPast = regex + "outthought"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outwear)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outwear)/)[0].trim(); verbObject.singularPast = regex + "outwore"; verbObject.perfect = regex + "outworn"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(outwit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=outwit)/)[0].trim(); verbObject.singularPast = regex + "outwitted"; verbObject.continuous = regex + "outwitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overbear)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overbear)/)[0].trim(); verbObject.singularPast = regex + "overbore"; verbObject.perfect = regex + "overborne"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overbid)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overbid)/)[0].trim(); verbObject.singularPast = regex + "overbid"; verbObject.perfect = regex + "overbidden"; verbObject.continuous = regex + "overbidding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overblow)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overblow)/)[0].trim(); verbObject.singularPast = regex + "overblew"; verbObject.perfect = regex + "overblown"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overbuild)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overbuild)/)[0].trim(); verbObject.singularPast = regex + "overbuilt"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overcome)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overcome)/)[0].trim(); verbObject.singularPast = regex + "overcame"; verbObject.perfect = regex + "overcome"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overcrop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overcrop)/)[0].trim(); verbObject.singularPast = regex + "overcropped"; verbObject.continuous = regex + "overcropping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overdo)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overdo)/)[0].trim(); verbObject.singularPast = regex + "overdid"; verbObject.perfect = regex + "overdone"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overdraw)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overdraw)/)[0].trim(); verbObject.perfect = regex + "overdrawn"; verbObject.singularPast = regex + "overdrew"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overdrive)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overdrive)/)[0].trim(); verbObject.perfect = regex + "overdriven"; verbObject.singularPast = regex + "overdrove"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overfly)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overfly)/)[0].trim(); verbObject.singularPast = regex + "overflew"; verbObject.perfect = regex + "overflown"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overgrow)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overgrow)/)[0].trim(); verbObject.singularPast = regex + "overgrew"; verbObject.perfect = regex + "overgrown"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overhang)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overhang)/)[0].trim(); verbObject.singularPast = regex + "overhung"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overhear)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overhear)/)[0].trim(); verbObject.singularPast = regex + "overheard"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overlap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overlap)/)[0].trim(); verbObject.singularPast = regex + "overlapped"; verbObject.continuous = regex + "overlapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overlay)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overlay)/)[0].trim(); verbObject.singularPast = regex + "overlaid"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overlie)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overlie)/)[0].trim(); verbObject.perfect = regex + "overlain"; verbObject.singularPast = regex + "overlay"; verbObject.continuous = regex + "overlying"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overman)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overman)/)[0].trim(); verbObject.singularPast = regex + "overmanned"; verbObject.continuous = regex + "overmanning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overpay)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overpay)/)[0].trim(); verbObject.singularPast = regex + "overpaid"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(override)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=override)/)[0].trim(); verbObject.perfect = regex + "overridden"; verbObject.singularPast = regex + "overrode"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overrun)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overrun)/)[0].trim(); verbObject.singularPast = regex + "overran"; verbObject.continuous = regex + "overrunning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(oversee)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=oversee)/)[0].trim(); verbObject.singularPast = regex + "oversaw"; verbObject.perfect = regex + "overseen"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(oversell)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=oversell)/)[0].trim(); verbObject.singularPast = regex + "oversold"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overset)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overset)/)[0].trim(); verbObject.continuous = regex + "oversetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(oversew)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=oversew)/)[0].trim(); verbObject.perfect = regex + "oversewn"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overshoot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overshoot)/)[0].trim(); verbObject.singularPast = regex + "overshot"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(oversimplify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=oversimplify)/)[0].trim(); verbObject.singularPast = regex + "oversimplified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(oversleep)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=oversleep)/)[0].trim(); verbObject.singularPast = regex + "overslept"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overspend)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overspend)/)[0].trim(); verbObject.singularPast = regex + "overspent"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overstep)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overstep)/)[0].trim(); verbObject.singularPast = regex + "overstepped"; verbObject.continuous = regex + "overstepping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overtake)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overtake)/)[0].trim(); verbObject.perfect = regex + "overtaken"; verbObject.singularPast = regex + "overtook"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overthrow)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overthrow)/)[0].trim(); verbObject.singularPast = regex + "overthrew"; verbObject.perfect = regex + "overthrown"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overtop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overtop)/)[0].trim(); verbObject.singularPast = regex + "overtopped"; verbObject.continuous = regex + "overtopping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overwind)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overwind)/)[0].trim(); verbObject.singularPast = regex + "overwound"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(overwrite)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=overwrite)/)[0].trim(); verbObject.perfect = regex + "overwritten"; verbObject.singularPast = regex + "overwrote"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pacify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pacify)/)[0].trim(); verbObject.singularPast = regex + "pacified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pad)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pad)/)[0].trim(); verbObject.singularPast = regex + "padded"; verbObject.continuous = regex + "padding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pal)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pal)/)[0].trim(); verbObject.singularPast = regex + "palled"; verbObject.continuous = regex + "palling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(palsy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=palsy)/)[0].trim(); verbObject.singularPast = regex + "palsied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pan)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pan)/)[0].trim(); verbObject.singularPast = regex + "panned"; verbObject.continuous = regex + "panning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pandy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pandy)/)[0].trim(); verbObject.singularPast = regex + "pandied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(panel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=panel)/)[0].trim(); verbObject.singularPast = regex + "panelled"; verbObject.continuous = regex + "panelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(panic)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=panic)/)[0].trim(); verbObject.singularPast = regex + "panicked"; verbObject.continuous = regex + "panicking"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(parallel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=parallel)/)[0].trim(); verbObject.singularPast = regex + "parallelled"; verbObject.continuous = regex + "parallelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(parcel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=parcel)/)[0].trim(); verbObject.singularPast = regex + "parcelled"; verbObject.continuous = regex + "parcelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(parody)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=parody)/)[0].trim(); verbObject.singularPast = regex + "parodied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(parry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=parry)/)[0].trim(); verbObject.singularPast = regex + "parried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(partake)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=partake)/)[0].trim(); verbObject.perfect = regex + "partaken"; verbObject.singularPast = regex + "partook"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pat)/)[0].trim(); verbObject.singularPast = regex + "patted"; verbObject.continuous = regex + "patting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(patrol)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=patrol)/)[0].trim(); verbObject.singularPast = regex + "patrolled"; verbObject.continuous = regex + "patrolling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pay)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pay)/)[0].trim(); verbObject.singularPast = regex + "paid"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pedal)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pedal)/)[0].trim(); verbObject.singularPast = regex + "pedalled"; verbObject.continuous = regex + "pedalling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(peg)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=peg)/)[0].trim(); verbObject.singularPast = regex + "pegged"; verbObject.continuous = regex + "pegging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pen)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pen)/)[0].trim(); verbObject.singularPast = regex + "penned"; verbObject.continuous = regex + "penning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pencil)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pencil)/)[0].trim(); verbObject.singularPast = regex + "pencilled"; verbObject.continuous = regex + "pencilling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pep)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pep)/)[0].trim(); verbObject.singularPast = regex + "pepped"; verbObject.continuous = regex + "pepping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(permit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=permit)/)[0].trim(); verbObject.singularPast = regex + "permitted"; verbObject.continuous = regex + "permitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(personify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=personify)/)[0].trim(); verbObject.singularPast = regex + "personified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pet)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pet)/)[0].trim(); verbObject.singularPast = regex + "petted"; verbObject.continuous = regex + "petting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(petrify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=petrify)/)[0].trim(); verbObject.singularPast = regex + "petrified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pettifog)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pettifog)/)[0].trim(); verbObject.singularPast = regex + "pettifogged"; verbObject.continuous = regex + "pettifogging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(phantasy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=phantasy)/)[0].trim(); verbObject.singularPast = regex + "phantasied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(photocopy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=photocopy)/)[0].trim(); verbObject.singularPast = regex + "photocopied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(photomap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=photomap)/)[0].trim(); verbObject.singularPast = regex + "photomapped"; verbObject.continuous = regex + "photomapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(photoset)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=photoset)/)[0].trim(); verbObject.continuous = regex + "photosetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(physic)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=physic)/)[0].trim(); verbObject.singularPast = regex + "physicked"; verbObject.continuous = regex + "physicking"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(picnic)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=picnic)/)[0].trim(); verbObject.singularPast = regex + "picnicked"; verbObject.continuous = regex + "picnicking"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pig)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pig)/)[0].trim(); verbObject.singularPast = regex + "pigged"; verbObject.continuous = regex + "pigging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pillory)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pillory)/)[0].trim(); verbObject.singularPast = regex + "pilloried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pin)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pin)/)[0].trim(); verbObject.singularPast = regex + "pinned"; verbObject.continuous = regex + "pinning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pip)/)[0].trim(); verbObject.singularPast = regex + "pipped"; verbObject.continuous = regex + "pipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pistol)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pistol)/)[0].trim(); verbObject.singularPast = regex + "pistolled"; verbObject.continuous = regex + "pistolling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pit)/)[0].trim(); verbObject.singularPast = regex + "pitted"; verbObject.continuous = regex + "pitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pitapat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pitapat)/)[0].trim(); verbObject.singularPast = regex + "pitapatted"; verbObject.continuous = regex + "pitapatting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pity)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pity)/)[0].trim(); verbObject.singularPast = regex + "pitied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(plan)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=plan)/)[0].trim(); verbObject.singularPast = regex + "planned"; verbObject.continuous = regex + "planning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(plat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=plat)/)[0].trim(); verbObject.singularPast = regex + "platted"; verbObject.continuous = regex + "platting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(plead)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=plead)/)[0].trim(); verbObject.singularPast = regex + "pled"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(plod)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=plod)/)[0].trim(); verbObject.singularPast = regex + "plodded"; verbObject.continuous = regex + "plodding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(plop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=plop)/)[0].trim(); verbObject.singularPast = regex + "plopped"; verbObject.continuous = regex + "plopping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(plot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=plot)/)[0].trim(); verbObject.singularPast = regex + "plotted"; verbObject.continuous = regex + "plotting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(plug)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=plug)/)[0].trim(); verbObject.singularPast = regex + "plugged"; verbObject.continuous = regex + "plugging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ply)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ply)/)[0].trim(); verbObject.singularPast = regex + "plied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pod)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pod)/)[0].trim(); verbObject.singularPast = regex + "podded"; verbObject.continuous = regex + "podding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pommel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pommel)/)[0].trim(); verbObject.singularPast = regex + "pommelled"; verbObject.continuous = regex + "pommelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pop)/)[0].trim(); verbObject.singularPast = regex + "popped"; verbObject.continuous = regex + "popping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pot)/)[0].trim(); verbObject.singularPast = regex + "potted"; verbObject.continuous = regex + "potting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(preachify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=preachify)/)[0].trim(); verbObject.singularPast = regex + "preachified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(precancel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=precancel)/)[0].trim(); verbObject.singularPast = regex + "precancelled"; verbObject.continuous = regex + "precancelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(prefer)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=prefer)/)[0].trim(); verbObject.singularPast = regex + "preferred"; verbObject.continuous = regex + "preferring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(preoccupy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=preoccupy)/)[0].trim(); verbObject.singularPast = regex + "preoccupied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(prepay)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=prepay)/)[0].trim(); verbObject.singularPast = regex + "prepaid"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(presignify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=presignify)/)[0].trim(); verbObject.singularPast = regex + "presignified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pretermit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pretermit)/)[0].trim(); verbObject.singularPast = regex + "pretermitted"; verbObject.continuous = regex + "pretermitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(prettify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=prettify)/)[0].trim(); verbObject.singularPast = regex + "prettified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pretty)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pretty)/)[0].trim(); verbObject.singularPast = regex + "prettied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(prig)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=prig)/)[0].trim(); verbObject.singularPast = regex + "prigged"; verbObject.continuous = regex + "prigging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(prim)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=prim)/)[0].trim(); verbObject.singularPast = regex + "primmed"; verbObject.continuous = regex + "primming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(prod)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=prod)/)[0].trim(); verbObject.singularPast = regex + "prodded"; verbObject.continuous = regex + "prodding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(program)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=program)/)[0].trim(); verbObject.singularPast = regex + "programmed"; verbObject.continuous = regex + "programming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(prop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=prop)/)[0].trim(); verbObject.singularPast = regex + "propped"; verbObject.continuous = regex + "propping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(propel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=propel)/)[0].trim(); verbObject.singularPast = regex + "propelled"; verbObject.continuous = regex + "propelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(prophesy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=prophesy)/)[0].trim(); verbObject.singularPast = regex + "prophesied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pry)/)[0].trim(); verbObject.singularPast = regex + "pried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pub)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pub)/)[0].trim(); verbObject.singularPast = regex + "pubbed"; verbObject.continuous = regex + "pubbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pug)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pug)/)[0].trim(); verbObject.singularPast = regex + "pugged"; verbObject.continuous = regex + "pugging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pummel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pummel)/)[0].trim(); verbObject.singularPast = regex + "pummelled"; verbObject.continuous = regex + "pummelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pun)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pun)/)[0].trim(); verbObject.singularPast = regex + "punned"; verbObject.continuous = regex + "punning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(pup)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=pup)/)[0].trim(); verbObject.singularPast = regex + "pupped"; verbObject.continuous = regex + "pupping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(purify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=purify)/)[0].trim(); verbObject.singularPast = regex + "purified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(put)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=put)/)[0].trim(); verbObject.continuous = regex + "putting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(putrefy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=putrefy)/)[0].trim(); verbObject.singularPast = regex + "putrefied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(putty)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=putty)/)[0].trim(); verbObject.singularPast = regex + "puttied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(qualify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=qualify)/)[0].trim(); verbObject.singularPast = regex + "qualified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(quantify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=quantify)/)[0].trim(); verbObject.singularPast = regex + "quantified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(quarrel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=quarrel)/)[0].trim(); verbObject.singularPast = regex + "quarrelled"; verbObject.continuous = regex + "quarrelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(quarry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=quarry)/)[0].trim(); verbObject.singularPast = regex + "quarried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(quartersaw)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=quartersaw)/)[0].trim(); verbObject.perfect = regex + "quartersawn"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(query)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=query)/)[0].trim(); verbObject.singularPast = regex + "queried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(quickstep)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=quickstep)/)[0].trim(); verbObject.singularPast = regex + "quickstepped"; verbObject.continuous = regex + "quickstepping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(quip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=quip)/)[0].trim(); verbObject.singularPast = regex + "quipped"; verbObject.continuous = regex + "quipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(quit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=quit)/)[0].trim(); verbObject.singularPast = regex + "quitted"; verbObject.continuous = regex + "quitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(quiz)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=quiz)/)[0].trim(); verbObject.singularPast = regex + "quizzed"; verbObject.singularPresent = regex + "quizzes"; verbObject.continuous = regex + "quizzing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rag)/)[0].trim(); verbObject.singularPast = regex + "ragged"; verbObject.continuous = regex + "ragging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rally)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rally)/)[0].trim(); verbObject.singularPast = regex + "rallied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ram)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ram)/)[0].trim(); verbObject.singularPast = regex + "rammed"; verbObject.continuous = regex + "ramming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ramify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ramify)/)[0].trim(); verbObject.singularPast = regex + "ramified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rap)/)[0].trim(); verbObject.singularPast = regex + "rapped"; verbObject.continuous = regex + "rapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rappel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rappel)/)[0].trim(); verbObject.singularPast = regex + "rappelled"; verbObject.continuous = regex + "rappelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rarefy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rarefy)/)[0].trim(); verbObject.singularPast = regex + "rarefied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rat)/)[0].trim(); verbObject.singularPast = regex + "ratted"; verbObject.continuous = regex + "ratting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ratify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ratify)/)[0].trim(); verbObject.singularPast = regex + "ratified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ravel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ravel)/)[0].trim(); verbObject.singularPast = regex + "ravelled"; verbObject.continuous = regex + "ravelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(reave)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=reave)/)[0].trim(); verbObject.singularPast = regex + "reft"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rebel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rebel)/)[0].trim(); verbObject.singularPast = regex + "rebelled"; verbObject.continuous = regex + "rebelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rebuild)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rebuild)/)[0].trim(); verbObject.singularPast = regex + "rebuilt"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rebut)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rebut)/)[0].trim(); verbObject.singularPast = regex + "rebutted"; verbObject.continuous = regex + "rebutting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(recap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=recap)/)[0].trim(); verbObject.singularPast = regex + "recapped"; verbObject.continuous = regex + "recapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(reclassify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=reclassify)/)[0].trim(); verbObject.singularPast = regex + "reclassified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(recommit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=recommit)/)[0].trim(); verbObject.singularPast = regex + "recommitted"; verbObject.continuous = regex + "recommitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(recopy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=recopy)/)[0].trim(); verbObject.singularPast = regex + "recopied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rectify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rectify)/)[0].trim(); verbObject.singularPast = regex + "rectified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(recur)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=recur)/)[0].trim(); verbObject.singularPast = regex + "recurred"; verbObject.continuous = regex + "recurring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(red)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=red)/)[0].trim(); verbObject.singularPast = regex + "redded"; verbObject.continuous = regex + "redding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(redd)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=redd)/)[0].trim(); verbObject.singularPast = regex + "redded"; verbObject.continuous = regex + "redding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(redo)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=redo)/)[0].trim(); verbObject.singularPast = regex + "redid"; verbObject.perfect = regex + "redone"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(refer)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=refer)/)[0].trim(); verbObject.singularPast = regex + "referred"; verbObject.continuous = regex + "referring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(refit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=refit)/)[0].trim(); verbObject.singularPast = regex + "refitted"; verbObject.continuous = regex + "refitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(refuel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=refuel)/)[0].trim(); verbObject.singularPast = regex + "refuelled"; verbObject.continuous = regex + "refuelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(regret)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=regret)/)[0].trim(); verbObject.singularPast = regex + "regretted"; verbObject.continuous = regex + "regretting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rehear)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rehear)/)[0].trim(); verbObject.singularPast = regex + "reheard"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(reify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=reify)/)[0].trim(); verbObject.singularPast = regex + "reified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rely)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rely)/)[0].trim(); verbObject.singularPast = regex + "relied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(remake)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=remake)/)[0].trim(); verbObject.singularPast = regex + "remade"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(remarry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=remarry)/)[0].trim(); verbObject.singularPast = regex + "remarried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(remit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=remit)/)[0].trim(); verbObject.singularPast = regex + "remitted"; verbObject.continuous = regex + "remitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(repay)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=repay)/)[0].trim(); verbObject.singularPast = regex + "repaid"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(repel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=repel)/)[0].trim(); verbObject.singularPast = regex + "repelled"; verbObject.continuous = regex + "repelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(replevy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=replevy)/)[0].trim(); verbObject.singularPast = regex + "replevied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(reply)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=reply)/)[0].trim(); verbObject.singularPast = regex + "replied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(repot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=repot)/)[0].trim(); verbObject.singularPast = regex + "repotted"; verbObject.continuous = regex + "repotting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rerun)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rerun)/)[0].trim(); verbObject.singularPast = regex + "reran"; verbObject.continuous = regex + "rerunning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(reset)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=reset)/)[0].trim(); verbObject.continuous = regex + "resetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(resew)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=resew)/)[0].trim(); verbObject.perfect = regex + "resewn"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(resit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=resit)/)[0].trim(); verbObject.singularPast = regex + "resat"; verbObject.continuous = regex + "resitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ret)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ret)/)[0].trim(); verbObject.singularPast = regex + "retted"; verbObject.continuous = regex + "retting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(retake)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=retake)/)[0].trim(); verbObject.perfect = regex + "retaken"; verbObject.singularPast = regex + "retook"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(retell)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=retell)/)[0].trim(); verbObject.singularPast = regex + "retold"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rethink)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rethink)/)[0].trim(); verbObject.singularPast = regex + "rethought"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(retransmit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=retransmit)/)[0].trim(); verbObject.singularPast = regex + "retransmitted"; verbObject.continuous = regex + "retransmitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(retrofit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=retrofit)/)[0].trim(); verbObject.singularPast = regex + "retrofitted"; verbObject.continuous = regex + "retrofitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(retry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=retry)/)[0].trim(); verbObject.singularPast = regex + "retried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(reunify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=reunify)/)[0].trim(); verbObject.singularPast = regex + "reunified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rev)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rev)/)[0].trim(); verbObject.singularPast = regex + "revved"; verbObject.continuous = regex + "revving"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(revel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=revel)/)[0].trim(); verbObject.singularPast = regex + "revelled"; verbObject.continuous = regex + "revelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(revet)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=revet)/)[0].trim(); verbObject.singularPast = regex + "revetted"; verbObject.continuous = regex + "revetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(revivify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=revivify)/)[0].trim(); verbObject.singularPast = regex + "revivified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rewind)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rewind)/)[0].trim(); verbObject.singularPast = regex + "rewound"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rewrite)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rewrite)/)[0].trim(); verbObject.perfect = regex + "rewritten"; verbObject.singularPast = regex + "rewrote"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rib)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rib)/)[0].trim(); verbObject.singularPast = regex + "ribbed"; verbObject.continuous = regex + "ribbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ricochet)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ricochet)/)[0].trim(); verbObject.singularPast = regex + "ricochetted"; verbObject.continuous = regex + "ricochetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rid)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rid)/)[0].trim(); verbObject.singularPast = regex + "ridded"; verbObject.continuous = regex + "ridding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ride)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ride)/)[0].trim(); verbObject.perfect = regex + "ridden"; verbObject.singularPast = regex + "rode"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rig)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rig)/)[0].trim(); verbObject.singularPast = regex + "rigged"; verbObject.continuous = regex + "rigging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rigidify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rigidify)/)[0].trim(); verbObject.singularPast = regex + "rigidified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rim)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rim)/)[0].trim(); verbObject.singularPast = regex + "rimmed"; verbObject.continuous = regex + "rimming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ring)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ring)/)[0].trim(); verbObject.singularPast = regex + "rang"; verbObject.perfect = regex + "rung"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rip)/)[0].trim(); verbObject.singularPast = regex + "ripped"; verbObject.continuous = regex + "ripping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rise)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rise)/)[0].trim(); verbObject.perfect = regex + "risen"; verbObject.singularPast = regex + "rose"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rival)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rival)/)[0].trim(); verbObject.singularPast = regex + "rivalled"; verbObject.continuous = regex + "rivalling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rive)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rive)/)[0].trim(); verbObject.perfect = regex + "riven"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rob)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rob)/)[0].trim(); verbObject.singularPast = regex + "robbed"; verbObject.continuous = regex + "robbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rot)/)[0].trim(); verbObject.singularPast = regex + "rotted"; verbObject.continuous = regex + "rotting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rowel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rowel)/)[0].trim(); verbObject.singularPast = regex + "rowelled"; verbObject.continuous = regex + "rowelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rub)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rub)/)[0].trim(); verbObject.singularPast = regex + "rubbed"; verbObject.continuous = regex + "rubbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(run)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=run)/)[0].trim(); verbObject.singularPast = regex + "ran"; verbObject.continuous = regex + "running"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(rut)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=rut)/)[0].trim(); verbObject.singularPast = regex + "rutted"; verbObject.continuous = regex + "rutting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(saccharify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=saccharify)/)[0].trim(); verbObject.singularPast = regex + "saccharified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sag)/)[0].trim(); verbObject.singularPast = regex + "sagged"; verbObject.continuous = regex + "sagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(salary)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=salary)/)[0].trim(); verbObject.singularPast = regex + "salaried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(salify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=salify)/)[0].trim(); verbObject.singularPast = regex + "salified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sally)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sally)/)[0].trim(); verbObject.singularPast = regex + "sallied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sanctify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sanctify)/)[0].trim(); verbObject.singularPast = regex + "sanctified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sandbag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sandbag)/)[0].trim(); verbObject.singularPast = regex + "sandbagged"; verbObject.continuous = regex + "sandbagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sap)/)[0].trim(); verbObject.singularPast = regex + "sapped"; verbObject.continuous = regex + "sapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(saponify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=saponify)/)[0].trim(); verbObject.singularPast = regex + "saponified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(satisfy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=satisfy)/)[0].trim(); verbObject.singularPast = regex + "satisfied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(savvy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=savvy)/)[0].trim(); verbObject.singularPast = regex + "savvied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(saw)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=saw)/)[0].trim(); verbObject.perfect = regex + "sawn"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(say)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=say)/)[0].trim(); verbObject.singularPast = regex + "said"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(scag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=scag)/)[0].trim(); verbObject.singularPast = regex + "scagged"; verbObject.continuous = regex + "scagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(scan)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=scan)/)[0].trim(); verbObject.singularPast = regex + "scanned"; verbObject.continuous = regex + "scanning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(scar)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=scar)/)[0].trim(); verbObject.singularPast = regex + "scarred"; verbObject.continuous = regex + "scarring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(scarify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=scarify)/)[0].trim(); verbObject.singularPast = regex + "scarified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(scat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=scat)/)[0].trim(); verbObject.singularPast = regex + "scatted"; verbObject.continuous = regex + "scatting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(scorify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=scorify)/)[0].trim(); verbObject.singularPast = regex + "scorified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(scrag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=scrag)/)[0].trim(); verbObject.singularPast = regex + "scragged"; verbObject.continuous = regex + "scragging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(scram)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=scram)/)[0].trim(); verbObject.singularPast = regex + "scrammed"; verbObject.continuous = regex + "scramming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(scrap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=scrap)/)[0].trim(); verbObject.singularPast = regex + "scrapped"; verbObject.continuous = regex + "scrapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(scrub)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=scrub)/)[0].trim(); verbObject.singularPast = regex + "scrubbed"; verbObject.continuous = regex + "scrubbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(scrum)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=scrum)/)[0].trim(); verbObject.singularPast = regex + "scrummed"; verbObject.continuous = regex + "scrumming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(scry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=scry)/)[0].trim(); verbObject.singularPast = regex + "scried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(scud)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=scud)/)[0].trim(); verbObject.singularPast = regex + "scudded"; verbObject.continuous = regex + "scudding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(scum)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=scum)/)[0].trim(); verbObject.singularPast = regex + "scummed"; verbObject.continuous = regex + "scumming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(scurry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=scurry)/)[0].trim(); verbObject.singularPast = regex + "scurried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(see)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=see)/)[0].trim(); verbObject.singularPast = regex + "saw"; verbObject.perfect = regex + "seen"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(seek)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=seek)/)[0].trim(); verbObject.singularPast = regex + "sought"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sell)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sell)/)[0].trim(); verbObject.singularPast = regex + "sold"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(send)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=send)/)[0].trim(); verbObject.singularPast = regex + "sent"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(set)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=set)/)[0].trim(); verbObject.continuous = regex + "setting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sew)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sew)/)[0].trim(); verbObject.perfect = regex + "sewn"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shag)/)[0].trim(); verbObject.singularPast = regex + "shagged"; verbObject.continuous = regex + "shagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shake)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shake)/)[0].trim(); verbObject.perfect = regex + "shaken"; verbObject.singularPast = regex + "shook"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sham)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sham)/)[0].trim(); verbObject.singularPast = regex + "shammed"; verbObject.continuous = regex + "shamming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sharecrop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sharecrop)/)[0].trim(); verbObject.singularPast = regex + "sharecropped"; verbObject.continuous = regex + "sharecropping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shed)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shed)/)[0].trim(); verbObject.singularPast = regex + "shed"; verbObject.continuous = regex + "shedding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shellac)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shellac)/)[0].trim(); verbObject.singularPast = regex + "shellacked"; verbObject.continuous = regex + "shellacking"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shew)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shew)/)[0].trim(); verbObject.perfect = regex + "shewn"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shikar)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shikar)/)[0].trim(); verbObject.singularPast = regex + "shikarred"; verbObject.continuous = regex + "shikarring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shillyshally)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shillyshally)/)[0].trim(); verbObject.singularPast = regex + "shillyshallied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shim)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shim)/)[0].trim(); verbObject.singularPast = regex + "shimmed"; verbObject.continuous = regex + "shimming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shimmy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shimmy)/)[0].trim(); verbObject.singularPast = regex + "shimmied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shin)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shin)/)[0].trim(); verbObject.singularPast = regex + "shinned"; verbObject.continuous = regex + "shinning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shine)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shine)/)[0].trim(); verbObject.singularPast = regex + "shone"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ship)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ship)/)[0].trim(); verbObject.singularPast = regex + "shipped"; verbObject.continuous = regex + "shipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shit)/)[0].trim(); verbObject.singularPast = regex + "shat"; verbObject.continuous = regex + "shitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shoe)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shoe)/)[0].trim(); verbObject.singularPast = regex + "shod"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shoot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shoot)/)[0].trim(); verbObject.singularPast = regex + "shot"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shop)/)[0].trim(); verbObject.singularPast = regex + "shopped"; verbObject.continuous = regex + "shopping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shot)/)[0].trim(); verbObject.singularPast = regex + "shotted"; verbObject.continuous = regex + "shotting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shotgun)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shotgun)/)[0].trim(); verbObject.singularPast = regex + "shotgunned"; verbObject.continuous = regex + "shotgunning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shovel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shovel)/)[0].trim(); verbObject.singularPast = regex + "shovelled"; verbObject.continuous = regex + "shovelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(show)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=show)/)[0].trim(); verbObject.perfect = regex + "shown"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shred)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shred)/)[0].trim(); verbObject.singularPast = regex + "shredded"; verbObject.continuous = regex + "shredding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shrink)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shrink)/)[0].trim(); verbObject.singularPast = regex + "shrank"; verbObject.perfect = regex + "shrunk"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shrive)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shrive)/)[0].trim(); verbObject.perfect = regex + "shriven"; verbObject.singularPast = regex + "shrove"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shrivel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shrivel)/)[0].trim(); verbObject.singularPast = regex + "shrivelled"; verbObject.continuous = regex + "shrivelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shrug)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shrug)/)[0].trim(); verbObject.singularPast = regex + "shrugged"; verbObject.continuous = regex + "shrugging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shun)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shun)/)[0].trim(); verbObject.singularPast = regex + "shunned"; verbObject.continuous = regex + "shunning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shut)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shut)/)[0].trim(); verbObject.continuous = regex + "shutting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(shy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=shy)/)[0].trim(); verbObject.singularPast = regex + "shied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sic)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sic)/)[0].trim(); verbObject.singularPast = regex + "sicked"; verbObject.continuous = regex + "sicking"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sideslip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sideslip)/)[0].trim(); verbObject.singularPast = regex + "sideslipped"; verbObject.continuous = regex + "sideslipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sidestep)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sidestep)/)[0].trim(); verbObject.singularPast = regex + "sidestepped"; verbObject.continuous = regex + "sidestepping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sightsee)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sightsee)/)[0].trim(); verbObject.singularPast = regex + "sightsaw"; verbObject.perfect = regex + "sightseen"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(signal)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=signal)/)[0].trim(); verbObject.singularPast = regex + "signalled"; verbObject.continuous = regex + "signalling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(signify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=signify)/)[0].trim(); verbObject.singularPast = regex + "signified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(silicify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=silicify)/)[0].trim(); verbObject.singularPast = regex + "silicified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(simplify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=simplify)/)[0].trim(); verbObject.singularPast = regex + "simplified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sin)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sin)/)[0].trim(); verbObject.singularPast = regex + "sinned"; verbObject.continuous = regex + "sinning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sing)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sing)/)[0].trim(); verbObject.singularPast = regex + "sang"; verbObject.perfect = regex + "sung"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(singe)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=singe)/)[0].trim(); verbObject.continuous = regex + "singing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sink)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sink)/)[0].trim(); verbObject.singularPast = regex + "sank"; verbObject.perfect = regex + "sunk"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sip)/)[0].trim(); verbObject.singularPast = regex + "sipped"; verbObject.continuous = regex + "sipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sit)/)[0].trim(); verbObject.singularPast = regex + "sat"; verbObject.continuous = regex + "sitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(skelly)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=skelly)/)[0].trim(); verbObject.singularPast = regex + "skellied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sken)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sken)/)[0].trim(); verbObject.singularPast = regex + "skenned"; verbObject.continuous = regex + "skenning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sket)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sket)/)[0].trim(); verbObject.singularPast = regex + "sketted"; verbObject.continuous = regex + "sketting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(skid)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=skid)/)[0].trim(); verbObject.singularPast = regex + "skidded"; verbObject.continuous = regex + "skidding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(skim)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=skim)/)[0].trim(); verbObject.singularPast = regex + "skimmed"; verbObject.continuous = regex + "skimming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(skin)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=skin)/)[0].trim(); verbObject.singularPast = regex + "skinned"; verbObject.continuous = regex + "skinning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(skip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=skip)/)[0].trim(); verbObject.singularPast = regex + "skipped"; verbObject.continuous = regex + "skipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(skivvy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=skivvy)/)[0].trim(); verbObject.singularPast = regex + "skivvied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(slab)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=slab)/)[0].trim(); verbObject.singularPast = regex + "slabbed"; verbObject.continuous = regex + "slabbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(slag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=slag)/)[0].trim(); verbObject.singularPast = regex + "slagged"; verbObject.continuous = regex + "slagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(slam)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=slam)/)[0].trim(); verbObject.singularPast = regex + "slammed"; verbObject.continuous = regex + "slamming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(slap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=slap)/)[0].trim(); verbObject.singularPast = regex + "slapped"; verbObject.continuous = regex + "slapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(slat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=slat)/)[0].trim(); verbObject.singularPast = regex + "slatted"; verbObject.continuous = regex + "slatting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(slay)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=slay)/)[0].trim(); verbObject.perfect = regex + "slain"; verbObject.singularPast = regex + "slew"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sled)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sled)/)[0].trim(); verbObject.continuous = regex + "sledding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sleep)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sleep)/)[0].trim(); verbObject.singularPast = regex + "slept"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(slide)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=slide)/)[0].trim(); verbObject.singularPast = regex + "slid"; verbObject.perfect = regex + "slidden"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sling)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sling)/)[0].trim(); verbObject.singularPast = regex + "slung"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(slink)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=slink)/)[0].trim(); verbObject.singularPast = regex + "slunk"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(slip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=slip)/)[0].trim(); verbObject.singularPast = regex + "slipped"; verbObject.continuous = regex + "slipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(slit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=slit)/)[0].trim(); verbObject.continuous = regex + "slitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(slog)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=slog)/)[0].trim(); verbObject.singularPast = regex + "slogged"; verbObject.continuous = regex + "slogging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(slop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=slop)/)[0].trim(); verbObject.singularPast = regex + "slopped"; verbObject.continuous = regex + "slopping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(slot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=slot)/)[0].trim(); verbObject.singularPast = regex + "slotted"; verbObject.continuous = regex + "slotting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(slug)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=slug)/)[0].trim(); verbObject.singularPast = regex + "slugged"; verbObject.continuous = regex + "slugging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(slum)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=slum)/)[0].trim(); verbObject.singularPast = regex + "slummed"; verbObject.continuous = regex + "slumming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(slur)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=slur)/)[0].trim(); verbObject.singularPast = regex + "slurred"; verbObject.continuous = regex + "slurring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(smite)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=smite)/)[0].trim(); verbObject.perfect = regex + "smitten"; verbObject.singularPast = regex + "smote"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(smut)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=smut)/)[0].trim(); verbObject.singularPast = regex + "smutted"; verbObject.continuous = regex + "smutting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(snag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=snag)/)[0].trim(); verbObject.singularPast = regex + "snagged"; verbObject.continuous = regex + "snagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(snap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=snap)/)[0].trim(); verbObject.singularPast = regex + "snapped"; verbObject.continuous = regex + "snapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sned)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sned)/)[0].trim(); verbObject.singularPast = regex + "snedded"; verbObject.continuous = regex + "snedding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(snip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=snip)/)[0].trim(); verbObject.singularPast = regex + "snipped"; verbObject.continuous = regex + "snipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(snivel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=snivel)/)[0].trim(); verbObject.singularPast = regex + "snivelled"; verbObject.continuous = regex + "snivelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(snog)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=snog)/)[0].trim(); verbObject.singularPast = regex + "snogged"; verbObject.continuous = regex + "snogging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(snub)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=snub)/)[0].trim(); verbObject.singularPast = regex + "snubbed"; verbObject.continuous = regex + "snubbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(snug)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=snug)/)[0].trim(); verbObject.singularPast = regex + "snugged"; verbObject.continuous = regex + "snugging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sob)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sob)/)[0].trim(); verbObject.singularPast = regex + "sobbed"; verbObject.continuous = regex + "sobbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sod)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sod)/)[0].trim(); verbObject.singularPast = regex + "sodded"; verbObject.continuous = regex + "sodding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(solemnify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=solemnify)/)[0].trim(); verbObject.singularPast = regex + "solemnified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(solidify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=solidify)/)[0].trim(); verbObject.singularPast = regex + "solidified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(soothsay)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=soothsay)/)[0].trim(); verbObject.singularPast = regex + "soothsaid"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sop)/)[0].trim(); verbObject.singularPast = regex + "sopped"; verbObject.continuous = regex + "sopping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sow)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sow)/)[0].trim(); verbObject.perfect = regex + "sown"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(spag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=spag)/)[0].trim(); verbObject.singularPast = regex + "spagged"; verbObject.continuous = regex + "spagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(span)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=span)/)[0].trim(); verbObject.singularPast = regex + "spanned"; verbObject.continuous = regex + "spanning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(spancel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=spancel)/)[0].trim(); verbObject.singularPast = regex + "spancelled"; verbObject.continuous = regex + "spancelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(spar)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=spar)/)[0].trim(); verbObject.singularPast = regex + "sparred"; verbObject.continuous = regex + "sparring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(spat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=spat)/)[0].trim(); verbObject.singularPast = regex + "spatted"; verbObject.continuous = regex + "spatting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(speak)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=speak)/)[0].trim(); verbObject.singularPast = regex + "spoke"; verbObject.perfect = regex + "spoken"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(specify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=specify)/)[0].trim(); verbObject.singularPast = regex + "specified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(speechify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=speechify)/)[0].trim(); verbObject.singularPast = regex + "speechified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(speed)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=speed)/)[0].trim(); verbObject.singularPast = regex + "sped"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(spellbind)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=spellbind)/)[0].trim(); verbObject.singularPast = regex + "spellbound"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(spend)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=spend)/)[0].trim(); verbObject.singularPast = regex + "spent"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(spin)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=spin)/)[0].trim(); verbObject.continuous = regex + "spinning"; verbObject.singularPast = regex + "spun"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(spiral)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=spiral)/)[0].trim(); verbObject.singularPast = regex + "spiralled"; verbObject.continuous = regex + "spiralling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(spit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=spit)/)[0].trim(); verbObject.singularPast = regex + "spat"; verbObject.continuous = regex + "spitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(split)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=split)/)[0].trim(); verbObject.continuous = regex + "splitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(spot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=spot)/)[0].trim(); verbObject.singularPast = regex + "spotted"; verbObject.continuous = regex + "spotting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(spotlight)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=spotlight)/)[0].trim(); verbObject.singularPast = regex + "spotlit"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sprig)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sprig)/)[0].trim(); verbObject.singularPast = regex + "sprigged"; verbObject.continuous = regex + "sprigging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(spring)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=spring)/)[0].trim(); verbObject.singularPast = regex + "sprang"; verbObject.perfect = regex + "sprung"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(spud)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=spud)/)[0].trim(); verbObject.singularPast = regex + "spudded"; verbObject.continuous = regex + "spudding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(spur)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=spur)/)[0].trim(); verbObject.singularPast = regex + "spurred"; verbObject.continuous = regex + "spurring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(spy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=spy)/)[0].trim(); verbObject.singularPast = regex + "spied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(squat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=squat)/)[0].trim(); verbObject.singularPast = regex + "squatted"; verbObject.continuous = regex + "squatting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(squib)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=squib)/)[0].trim(); verbObject.singularPast = regex + "squibbed"; verbObject.continuous = regex + "squibbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(squid)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=squid)/)[0].trim(); verbObject.singularPast = regex + "squidded"; verbObject.continuous = regex + "squidding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(stab)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=stab)/)[0].trim(); verbObject.singularPast = regex + "stabbed"; verbObject.continuous = regex + "stabbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(stand)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=stand)/)[0].trim(); verbObject.singularPast = regex + "stood"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(star)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=star)/)[0].trim(); verbObject.singularPast = regex + "starred"; verbObject.continuous = regex + "starring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(steady)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=steady)/)[0].trim(); verbObject.singularPast = regex + "steadied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(steal)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=steal)/)[0].trim(); verbObject.singularPast = regex + "stole"; verbObject.perfect = regex + "stolen"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(stellify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=stellify)/)[0].trim(); verbObject.singularPast = regex + "stellified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(stem)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=stem)/)[0].trim(); verbObject.singularPast = regex + "stemmed"; verbObject.continuous = regex + "stemming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(stencil)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=stencil)/)[0].trim(); verbObject.singularPast = regex + "stencilled"; verbObject.continuous = regex + "stencilling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(step)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=step)/)[0].trim(); verbObject.singularPast = regex + "stepped"; verbObject.continuous = regex + "stepping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(stet)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=stet)/)[0].trim(); verbObject.singularPast = regex + "stetted"; verbObject.continuous = regex + "stetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(stick)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=stick)/)[0].trim(); verbObject.singularPast = regex + "stuck"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(stiletto)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=stiletto)/)[0].trim(); verbObject.continuous = regex + "stilettoeing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sting)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sting)/)[0].trim(); verbObject.singularPast = regex + "stung"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(stink)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=stink)/)[0].trim(); verbObject.singularPast = regex + "stank"; verbObject.perfect = regex + "stunk"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(stir)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=stir)/)[0].trim(); verbObject.singularPast = regex + "stirred"; verbObject.continuous = regex + "stirring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(stop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=stop)/)[0].trim(); verbObject.singularPast = regex + "stopped"; verbObject.continuous = regex + "stopping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(story)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=story)/)[0].trim(); verbObject.singularPast = regex + "storied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(stot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=stot)/)[0].trim(); verbObject.singularPast = regex + "stotted"; verbObject.continuous = regex + "stotting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(strap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=strap)/)[0].trim(); verbObject.singularPast = regex + "strapped"; verbObject.continuous = regex + "strapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(stratify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=stratify)/)[0].trim(); verbObject.singularPast = regex + "stratified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(strew)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=strew)/)[0].trim(); verbObject.perfect = regex + "strewn"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(stride)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=stride)/)[0].trim(); verbObject.perfect = regex + "stridden"; verbObject.singularPast = regex + "strode"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(strike)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=strike)/)[0].trim(); verbObject.singularPast = regex + "struck"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(string)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=string)/)[0].trim(); verbObject.singularPast = regex + "strung"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(strip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=strip)/)[0].trim(); verbObject.singularPast = regex + "stripped"; verbObject.continuous = regex + "stripping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(strive)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=strive)/)[0].trim(); verbObject.perfect = regex + "striven"; verbObject.singularPast = regex + "strove"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(strop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=strop)/)[0].trim(); verbObject.singularPast = regex + "stropped"; verbObject.continuous = regex + "stropping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(strow)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=strow)/)[0].trim(); verbObject.perfect = regex + "strown"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(strum)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=strum)/)[0].trim(); verbObject.singularPast = regex + "strummed"; verbObject.continuous = regex + "strumming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(strut)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=strut)/)[0].trim(); verbObject.singularPast = regex + "strutted"; verbObject.continuous = regex + "strutting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(stub)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=stub)/)[0].trim(); verbObject.singularPast = regex + "stubbed"; verbObject.continuous = regex + "stubbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(stud)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=stud)/)[0].trim(); verbObject.singularPast = regex + "studded"; verbObject.continuous = regex + "studding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(study)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=study)/)[0].trim(); verbObject.singularPast = regex + "studied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(stultify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=stultify)/)[0].trim(); verbObject.singularPast = regex + "stultified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(stum)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=stum)/)[0].trim(); verbObject.singularPast = regex + "stummed"; verbObject.continuous = regex + "stumming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(stun)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=stun)/)[0].trim(); verbObject.singularPast = regex + "stunned"; verbObject.continuous = regex + "stunning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(stupefy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=stupefy)/)[0].trim(); verbObject.singularPast = regex + "stupefied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sty)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sty)/)[0].trim(); verbObject.singularPast = regex + "stied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(stymie)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=stymie)/)[0].trim(); verbObject.continuous = regex + "stymying"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sub)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sub)/)[0].trim(); verbObject.singularPast = regex + "subbed"; verbObject.continuous = regex + "subbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(subjectify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=subjectify)/)[0].trim(); verbObject.singularPast = regex + "subjectified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sublet)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sublet)/)[0].trim(); verbObject.continuous = regex + "subletting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(submit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=submit)/)[0].trim(); verbObject.singularPast = regex + "submitted"; verbObject.continuous = regex + "submitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(subtotal)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=subtotal)/)[0].trim(); verbObject.singularPast = regex + "subtotalled"; verbObject.continuous = regex + "subtotalling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sully)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sully)/)[0].trim(); verbObject.singularPast = regex + "sullied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sulphuret)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sulphuret)/)[0].trim(); verbObject.singularPast = regex + "sulphuretted"; verbObject.continuous = regex + "sulphuretting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sum)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sum)/)[0].trim(); verbObject.singularPast = regex + "summed"; verbObject.continuous = regex + "summing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sun)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sun)/)[0].trim(); verbObject.singularPast = regex + "sunned"; verbObject.continuous = regex + "sunning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sup)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sup)/)[0].trim(); verbObject.singularPast = regex + "supped"; verbObject.continuous = regex + "supping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(supply)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=supply)/)[0].trim(); verbObject.singularPast = regex + "supplied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(swab)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=swab)/)[0].trim(); verbObject.singularPast = regex + "swabbed"; verbObject.continuous = regex + "swabbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(swag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=swag)/)[0].trim(); verbObject.singularPast = regex + "swagged"; verbObject.continuous = regex + "swagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(swap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=swap)/)[0].trim(); verbObject.singularPast = regex + "swapped"; verbObject.continuous = regex + "swapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(swat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=swat)/)[0].trim(); verbObject.singularPast = regex + "swatted"; verbObject.continuous = regex + "swatting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(swear)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=swear)/)[0].trim(); verbObject.singularPast = regex + "swore"; verbObject.perfect = regex + "sworn"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(sweep)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=sweep)/)[0].trim(); verbObject.singularPast = regex + "swept"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(swell)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=swell)/)[0].trim(); verbObject.perfect = regex + "swollen"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(swig)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=swig)/)[0].trim(); verbObject.singularPast = regex + "swigged"; verbObject.continuous = regex + "swigging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(swim)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=swim)/)[0].trim(); verbObject.singularPast = regex + "swam"; verbObject.continuous = regex + "swimming"; verbObject.perfect = regex + "swum"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(swing)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=swing)/)[0].trim(); verbObject.singularPast = regex + "swung"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(swivel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=swivel)/)[0].trim(); verbObject.singularPast = regex + "swivelled"; verbObject.continuous = regex + "swivelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(swot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=swot)/)[0].trim(); verbObject.singularPast = regex + "swotted"; verbObject.continuous = regex + "swotting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(syllabify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=syllabify)/)[0].trim(); verbObject.singularPast = regex + "syllabified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(symbol)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=symbol)/)[0].trim(); verbObject.singularPast = regex + "symbolled"; verbObject.continuous = regex + "symbolling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tab)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tab)/)[0].trim(); verbObject.singularPast = regex + "tabbed"; verbObject.continuous = regex + "tabbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tag)/)[0].trim(); verbObject.singularPast = regex + "tagged"; verbObject.continuous = regex + "tagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(take)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=take)/)[0].trim(); verbObject.perfect = regex + "taken"; verbObject.singularPast = regex + "took"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tally)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tally)/)[0].trim(); verbObject.singularPast = regex + "tallied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tammy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tammy)/)[0].trim(); verbObject.singularPast = regex + "tammied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tan)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tan)/)[0].trim(); verbObject.singularPast = regex + "tanned"; verbObject.continuous = regex + "tanning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tap)/)[0].trim(); verbObject.singularPast = regex + "tapped"; verbObject.continuous = regex + "tapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tar)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tar)/)[0].trim(); verbObject.singularPast = regex + "tarred"; verbObject.continuous = regex + "tarring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tarry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tarry)/)[0].trim(); verbObject.singularPast = regex + "tarried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tassel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tassel)/)[0].trim(); verbObject.singularPast = regex + "tasselled"; verbObject.continuous = regex + "tasselling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tat)/)[0].trim(); verbObject.singularPast = regex + "tatted"; verbObject.continuous = regex + "tatting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(taxi)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=taxi)/)[0].trim(); verbObject.continuous = regex + "taxying"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(teach)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=teach)/)[0].trim(); verbObject.singularPast = regex + "taught"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tear)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tear)/)[0].trim(); verbObject.singularPast = regex + "tore"; verbObject.perfect = regex + "torn"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(teasel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=teasel)/)[0].trim(); verbObject.singularPast = regex + "teaselled"; verbObject.continuous = regex + "teaselling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(ted)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=ted)/)[0].trim(); verbObject.singularPast = regex + "tedded"; verbObject.continuous = regex + "tedding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tell)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tell)/)[0].trim(); verbObject.singularPast = regex + "told"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tepefy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tepefy)/)[0].trim(); verbObject.singularPast = regex + "tepefied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(terrify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=terrify)/)[0].trim(); verbObject.singularPast = regex + "terrified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(testify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=testify)/)[0].trim(); verbObject.singularPast = regex + "testified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(thin)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=thin)/)[0].trim(); verbObject.singularPast = regex + "thinned"; verbObject.continuous = regex + "thinning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(think)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=think)/)[0].trim(); verbObject.singularPast = regex + "thought"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(throb)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=throb)/)[0].trim(); verbObject.singularPast = regex + "throbbed"; verbObject.continuous = regex + "throbbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(throw)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=throw)/)[0].trim(); verbObject.singularPast = regex + "threw"; verbObject.perfect = regex + "thrown"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(thrum)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=thrum)/)[0].trim(); verbObject.singularPast = regex + "thrummed"; verbObject.continuous = regex + "thrumming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(thud)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=thud)/)[0].trim(); verbObject.singularPast = regex + "thudded"; verbObject.continuous = regex + "thudding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tidy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tidy)/)[0].trim(); verbObject.singularPast = regex + "tidied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tie)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tie)/)[0].trim(); verbObject.continuous = regex + "tying"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tin)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tin)/)[0].trim(); verbObject.singularPast = regex + "tinned"; verbObject.continuous = regex + "tinning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tinsel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tinsel)/)[0].trim(); verbObject.singularPast = regex + "tinselled"; verbObject.continuous = regex + "tinselling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tip)/)[0].trim(); verbObject.singularPast = regex + "tipped"; verbObject.continuous = regex + "tipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tittup)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tittup)/)[0].trim(); verbObject.singularPast = regex + "tittupped"; verbObject.continuous = regex + "tittupping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(toady)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=toady)/)[0].trim(); verbObject.singularPast = regex + "toadied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tog)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tog)/)[0].trim(); verbObject.singularPast = regex + "togged"; verbObject.continuous = regex + "togging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(top)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=top)/)[0].trim(); verbObject.singularPast = regex + "topped"; verbObject.continuous = regex + "topping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(torrefy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=torrefy)/)[0].trim(); verbObject.singularPast = regex + "torrefied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tot)/)[0].trim(); verbObject.singularPast = regex + "totted"; verbObject.continuous = regex + "totting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(total)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=total)/)[0].trim(); verbObject.singularPast = regex + "totalled"; verbObject.continuous = regex + "totalling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(towel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=towel)/)[0].trim(); verbObject.singularPast = regex + "towelled"; verbObject.continuous = regex + "towelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(traffic)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=traffic)/)[0].trim(); verbObject.singularPast = regex + "trafficked"; verbObject.continuous = regex + "trafficking"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tram)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tram)/)[0].trim(); verbObject.singularPast = regex + "trammed"; verbObject.continuous = regex + "tramming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(trammel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=trammel)/)[0].trim(); verbObject.singularPast = regex + "tramelled"; verbObject.continuous = regex + "tramelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(transfer)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=transfer)/)[0].trim(); verbObject.singularPast = regex + "transferred"; verbObject.continuous = regex + "transferring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tranship)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tranship)/)[0].trim(); verbObject.singularPast = regex + "transhipped"; verbObject.continuous = regex + "transhipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(transmit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=transmit)/)[0].trim(); verbObject.singularPast = regex + "transmitted"; verbObject.continuous = regex + "transmitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(transmogrify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=transmogrify)/)[0].trim(); verbObject.singularPast = regex + "transmogrified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(transship)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=transship)/)[0].trim(); verbObject.singularPast = regex + "transshipped"; verbObject.continuous = regex + "transshipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(trap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=trap)/)[0].trim(); verbObject.singularPast = regex + "trapped"; verbObject.continuous = regex + "trapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(trapan)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=trapan)/)[0].trim(); verbObject.singularPast = regex + "trapanned"; verbObject.continuous = regex + "trapanning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(travel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=travel)/)[0].trim(); verbObject.singularPast = regex + "travelled"; verbObject.continuous = regex + "travelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(travesty)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=travesty)/)[0].trim(); verbObject.singularPast = regex + "travestied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tread)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tread)/)[0].trim(); verbObject.singularPast = regex + "trod"; verbObject.perfect = regex + "trodden"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(trek)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=trek)/)[0].trim(); verbObject.singularPast = regex + "trekked"; verbObject.continuous = regex + "trekking"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(trepan)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=trepan)/)[0].trim(); verbObject.singularPast = regex + "trepanned"; verbObject.continuous = regex + "trepanning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(trig)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=trig)/)[0].trim(); verbObject.singularPast = regex + "trigged"; verbObject.continuous = regex + "trigging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(trim)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=trim)/)[0].trim(); verbObject.singularPast = regex + "trimmed"; verbObject.continuous = regex + "trimming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(trip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=trip)/)[0].trim(); verbObject.singularPast = regex + "tripped"; verbObject.continuous = regex + "tripping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(trog)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=trog)/)[0].trim(); verbObject.singularPast = regex + "trogged"; verbObject.continuous = regex + "trogging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(trot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=trot)/)[0].trim(); verbObject.singularPast = regex + "trotted"; verbObject.continuous = regex + "trotting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(trowel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=trowel)/)[0].trim(); verbObject.singularPast = regex + "trowelled"; verbObject.continuous = regex + "trowelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(try)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=try)/)[0].trim(); verbObject.singularPast = regex + "tried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tug)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tug)/)[0].trim(); verbObject.singularPast = regex + "tugged"; verbObject.continuous = regex + "tugging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tumefy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tumefy)/)[0].trim(); verbObject.singularPast = regex + "tumefied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tun)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tun)/)[0].trim(); verbObject.singularPast = regex + "tunned"; verbObject.continuous = regex + "tunning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tunnel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tunnel)/)[0].trim(); verbObject.singularPast = regex + "tunnelled"; verbObject.continuous = regex + "tunnelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(tup)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=tup)/)[0].trim(); verbObject.singularPast = regex + "tupped"; verbObject.continuous = regex + "tupping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(twig)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=twig)/)[0].trim(); verbObject.singularPast = regex + "twigged"; verbObject.continuous = regex + "twigging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(twin)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=twin)/)[0].trim(); verbObject.singularPast = regex + "twinned"; verbObject.continuous = regex + "twinning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(twit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=twit)/)[0].trim(); verbObject.singularPast = regex + "twitted"; verbObject.continuous = regex + "twitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(typeset)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=typeset)/)[0].trim(); verbObject.continuous = regex + "typesetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(typewrite)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=typewrite)/)[0].trim(); verbObject.perfect = regex + "typewritten"; verbObject.singularPast = regex + "typewrote"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(typify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=typify)/)[0].trim(); verbObject.singularPast = regex + "typified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(uglify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=uglify)/)[0].trim(); verbObject.singularPast = regex + "uglified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unbar)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unbar)/)[0].trim(); verbObject.singularPast = regex + "unbarred"; verbObject.continuous = regex + "unbarring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unbend)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unbend)/)[0].trim(); verbObject.singularPast = regex + "unbent"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unbind)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unbind)/)[0].trim(); verbObject.singularPast = regex + "unbound"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(uncap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=uncap)/)[0].trim(); verbObject.singularPast = regex + "uncapped"; verbObject.continuous = regex + "uncapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unclog)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unclog)/)[0].trim(); verbObject.singularPast = regex + "unclogged"; verbObject.continuous = regex + "unclogging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unclothe)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unclothe)/)[0].trim(); verbObject.singularPast = regex + "unclad"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(underbid)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=underbid)/)[0].trim(); verbObject.continuous = regex + "underbidding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(underbuy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=underbuy)/)[0].trim(); verbObject.singularPast = regex + "underbought"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(undercut)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=undercut)/)[0].trim(); verbObject.continuous = regex + "undercutting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(underfeed)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=underfeed)/)[0].trim(); verbObject.singularPast = regex + "underfed"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(undergird)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=undergird)/)[0].trim(); verbObject.singularPast = regex + "undergirt"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(undergo)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=undergo)/)[0].trim(); verbObject.perfect = regex + "undergone"; verbObject.singularPast = regex + "underwent"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(underlay)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=underlay)/)[0].trim(); verbObject.singularPast = regex + "underlaid"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(underlet)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=underlet)/)[0].trim(); verbObject.continuous = regex + "underletting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(underlie)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=underlie)/)[0].trim(); verbObject.perfect = regex + "underlain"; verbObject.singularPast = regex + "underlay"; verbObject.continuous = regex + "underlying"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(underpay)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=underpay)/)[0].trim(); verbObject.singularPast = regex + "underpaid"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(underpin)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=underpin)/)[0].trim(); verbObject.singularPast = regex + "underpinned"; verbObject.continuous = regex + "underpinning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(underprop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=underprop)/)[0].trim(); verbObject.singularPast = regex + "underpropped"; verbObject.continuous = regex + "underpropping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(undersell)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=undersell)/)[0].trim(); verbObject.singularPast = regex + "undersold"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(underset)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=underset)/)[0].trim(); verbObject.continuous = regex + "undersetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(undershoot)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=undershoot)/)[0].trim(); verbObject.singularPast = regex + "undershot"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(understand)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=understand)/)[0].trim(); verbObject.singularPast = regex + "understood"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(understudy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=understudy)/)[0].trim(); verbObject.singularPast = regex + "understudied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(undertake)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=undertake)/)[0].trim(); verbObject.perfect = regex + "undertaken"; verbObject.singularPast = regex + "undertook"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(underwrite)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=underwrite)/)[0].trim(); verbObject.perfect = regex + "underwritten"; verbObject.singularPast = regex + "underwrote"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(undo)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=undo)/)[0].trim(); verbObject.singularPast = regex + "undid"; verbObject.perfect = regex + "undone"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unfit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unfit)/)[0].trim(); verbObject.singularPast = regex + "unfitted"; verbObject.continuous = regex + "unfitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unfreeze)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unfreeze)/)[0].trim(); verbObject.singularPast = regex + "unfroze"; verbObject.perfect = regex + "unfrozen"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unify)/)[0].trim(); verbObject.singularPast = regex + "unified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unkennel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unkennel)/)[0].trim(); verbObject.singularPast = regex + "unkennelled"; verbObject.continuous = regex + "unkennelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unknit)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unknit)/)[0].trim(); verbObject.singularPast = regex + "unknitted"; verbObject.continuous = regex + "unknitting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unlay)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unlay)/)[0].trim(); verbObject.singularPast = regex + "unlaid"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unmake)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unmake)/)[0].trim(); verbObject.singularPast = regex + "unmade"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unman)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unman)/)[0].trim(); verbObject.singularPast = regex + "unmanned"; verbObject.continuous = regex + "unmanning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unpeg)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unpeg)/)[0].trim(); verbObject.singularPast = regex + "unpegged"; verbObject.continuous = regex + "unpegging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unpin)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unpin)/)[0].trim(); verbObject.singularPast = regex + "unpinned"; verbObject.continuous = regex + "unpinning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unplug)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unplug)/)[0].trim(); verbObject.singularPast = regex + "unplugged"; verbObject.continuous = regex + "unplugging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unravel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unravel)/)[0].trim(); verbObject.singularPast = regex + "unravelled"; verbObject.continuous = regex + "unravelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unreeve)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unreeve)/)[0].trim(); verbObject.singularPast = regex + "unrove"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unrig)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unrig)/)[0].trim(); verbObject.singularPast = regex + "unrigged"; verbObject.continuous = regex + "unrigging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unrip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unrip)/)[0].trim(); verbObject.singularPast = regex + "unripped"; verbObject.continuous = regex + "unripping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unsay)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unsay)/)[0].trim(); verbObject.singularPast = regex + "unsaid"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unship)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unship)/)[0].trim(); verbObject.singularPast = regex + "unshipped"; verbObject.continuous = regex + "unshipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unsling)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unsling)/)[0].trim(); verbObject.singularPast = regex + "unslung"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unsnap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unsnap)/)[0].trim(); verbObject.singularPast = regex + "unsnapped"; verbObject.continuous = regex + "unsnapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unspeak)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unspeak)/)[0].trim(); verbObject.singularPast = regex + "unspoke"; verbObject.perfect = regex + "unspoken"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unsteady)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unsteady)/)[0].trim(); verbObject.singularPast = regex + "unsteadied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unstep)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unstep)/)[0].trim(); verbObject.singularPast = regex + "unstepped"; verbObject.continuous = regex + "unstepping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unstick)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unstick)/)[0].trim(); verbObject.singularPast = regex + "unstuck"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unstop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unstop)/)[0].trim(); verbObject.singularPast = regex + "unstopped"; verbObject.continuous = regex + "unstopping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unstring)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unstring)/)[0].trim(); verbObject.singularPast = regex + "unstrung"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unswear)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unswear)/)[0].trim(); verbObject.singularPast = regex + "unswore"; verbObject.perfect = regex + "unsworn"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unteach)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unteach)/)[0].trim(); verbObject.singularPast = regex + "untaught"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unthink)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unthink)/)[0].trim(); verbObject.singularPast = regex + "unthought"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(untidy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=untidy)/)[0].trim(); verbObject.singularPast = regex + "untidied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(untie)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=untie)/)[0].trim(); verbObject.continuous = regex + "untying"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(untread)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=untread)/)[0].trim(); verbObject.singularPast = regex + "untrod"; verbObject.perfect = regex + "untrodden"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unwind)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unwind)/)[0].trim(); verbObject.singularPast = regex + "unwound"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unwrap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unwrap)/)[0].trim(); verbObject.singularPast = regex + "unwrapped"; verbObject.continuous = regex + "unwrapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(unzip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=unzip)/)[0].trim(); verbObject.singularPast = regex + "unzipped"; verbObject.continuous = regex + "unzipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(up)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=up)/)[0].trim(); verbObject.singularPast = regex + "upped"; verbObject.continuous = regex + "upping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(upbuild)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=upbuild)/)[0].trim(); verbObject.singularPast = regex + "upbuilt"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(uphold)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=uphold)/)[0].trim(); verbObject.singularPast = regex + "upheld"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(uppercut)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=uppercut)/)[0].trim(); verbObject.continuous = regex + "uppercutting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(uprise)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=uprise)/)[0].trim(); verbObject.perfect = regex + "uprisen"; verbObject.singularPast = regex + "uprose"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(upset)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=upset)/)[0].trim(); verbObject.continuous = regex + "upsetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(upspring)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=upspring)/)[0].trim(); verbObject.singularPast = regex + "upsprang"; verbObject.perfect = regex + "upsprung"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(upsweep)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=upsweep)/)[0].trim(); verbObject.singularPast = regex + "upswept"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(upswell)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=upswell)/)[0].trim(); verbObject.perfect = regex + "upswollen"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(upswing)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=upswing)/)[0].trim(); verbObject.singularPast = regex + "upswung"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(vag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=vag)/)[0].trim(); verbObject.singularPast = regex + "vagged"; verbObject.continuous = regex + "vagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(vary)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=vary)/)[0].trim(); verbObject.singularPast = regex + "varied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(vat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=vat)/)[0].trim(); verbObject.singularPast = regex + "vatted"; verbObject.continuous = regex + "vatting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(verbify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=verbify)/)[0].trim(); verbObject.singularPast = regex + "verbified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(verify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=verify)/)[0].trim(); verbObject.singularPast = regex + "verified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(versify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=versify)/)[0].trim(); verbObject.singularPast = regex + "versified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(vet)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=vet)/)[0].trim(); verbObject.singularPast = regex + "vetted"; verbObject.continuous = regex + "vetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(victual)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=victual)/)[0].trim(); verbObject.singularPast = regex + "victualled"; verbObject.continuous = regex + "victualling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(vie)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=vie)/)[0].trim(); verbObject.continuous = regex + "vying"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(vilify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=vilify)/)[0].trim(); verbObject.singularPast = regex + "vilified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(vitrify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=vitrify)/)[0].trim(); verbObject.singularPast = regex + "vitrified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(vitriol)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=vitriol)/)[0].trim(); verbObject.singularPast = regex + "vitriolled"; verbObject.continuous = regex + "vitriolling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(vivify)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=vivify)/)[0].trim(); verbObject.singularPast = regex + "vivified"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(wad)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=wad)/)[0].trim(); verbObject.singularPast = regex + "wadded"; verbObject.continuous = regex + "wadding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(waddy)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=waddy)/)[0].trim(); verbObject.singularPast = regex + "waddied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(wadset)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=wadset)/)[0].trim(); verbObject.singularPast = regex + "wadsetted"; verbObject.continuous = regex + "wadsetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(wag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=wag)/)[0].trim(); verbObject.singularPast = regex + "wagged"; verbObject.continuous = regex + "wagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(wake)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=wake)/)[0].trim(); verbObject.singularPast = regex + "woke"; verbObject.perfect = regex + "woken"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(wan)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=wan)/)[0].trim(); verbObject.singularPast = regex + "wanned"; verbObject.continuous = regex + "wanning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(war)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=war)/)[0].trim(); verbObject.singularPast = regex + "warred"; verbObject.continuous = regex + "warring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(waylay)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=waylay)/)[0].trim(); verbObject.singularPast = regex + "waylaid"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(wear)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=wear)/)[0].trim(); verbObject.singularPast = regex + "wore"; verbObject.perfect = regex + "worn"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(weary)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=weary)/)[0].trim(); verbObject.singularPast = regex + "wearied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(weatherstrip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=weatherstrip)/)[0].trim(); verbObject.singularPast = regex + "weatherstripped"; verbObject.continuous = regex + "weatherstripping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(weave)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=weave)/)[0].trim(); verbObject.singularPast = regex + "wove"; verbObject.perfect = regex + "woven"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(web)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=web)/)[0].trim(); verbObject.singularPast = regex + "webbed"; verbObject.continuous = regex + "webbing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(wed)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=wed)/)[0].trim(); verbObject.singularPast = regex + "wedded"; verbObject.continuous = regex + "wedding"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(weep)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=weep)/)[0].trim(); verbObject.singularPast = regex + "wept"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(wet)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=wet)/)[0].trim(); verbObject.singularPast = regex + "wetted"; verbObject.continuous = regex + "wetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(wham)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=wham)/)[0].trim(); verbObject.singularPast = regex + "whammed"; verbObject.continuous = regex + "whamming"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(whap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=whap)/)[0].trim(); verbObject.singularPast = regex + "whapped"; verbObject.continuous = regex + "whapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(whet)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=whet)/)[0].trim(); verbObject.singularPast = regex + "whetted"; verbObject.continuous = regex + "whetting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(whinny)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=whinny)/)[0].trim(); verbObject.singularPast = regex + "whinnied"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(whip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=whip)/)[0].trim(); verbObject.singularPast = regex + "whipped"; verbObject.continuous = regex + "whipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(whipsaw)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=whipsaw)/)[0].trim(); verbObject.perfect = regex + "whipsawn"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(whir)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=whir)/)[0].trim(); verbObject.singularPast = regex + "whirred"; verbObject.continuous = regex + "whirring"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(whiz)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=whiz)/)[0].trim(); verbObject.singularPast = regex + "whizzed"; verbObject.singularPresent = regex + "whizzes"; verbObject.continuous = regex + "whizzing"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(whop)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=whop)/)[0].trim(); verbObject.singularPast = regex + "whopped"; verbObject.continuous = regex + "whopping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(wig)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=wig)/)[0].trim(); verbObject.singularPast = regex + "wigged"; verbObject.continuous = regex + "wigging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(wigwag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=wigwag)/)[0].trim(); verbObject.singularPast = regex + "wigwagged"; verbObject.continuous = regex + "wigwagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(wildcat)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=wildcat)/)[0].trim(); verbObject.singularPast = regex + "wildcatted"; verbObject.continuous = regex + "wildcatting"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(win)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=win)/)[0].trim(); verbObject.continuous = regex + "winning"; verbObject.singularPast = regex + "won"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(wind)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=wind)/)[0].trim(); verbObject.singularPast = regex + "wound"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(winterfeed)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=winterfeed)/)[0].trim(); verbObject.singularPast = regex + "winterfed"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(wiredraw)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=wiredraw)/)[0].trim(); verbObject.perfect = regex + "wiredrawn"; verbObject.singularPast = regex + "wiredrew"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(withdraw)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=withdraw)/)[0].trim(); verbObject.perfect = regex + "withdrawn"; verbObject.singularPast = regex + "withdrew"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(withhold)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=withhold)/)[0].trim(); verbObject.singularPast = regex + "withheld"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(withstand)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=withstand)/)[0].trim(); verbObject.singularPast = regex + "withstood"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(won)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=won)/)[0].trim(); verbObject.singularPast = regex + "wonned"; verbObject.continuous = regex + "wonning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(worry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=worry)/)[0].trim(); verbObject.singularPast = regex + "worried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(worship)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=worship)/)[0].trim(); verbObject.singularPast = regex + "worshipped"; verbObject.continuous = regex + "worshipping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(wrap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=wrap)/)[0].trim(); verbObject.singularPast = regex + "wrapped"; verbObject.continuous = regex + "wrapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(wring)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=wring)/)[0].trim(); verbObject.singularPast = regex + "wrung"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(write)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=write)/)[0].trim(); verbObject.perfect = regex + "written"; verbObject.singularPast = regex + "wrote"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(wry)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=wry)/)[0].trim(); verbObject.singularPast = regex + "wried"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(yak)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=yak)/)[0].trim(); verbObject.singularPast = regex + "yakked"; verbObject.continuous = regex + "yakking"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(yap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=yap)/)[0].trim(); verbObject.singularPast = regex + "yapped"; verbObject.continuous = regex + "yapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(yen)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=yen)/)[0].trim(); verbObject.singularPast = regex + "yenned"; verbObject.continuous = regex + "yenning"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(yodel)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=yodel)/)[0].trim(); verbObject.singularPast = regex + "yodelled"; verbObject.continuous = regex + "yodelling"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(zap)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=zap)/)[0].trim(); verbObject.singularPast = regex + "zapped"; verbObject.continuous = regex + "zapping"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(zigzag)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=zigzag)/)[0].trim(); verbObject.singularPast = regex + "zigzagged"; verbObject.continuous = regex + "zigzagging"; }
    else if (regexString.match(/(un|re|re+\-|un+\-|\s)+(zip)/)) { regex = regexString.match(/(un|re|re+\-|un+\-|\s)+(?=zip)/)[0].trim(); verbObject.singularPast = regex + "zipped"; verbObject.continuous = regex + "zipping"; }
    // Set regular verb values for singular present tense
    if (!verbObject.singularPresent) {
      if (lowercasedVerbString.slice(-2) === "ch" || lowercasedVerbString.slice(-2) === "sh"
      || lowercasedVerbString.slice(-1) === "s" || lowercasedVerbString.slice(-1) === "x"
      || lowercasedVerbString.slice(-1) === "o" && lowercasedVerbString.slice(-2) != "oo") {
        verbObject.singularPresent = lowercasedVerbString + "es";
      }
      else if (lowercasedVerbString.slice(-2) === "by" || lowercasedVerbString.slice(-2) === "cy"
      || lowercasedVerbString.slice(-2) === "dy" || lowercasedVerbString.slice(-2) === "fy"
      || lowercasedVerbString.slice(-2) === "gy" || lowercasedVerbString.slice(-2) === "hy"
      || lowercasedVerbString.slice(-2) === "jy" || lowercasedVerbString.slice(-2) === "ky"
      || lowercasedVerbString.slice(-2) === "ly" || lowercasedVerbString.slice(-2) === "my"
      || lowercasedVerbString.slice(-2) === "ny" || lowercasedVerbString.slice(-2) === "py"
      || lowercasedVerbString.slice(-2) === "qy" || lowercasedVerbString.slice(-2) === "ry"
      || lowercasedVerbString.slice(-2) === "sy" || lowercasedVerbString.slice(-2) === "ty"
      || lowercasedVerbString.slice(-2) === "vy" || lowercasedVerbString.slice(-2) === "wy"
      || lowercasedVerbString.slice(-2) === "xy" || lowercasedVerbString.slice(-2) === "zy") {
        let editedVerbString = lowercasedVerbString.slice(0,-1);
        verbObject.singularPresent = editedVerbString + "ies";
        verbObject.singularPast = editedVerbString + "ied";
      }
      else {
        verbObject.singularPresent = lowercasedVerbString + "s";
      }
    }
    // Set regular verb values for singular past tense
    if (!verbObject.singularPast) {
      if (lowercasedVerbString.slice(-1) === "e") {
        verbObject.singularPast = lowercasedVerbString + "d";
      }
      else {
        verbObject.singularPast = lowercasedVerbString + "ed";
      }
    }
    // Set regular verb values for continuous tense
    if (!verbObject.continuous) {
      if (lowercasedVerbString.slice(-1) === "e" && lowercasedVerbString.slice(-2) != "ee") {
        let editedVerbString = lowercasedVerbString.slice(0,-1);
        verbObject.continuous = editedVerbString + "ing";
      }
      else {
        verbObject.continuous = lowercasedVerbString + "ing";
      }
    }
    // Set default values for remaining verb tenses
    if (!verbObject.perfect) {
      verbObject.perfect = verbObject.singularPast;
    }
    if (!verbObject.firstPast) {
      verbObject.firstPast = verbObject.singularPast;
    }
    if (!verbObject.pluralPast) {
      verbObject.pluralPast = verbObject.singularPast;
    }
    if (!verbObject.firstPresent) {
      verbObject.firstPresent = verbObject.infinitive;
    }
    if (!verbObject.pluralPresent) {
      verbObject.pluralPresent = verbObject.infinitive;
    }
  }
  return verbObject;
};
