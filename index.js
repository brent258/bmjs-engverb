module.exports = function (verbString) {
  if (!verbString || verbString === undefined || typeof verbString !== 'string') {
    throw new TypeError('No valid verb string entered.');
  }
  // Initialize verb object with empty values
  let lowercasedVerbString = verbString.toLowerCase().trim().split(' ')[0];
  let verbObject = {infinitive: "", firstPresent: "", singularPresent: "", pluralPresent: "", firstPast: "", singularPast: "", pluralPast: "", perfect: "", continuous: ""};
  verbObject.infinitive = lowercasedVerbString;
  // Assign values for "be" verb
  if (lowercasedVerbString === "be") {
    verbObject.firstPresent = "am";
    verbObject.singularPresent = "is";
    verbObject.pluralPresent = "are";
    verbObject.firstPast = "was";
    verbObject.singularPast = "was";
    verbObject.pluralPast = "were";
    verbObject.perfect = "been";
    verbObject.continuous = "being";
  }
  else {
    // Assign values for irregular verb tenses
    let regex;
    if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(abet\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=abet\b)/)[0]; verbObject.singularPast = regex + "abetted"; verbObject.continuous = regex + "abetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(abut\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=abut\b)/)[0]; verbObject.singularPast = regex + "abutted"; verbObject.continuous = regex + "abutting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(accompany\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=accompany\b)/)[0]; verbObject.singularPast = regex + "accompanied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(acetify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=acetify\b)/)[0]; verbObject.singularPast = regex + "acetified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(acidify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=acidify\b)/)[0]; verbObject.singularPast = regex + "acidified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(acquit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=acquit\b)/)[0]; verbObject.singularPast = regex + "acquitted"; verbObject.continuous = regex + "acquitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(admit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=admit\b)/)[0]; verbObject.singularPast = regex + "admitted"; verbObject.continuous = regex + "admitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(aerify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=aerify\b)/)[0]; verbObject.singularPast = regex + "aerified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(airdrop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=airdrop\b)/)[0]; verbObject.singularPast = regex + "airdropped"; verbObject.continuous = regex + "airdropping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(alkalify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=alkalify\b)/)[0]; verbObject.singularPast = regex + "alkalified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(allot\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=allot\b)/)[0]; verbObject.singularPast = regex + "allotted"; verbObject.continuous = regex + "allotting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ally\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ally\b)/)[0]; verbObject.singularPast = regex + "allied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ammonify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ammonify\b)/)[0]; verbObject.singularPast = regex + "ammonified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(amnesty\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=amnesty\b)/)[0]; verbObject.singularPast = regex + "amnestied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(amplify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=amplify\b)/)[0]; verbObject.singularPast = regex + "amplified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(anglify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=anglify\b)/)[0]; verbObject.singularPast = regex + "anglified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(annul\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=annul\b)/)[0]; verbObject.singularPast = regex + "annulled"; verbObject.continuous = regex + "annulling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(appall\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=appall\b)/)[0]; verbObject.singularPast = regex + "appalled"; verbObject.continuous = regex + "appalling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(apply\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=apply\b)/)[0]; verbObject.singularPast = regex + "applied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(arc\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=arc\b)/)[0]; verbObject.singularPast = regex + "arcked"; verbObject.continuous = regex + "arcking"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(argufy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=argufy\b)/)[0]; verbObject.singularPast = regex + "argufied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(arise\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=arise\b)/)[0]; verbObject.perfect = regex + "arisen"; verbObject.singularPast = regex + "arose"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(atrophy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=atrophy\b)/)[0]; verbObject.singularPast = regex + "atrophied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(aver\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=aver\b)/)[0]; verbObject.singularPast = regex + "averred"; verbObject.continuous = regex + "averring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(awake\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=awake\b)/)[0]; verbObject.singularPast = regex + "awoke"; verbObject.perfect = regex + "awoken"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(baby\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=baby\b)/)[0]; verbObject.singularPast = regex + "babied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(backbite\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=backbite\b)/)[0]; verbObject.singularPast = regex + "backbit"; verbObject.perfect = regex + "backbitten"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(backslide\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=backslide\b)/)[0]; verbObject.singularPast = regex + "backslid"; verbObject.perfect = regex + "backslidden"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bag\b)/)[0]; verbObject.singularPast = regex + "bagged"; verbObject.continuous = regex + "bagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ballyrag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ballyrag\b)/)[0]; verbObject.singularPast = regex + "ballyragged"; verbObject.continuous = regex + "ballyragging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ban\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ban\b)/)[0]; verbObject.singularPast = regex + "banned"; verbObject.continuous = regex + "banning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bandy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bandy\b)/)[0]; verbObject.singularPast = regex + "bandied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bar\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bar\b)/)[0]; verbObject.singularPast = regex + "barred"; verbObject.continuous = regex + "barring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(barrel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=barrel\b)/)[0]; verbObject.singularPast = regex + "barrelled"; verbObject.continuous = regex + "barrelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(basify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=basify\b)/)[0]; verbObject.singularPast = regex + "basified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bat\b)/)[0]; verbObject.singularPast = regex + "batted"; verbObject.continuous = regex + "batting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bayonet\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bayonet\b)/)[0]; verbObject.singularPast = regex + "bayonetted"; verbObject.continuous = regex + "bayonetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bear\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bear\b)/)[0]; verbObject.singularPast = regex + "bore"; verbObject.perfect = regex + "born"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(beat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=beat\b)/)[0]; verbObject.perfect = regex + "beaten"; verbObject.singularPast = regex + "beat"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(beatify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=beatify\b)/)[0]; verbObject.singularPast = regex + "beatified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(beautify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=beautify\b)/)[0]; verbObject.singularPast = regex + "beautified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(become\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=become\b)/)[0]; verbObject.singularPast = regex + "became"; verbObject.perfect = regex + "become"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bed\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bed\b)/)[0]; verbObject.singularPast = regex + "bedded"; verbObject.continuous = regex + "bedding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bedevil\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bedevil\b)/)[0]; verbObject.singularPast = regex + "bedevilled"; verbObject.continuous = regex + "bedevilling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bedim\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bedim\b)/)[0]; verbObject.singularPast = regex + "bedimmed"; verbObject.continuous = regex + "bedimming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(befall\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=befall\b)/)[0]; verbObject.perfect = regex + "befallen"; verbObject.singularPast = regex + "befell"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(befit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=befit\b)/)[0]; verbObject.singularPast = regex + "befitted"; verbObject.continuous = regex + "befitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(befog\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=befog\b)/)[0]; verbObject.singularPast = regex + "befogged"; verbObject.continuous = regex + "befogging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(beg\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=beg\b)/)[0]; verbObject.singularPast = regex + "begged"; verbObject.continuous = regex + "begging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(beget\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=beget\b)/)[0]; verbObject.continuous = regex + "begetting"; verbObject.singularPast = regex + "begot"; verbObject.perfect = regex + "begotten"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(begin\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=begin\b)/)[0]; verbObject.singularPast = regex + "began"; verbObject.continuous = regex + "beginning"; verbObject.perfect = regex + "begun"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(begird\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=begird\b)/)[0]; verbObject.singularPast = regex + "begirt"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(behold\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=behold\b)/)[0]; verbObject.singularPast = regex + "beheld"; verbObject.perfect = regex + "beholden"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bejewel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bejewel\b)/)[0]; verbObject.singularPast = regex + "bejewelled"; verbObject.continuous = regex + "bejewelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(belie\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=belie\b)/)[0]; verbObject.continuous = regex + "belying"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(belly\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=belly\b)/)[0]; verbObject.singularPast = regex + "bellied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bend\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bend\b)/)[0]; verbObject.singularPast = regex + "bent"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(benefit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=benefit\b)/)[0]; verbObject.singularPast = regex + "benefitted"; verbObject.continuous = regex + "benefitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(berry\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=berry\b)/)[0]; verbObject.singularPast = regex + "berried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(beseech\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=beseech\b)/)[0]; verbObject.singularPast = regex + "besought"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(beset\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=beset\b)/)[0]; verbObject.continuous = regex + "besetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bespeak\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bespeak\b)/)[0]; verbObject.singularPast = regex + "bespoke"; verbObject.perfect = regex + "bespoken"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bestir\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bestir\b)/)[0]; verbObject.singularPast = regex + "bestirred"; verbObject.continuous = regex + "bestirring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bestrew\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bestrew\b)/)[0]; verbObject.perfect = regex + "bestrewn"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bestride\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bestride\b)/)[0]; verbObject.perfect = regex + "bestridden"; verbObject.singularPast = regex + "bestrode"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bet\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bet\b)/)[0]; verbObject.singularPast = regex + "bet"; verbObject.continuous = regex + "betting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(betake\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=betake\b)/)[0]; verbObject.perfect = regex + "betaken"; verbObject.singularPast = regex + "betook"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bethink\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bethink\b)/)[0]; verbObject.singularPast = regex + "bethought"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bevel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bevel\b)/)[0]; verbObject.singularPast = regex + "bevelled"; verbObject.continuous = regex + "bevelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bias\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bias\b)/)[0]; verbObject.singularPast = regex + "biassed"; verbObject.continuous = regex + "biassing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bid\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bid\b)/)[0]; verbObject.singularPast = regex + "bid"; verbObject.continuous = regex + "bidding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bin\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bin\b)/)[0]; verbObject.singularPast = regex + "binned"; verbObject.continuous = regex + "binning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bind\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bind\b)/)[0]; verbObject.singularPast = regex + "bound"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bing\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bing\b)/)[0]; verbObject.continuous = regex + "bing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bit\b)/)[0]; verbObject.singularPast = regex + "bitted"; verbObject.continuous = regex + "bitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bite\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bite\b)/)[0]; verbObject.singularPast = regex + "bit"; verbObject.perfect = regex + "bitten"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bivouac\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bivouac\b)/)[0]; verbObject.singularPast = regex + "bivouacked"; verbObject.continuous = regex + "bivouacking"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(blab\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=blab\b)/)[0]; verbObject.singularPast = regex + "blabbed"; verbObject.continuous = regex + "blabbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(blackberry\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=blackberry\b)/)[0]; verbObject.singularPast = regex + "blackberried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(blackleg\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=blackleg\b)/)[0]; verbObject.singularPast = regex + "blacklegged"; verbObject.continuous = regex + "blacklegging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(blat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=blat\b)/)[0]; verbObject.singularPast = regex + "blatted"; verbObject.continuous = regex + "blatting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bleed\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bleed\b)/)[0]; verbObject.singularPast = regex + "bled"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(blip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=blip\b)/)[0]; verbObject.singularPast = regex + "blipped"; verbObject.continuous = regex + "blipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(blob\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=blob\b)/)[0]; verbObject.singularPast = regex + "blobbed"; verbObject.continuous = regex + "blobbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bloody\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bloody\b)/)[0]; verbObject.singularPast = regex + "bloodied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(blot\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=blot\b)/)[0]; verbObject.singularPast = regex + "blotted"; verbObject.continuous = regex + "blotting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(blow\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=blow\b)/)[0]; verbObject.singularPast = regex + "blew"; verbObject.perfect = regex + "blown"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(blub\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=blub\b)/)[0]; verbObject.singularPast = regex + "blubbed"; verbObject.continuous = regex + "blubbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(blur\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=blur\b)/)[0]; verbObject.singularPast = regex + "blurred"; verbObject.continuous = regex + "blurring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bob\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bob\b)/)[0]; verbObject.singularPast = regex + "bobbed"; verbObject.continuous = regex + "bobbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(body\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=body\b)/)[0]; verbObject.singularPast = regex + "bodied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bootleg\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bootleg\b)/)[0]; verbObject.singularPast = regex + "bootlegged"; verbObject.continuous = regex + "bootlegging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bop\b)/)[0]; verbObject.singularPast = regex + "bopped"; verbObject.continuous = regex + "bopping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(brag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=brag\b)/)[0]; verbObject.singularPast = regex + "bragged"; verbObject.continuous = regex + "bragging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(break\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=break\b)/)[0]; verbObject.singularPast = regex + "broke"; verbObject.perfect = regex + "broken"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(breed\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=breed\b)/)[0]; verbObject.singularPast = regex + "bred"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(brevet\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=brevet\b)/)[0]; verbObject.singularPast = regex + "brevetted"; verbObject.continuous = regex + "brevetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(brim\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=brim\b)/)[0]; verbObject.singularPast = regex + "brimmed"; verbObject.continuous = regex + "brimming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bring\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bring\b)/)[0]; verbObject.singularPast = regex + "brought"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(browbeat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=browbeat\b)/)[0]; verbObject.perfect = regex + "browbeaten"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(brutify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=brutify\b)/)[0]; verbObject.singularPast = regex + "brutified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bud\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bud\b)/)[0]; verbObject.singularPast = regex + "budded"; verbObject.continuous = regex + "budding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bug\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bug\b)/)[0]; verbObject.singularPast = regex + "bugged"; verbObject.continuous = regex + "bugging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(build\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=build\b)/)[0]; verbObject.singularPast = regex + "built"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bulldog\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bulldog\b)/)[0]; verbObject.continuous = regex + "bulldogging"; verbObject.singularPast = regex + "bulldogged"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bullshit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bullshit\b)/)[0]; verbObject.singularPast = regex + "bullshitted"; verbObject.continuous = regex + "bullshitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bullwhip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bullwhip\b)/)[0]; verbObject.singularPast = regex + "bullwhipped"; verbObject.continuous = regex + "bullwhipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bully\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bully\b)/)[0]; verbObject.singularPast = regex + "bullied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bullyrag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bullyrag\b)/)[0]; verbObject.singularPast = regex + "bullyragged"; verbObject.continuous = regex + "bullyragging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bum\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bum\b)/)[0]; verbObject.singularPast = regex + "bummed"; verbObject.continuous = regex + "bumming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bur\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bur\b)/)[0]; verbObject.singularPast = regex + "burred"; verbObject.continuous = regex + "burring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bury\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bury\b)/)[0]; verbObject.singularPast = regex + "buried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(bushel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=bushel\b)/)[0]; verbObject.singularPast = regex + "bushelled"; verbObject.continuous = regex + "bushelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(busy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=busy\b)/)[0]; verbObject.singularPast = regex + "busied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(buy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=buy\b)/)[0]; verbObject.singularPast = regex + "bought"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(cabal\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=cabal\b)/)[0]; verbObject.singularPast = regex + "caballed"; verbObject.continuous = regex + "caballing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(caddy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=caddy\b)/)[0]; verbObject.singularPast = regex + "caddied"; verbObject.singularPresent = regex + "caddies"; verbObject.continuous = regex + "caddying"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(calcify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=calcify\b)/)[0]; verbObject.singularPast = regex + "calcified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(can\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=can\b)/)[0]; verbObject.singularPast = regex + "canned"; verbObject.continuous = regex + "canning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(canal\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=canal\b)/)[0]; verbObject.singularPast = regex + "canalled"; verbObject.continuous = regex + "canalling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(cancel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=cancel\b)/)[0]; verbObject.singularPast = regex + "cancelled"; verbObject.continuous = regex + "cancelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(candy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=candy\b)/)[0]; verbObject.singularPast = regex + "candied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(canopy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=canopy\b)/)[0]; verbObject.singularPast = regex + "canopied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(cap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=cap\b)/)[0]; verbObject.singularPast = regex + "capped"; verbObject.continuous = regex + "capping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(carburet\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=carburet\b)/)[0]; verbObject.singularPast = regex + "carburetted"; verbObject.continuous = regex + "carburetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(carillon\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=carillon\b)/)[0]; verbObject.singularPast = regex + "carillonned"; verbObject.continuous = regex + "carillonning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(carnify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=carnify\b)/)[0]; verbObject.singularPast = regex + "carnified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(carny\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=carny\b)/)[0]; verbObject.singularPast = regex + "carnied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(carol\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=carol\b)/)[0]; verbObject.singularPast = regex + "carolled"; verbObject.continuous = regex + "carolling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(carry\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=carry\b)/)[0]; verbObject.singularPast = regex + "carried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(casefy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=casefy\b)/)[0]; verbObject.singularPast = regex + "casefied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(cat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=cat\b)/)[0]; verbObject.singularPast = regex + "catted"; verbObject.continuous = regex + "catting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(catch\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=catch\b)/)[0]; verbObject.singularPast = regex + "caught"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(catnap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=catnap\b)/)[0]; verbObject.singularPast = regex + "catnapped"; verbObject.continuous = regex + "catnapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(cavil\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=cavil\b)/)[0]; verbObject.singularPast = regex + "cavilled"; verbObject.continuous = regex + "cavilling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(certify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=certify\b)/)[0]; verbObject.singularPast = regex + "certified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(channel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=channel\b)/)[0]; verbObject.singularPast = regex + "channelled"; verbObject.continuous = regex + "channelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(chap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=chap\b)/)[0]; verbObject.singularPast = regex + "chapped"; verbObject.continuous = regex + "chapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(char\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=char\b)/)[0]; verbObject.singularPast = regex + "charred"; verbObject.continuous = regex + "charring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(chat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=chat\b)/)[0]; verbObject.singularPast = regex + "chatted"; verbObject.continuous = regex + "chatting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(chin\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=chin\b)/)[0]; verbObject.singularPast = regex + "chinned"; verbObject.continuous = regex + "chinning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(chip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=chip\b)/)[0]; verbObject.singularPast = regex + "chipped"; verbObject.continuous = regex + "chipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(chisel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=chisel\b)/)[0]; verbObject.singularPast = regex + "chiselled"; verbObject.continuous = regex + "chiselling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(chitchat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=chitchat\b)/)[0]; verbObject.singularPast = regex + "chitchatted"; verbObject.continuous = regex + "chitchatting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(chiv\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=chiv\b)/)[0]; verbObject.singularPast = regex + "chivved"; verbObject.continuous = regex + "chivving"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(chivy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=chivy\b)/)[0]; verbObject.singularPast = regex + "chivvied"; verbObject.singularPresent = regex + "chivvies"; verbObject.continuous = regex + "chivvying"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(chondrify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=chondrify\b)/)[0]; verbObject.singularPast = regex + "chondrified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(choose\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=choose\b)/)[0]; verbObject.singularPast = regex + "chose"; verbObject.perfect = regex + "chosen"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(chop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=chop\b)/)[0]; verbObject.singularPast = regex + "chopped"; verbObject.continuous = regex + "chopping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(chug\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=chug\b)/)[0]; verbObject.singularPast = regex + "chugged"; verbObject.continuous = regex + "chugging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(chum\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=chum\b)/)[0]; verbObject.singularPast = regex + "chummed"; verbObject.continuous = regex + "chumming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(citify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=citify\b)/)[0]; verbObject.singularPast = regex + "citified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(clad\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=clad\b)/)[0]; verbObject.continuous = regex + "cladding"; verbObject.singularPast = regex + "cladded"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(clam\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=clam\b)/)[0]; verbObject.singularPast = regex + "clammed"; verbObject.continuous = regex + "clamming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(clap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=clap\b)/)[0]; verbObject.singularPast = regex + "clapped"; verbObject.continuous = regex + "clapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(clarify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=clarify\b)/)[0]; verbObject.singularPast = regex + "clarified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(classify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=classify\b)/)[0]; verbObject.singularPast = regex + "classified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(cleave\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=cleave\b)/)[0]; verbObject.singularPast = regex + "clove"; verbObject.perfect = regex + "cloven"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(clem\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=clem\b)/)[0]; verbObject.singularPast = regex + "clemmed"; verbObject.continuous = regex + "clemming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(clepe\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=clepe\b)/)[0]; verbObject.singularPast = regex + "clept"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(cling\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=cling\b)/)[0]; verbObject.singularPast = regex + "clung"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(clip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=clip\b)/)[0]; verbObject.singularPast = regex + "clipped"; verbObject.continuous = regex + "clipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(clog\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=clog\b)/)[0]; verbObject.singularPast = regex + "clogged"; verbObject.continuous = regex + "clogging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(clop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=clop\b)/)[0]; verbObject.singularPast = regex + "clopped"; verbObject.continuous = regex + "clopping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(clot\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=clot\b)/)[0]; verbObject.singularPast = regex + "clotted"; verbObject.continuous = regex + "clotting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(clothe\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=clothe\b)/)[0]; verbObject.singularPast = regex + "clad"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(club\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=club\b)/)[0]; verbObject.singularPast = regex + "clubbed"; verbObject.continuous = regex + "clubbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(cockneyfy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=cockneyfy\b)/)[0]; verbObject.singularPast = regex + "cockneyfied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(cod\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=cod\b)/)[0]; verbObject.singularPast = regex + "codded"; verbObject.continuous = regex + "codding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(codify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=codify\b)/)[0]; verbObject.singularPast = regex + "codified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(cog\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=cog\b)/)[0]; verbObject.singularPast = regex + "cogged"; verbObject.continuous = regex + "cogging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(coif\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=coif\b)/)[0]; verbObject.singularPast = regex + "coiffed"; verbObject.continuous = regex + "coiffing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(colly\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=colly\b)/)[0]; verbObject.singularPast = regex + "collied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(combat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=combat\b)/)[0]; verbObject.singularPast = regex + "combatted"; verbObject.continuous = regex + "combatting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(come\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=come\b)/)[0]; verbObject.singularPast = regex + "came"; verbObject.perfect = regex + "come"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(commit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=commit\b)/)[0]; verbObject.singularPast = regex + "committed"; verbObject.continuous = regex + "committing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(compel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=compel\b)/)[0]; verbObject.singularPast = regex + "compelled"; verbObject.continuous = regex + "compelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(complot\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=complot\b)/)[0]; verbObject.singularPast = regex + "complotted"; verbObject.continuous = regex + "complotting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(comply\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=comply\b)/)[0]; verbObject.singularPast = regex + "complied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(con\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=con\b)/)[0]; verbObject.singularPast = regex + "conned"; verbObject.continuous = regex + "conning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(concur\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=concur\b)/)[0]; verbObject.singularPast = regex + "concurred"; verbObject.continuous = regex + "concurring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(confab\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=confab\b)/)[0]; verbObject.singularPast = regex + "confabbed"; verbObject.continuous = regex + "confabbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(confer\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=confer\b)/)[0]; verbObject.singularPast = regex + "conferred"; verbObject.continuous = regex + "conferring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(control\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=control\b)/)[0]; verbObject.singularPast = regex + "controlled"; verbObject.continuous = regex + "controlling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(cop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=cop\b)/)[0]; verbObject.singularPast = regex + "copped"; verbObject.continuous = regex + "copping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(copy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=copy\b)/)[0]; verbObject.singularPast = regex + "copied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(coquet\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=coquet\b)/)[0]; verbObject.singularPast = regex + "coquetted"; verbObject.continuous = regex + "coquetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(corral\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=corral\b)/)[0]; verbObject.singularPast = regex + "corralled"; verbObject.continuous = regex + "corralling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(counsel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=counsel\b)/)[0]; verbObject.singularPast = regex + "counselled"; verbObject.continuous = regex + "counselling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(counterplot\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=counterplot\b)/)[0]; verbObject.singularPast = regex + "counterplotted"; verbObject.continuous = regex + "counterplotting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(countersink\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=countersink\b)/)[0]; verbObject.singularPast = regex + "countersank"; verbObject.perfect = regex + "countersunk"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(crab\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=crab\b)/)[0]; verbObject.singularPast = regex + "crabbed"; verbObject.continuous = regex + "crabbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(cram\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=cram\b)/)[0]; verbObject.singularPast = regex + "crammed"; verbObject.continuous = regex + "cramming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(crap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=crap\b)/)[0]; verbObject.singularPast = regex + "crapped"; verbObject.continuous = regex + "crapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(creep\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=creep\b)/)[0]; verbObject.singularPast = regex + "crept"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(crib\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=crib\b)/)[0]; verbObject.singularPast = regex + "cribbed"; verbObject.continuous = regex + "cribbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(crop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=crop\b)/)[0]; verbObject.singularPast = regex + "cropped"; verbObject.continuous = regex + "cropping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(crossbreed\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=crossbreed\b)/)[0]; verbObject.singularPast = regex + "crossbred"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(crosscut\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=crosscut\b)/)[0]; verbObject.continuous = regex + "crosscutting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(crucify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=crucify\b)/)[0]; verbObject.singularPast = regex + "crucified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(cry\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=cry\b)/)[0]; verbObject.singularPast = regex + "cried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(cub\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=cub\b)/)[0]; verbObject.singularPast = regex + "cubbed"; verbObject.continuous = regex + "cubbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(cudgel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=cudgel\b)/)[0]; verbObject.singularPast = regex + "cudgelled"; verbObject.continuous = regex + "cudgelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(cup\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=cup\b)/)[0]; verbObject.singularPast = regex + "cupped"; verbObject.continuous = regex + "cupping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(cupel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=cupel\b)/)[0]; verbObject.singularPast = regex + "cupelled"; verbObject.continuous = regex + "cupelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(curet\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=curet\b)/)[0]; verbObject.singularPast = regex + "curetted"; verbObject.continuous = regex + "curetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(curry\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=curry\b)/)[0]; verbObject.singularPast = regex + "curried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(curtsy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=curtsy\b)/)[0]; verbObject.singularPast = regex + "curtsied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(curvet\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=curvet\b)/)[0]; verbObject.singularPast = regex + "curvetted"; verbObject.continuous = regex + "curvetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(cut\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=cut\b)/)[0]; verbObject.continuous = regex + "cutting"; verbObject.singularPast = regex + "cut"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dab\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dab\b)/)[0]; verbObject.singularPast = regex + "dabbed"; verbObject.continuous = regex + "dabbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dag\b)/)[0]; verbObject.singularPast = regex + "dagged"; verbObject.continuous = regex + "dagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dally\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dally\b)/)[0]; verbObject.singularPast = regex + "dallied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dam\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dam\b)/)[0]; verbObject.singularPast = regex + "dammed"; verbObject.continuous = regex + "damming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(damnify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=damnify\b)/)[0]; verbObject.singularPast = regex + "damnified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dandify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dandify\b)/)[0]; verbObject.singularPast = regex + "dandified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dap\b)/)[0]; verbObject.singularPast = regex + "dapped"; verbObject.continuous = regex + "dapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(deal\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=deal\b)/)[0]; verbObject.singularPast = regex + "dealt"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(defer\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=defer\b)/)[0]; verbObject.singularPast = regex + "deferred"; verbObject.continuous = regex + "deferring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(defy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=defy\b)/)[0]; verbObject.singularPast = regex + "defied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(deify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=deify\b)/)[0]; verbObject.singularPast = regex + "deified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(demit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=demit\b)/)[0]; verbObject.singularPast = regex + "demitted"; verbObject.continuous = regex + "demitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(demur\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=demur\b)/)[0]; verbObject.singularPast = regex + "demurred"; verbObject.continuous = regex + "demurring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(den\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=den\b)/)[0]; verbObject.singularPast = regex + "denned"; verbObject.continuous = regex + "denning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(denazify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=denazify\b)/)[0]; verbObject.singularPast = regex + "denazified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(deny\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=deny\b)/)[0]; verbObject.singularPast = regex + "denied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(descry\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=descry\b)/)[0]; verbObject.singularPast = regex + "descried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(deter\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=deter\b)/)[0]; verbObject.singularPast = regex + "deterred"; verbObject.continuous = regex + "deterring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(devil\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=devil\b)/)[0]; verbObject.singularPast = regex + "devilled"; verbObject.continuous = regex + "devilling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(devitrify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=devitrify\b)/)[0]; verbObject.singularPast = regex + "devitrified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(diagram\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=diagram\b)/)[0]; verbObject.singularPast = regex + "diagrammed"; verbObject.continuous = regex + "diagramming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dial\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dial\b)/)[0]; verbObject.singularPast = regex + "dialled"; verbObject.continuous = regex + "dialling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dib\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dib\b)/)[0]; verbObject.singularPast = regex + "dibbed"; verbObject.continuous = regex + "dibbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(die\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=die\b)/)[0]; verbObject.continuous = regex + "dying"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dig\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dig\b)/)[0]; verbObject.continuous = regex + "digging"; verbObject.singularPast = regex + "dug"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dignify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dignify\b)/)[0]; verbObject.singularPast = regex + "dignified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dim\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dim\b)/)[0]; verbObject.singularPast = regex + "dimmed"; verbObject.continuous = regex + "dimming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(din\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=din\b)/)[0]; verbObject.singularPast = regex + "dinned"; verbObject.continuous = regex + "dinning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dip\b)/)[0]; verbObject.singularPast = regex + "dipped"; verbObject.continuous = regex + "dipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dirty\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dirty\b)/)[0]; verbObject.singularPast = regex + "dirtied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(disembowel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=disembowel\b)/)[0]; verbObject.singularPast = regex + "disembowelled"; verbObject.continuous = regex + "disembowelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dishevel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dishevel\b)/)[0]; verbObject.singularPast = regex + "dishevelled"; verbObject.continuous = regex + "dishevelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(disinter\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=disinter\b)/)[0]; verbObject.singularPast = regex + "disinterred"; verbObject.continuous = regex + "disinterring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dispel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dispel\b)/)[0]; verbObject.singularPast = regex + "dispelled"; verbObject.continuous = regex + "dispelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(distill\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=distill\b)/)[0]; verbObject.singularPast = regex + "distilled"; verbObject.continuous = regex + "distilling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(diversify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=diversify\b)/)[0]; verbObject.singularPast = regex + "diversified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(divvy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=divvy\b)/)[0]; verbObject.singularPast = regex + "divvied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dizzy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dizzy\b)/)[0]; verbObject.singularPast = regex + "dizzied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(do\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=do\b)/)[0]; verbObject.singularPast = regex + "did"; verbObject.perfect = regex + "done"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dog\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dog\b)/)[0]; verbObject.singularPast = regex + "dogged"; verbObject.continuous = regex + "dogging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dogleg\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dogleg\b)/)[0]; verbObject.singularPast = regex + "doglegged"; verbObject.continuous = regex + "doglegging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dolly\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dolly\b)/)[0]; verbObject.singularPast = regex + "dollied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(don\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=don\b)/)[0]; verbObject.singularPast = regex + "donned"; verbObject.continuous = regex + "donning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dot\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dot\b)/)[0]; verbObject.singularPast = regex + "dotted"; verbObject.continuous = regex + "dotting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dow\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dow\b)/)[0]; verbObject.singularPast = regex + "dought"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(drab\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=drab\b)/)[0]; verbObject.singularPast = regex + "drabbed"; verbObject.continuous = regex + "drabbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(drag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=drag\b)/)[0]; verbObject.singularPast = regex + "dragged"; verbObject.continuous = regex + "dragging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(draw\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=draw\b)/)[0]; verbObject.perfect = regex + "drawn"; verbObject.singularPast = regex + "drew"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(drink\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=drink\b)/)[0]; verbObject.singularPast = regex + "drank"; verbObject.perfect = regex + "drunk"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(drip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=drip\b)/)[0]; verbObject.singularPast = regex + "dripped"; verbObject.continuous = regex + "dripping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(drive\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=drive\b)/)[0]; verbObject.perfect = regex + "driven"; verbObject.singularPast = regex + "drove"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(drivel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=drivel\b)/)[0]; verbObject.singularPast = regex + "drivelled"; verbObject.continuous = regex + "drivelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(drop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=drop\b)/)[0]; verbObject.singularPast = regex + "dropped"; verbObject.continuous = regex + "dropping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(drub\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=drub\b)/)[0]; verbObject.singularPast = regex + "drubbed"; verbObject.continuous = regex + "drubbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(drug\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=drug\b)/)[0]; verbObject.singularPast = regex + "drugged"; verbObject.continuous = regex + "drugging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(drum\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=drum\b)/)[0]; verbObject.singularPast = regex + "drummed"; verbObject.continuous = regex + "drumming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dry\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dry\b)/)[0]; verbObject.singularPast = regex + "dried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dub\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dub\b)/)[0]; verbObject.singularPast = regex + "dubbed"; verbObject.continuous = regex + "dubbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(duel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=duel\b)/)[0]; verbObject.singularPast = regex + "duelled"; verbObject.continuous = regex + "duelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dulcify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dulcify\b)/)[0]; verbObject.singularPast = regex + "dulcified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dummy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dummy\b)/)[0]; verbObject.singularPast = regex + "dummied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(dun\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=dun\b)/)[0]; verbObject.singularPast = regex + "dunned"; verbObject.continuous = regex + "dunning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(easy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=easy\b)/)[0]; verbObject.singularPast = regex + "easied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(eat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=eat\b)/)[0]; verbObject.singularPast = regex + "ate"; verbObject.perfect = regex + "eaten"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(eavesdrop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=eavesdrop\b)/)[0]; verbObject.singularPast = regex + "eavesdropped"; verbObject.continuous = regex + "eavesdropping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(eddy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=eddy\b)/)[0]; verbObject.singularPast = regex + "eddied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(edify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=edify\b)/)[0]; verbObject.singularPast = regex + "edified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(electrify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=electrify\b)/)[0]; verbObject.singularPast = regex + "electrified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(embed\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=embed\b)/)[0]; verbObject.singularPast = regex + "embedded"; verbObject.continuous = regex + "embedding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(embody\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=embody\b)/)[0]; verbObject.singularPast = regex + "embodied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(embus\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=embus\b)/)[0]; verbObject.singularPast = regex + "embussed"; verbObject.singularPresent = regex + "embusses"; verbObject.continuous = regex + "embussing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(emit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=emit\b)/)[0]; verbObject.singularPast = regex + "emitted"; verbObject.continuous = regex + "emitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(empanel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=empanel\b)/)[0]; verbObject.singularPast = regex + "empanelled"; verbObject.continuous = regex + "empanelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(empty\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=empty\b)/)[0]; verbObject.singularPast = regex + "emptied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(emulsify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=emulsify\b)/)[0]; verbObject.singularPast = regex + "emulsified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(enamel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=enamel\b)/)[0]; verbObject.singularPast = regex + "enamelled"; verbObject.continuous = regex + "enamelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(englut\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=englut\b)/)[0]; verbObject.singularPast = regex + "englutted"; verbObject.continuous = regex + "englutting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(enroll\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=enroll\b)/)[0]; verbObject.singularPast = regex + "enrolled"; verbObject.continuous = regex + "enrolling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(enthrall\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=enthrall\b)/)[0]; verbObject.singularPast = regex + "enthralled"; verbObject.continuous = regex + "enthralling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(entrammel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=entrammel\b)/)[0]; verbObject.singularPast = regex + "entrammelled"; verbObject.continuous = regex + "entrammelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(entrap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=entrap\b)/)[0]; verbObject.singularPast = regex + "entrapped"; verbObject.continuous = regex + "entrapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(envy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=envy\b)/)[0]; verbObject.singularPast = regex + "envied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(enwind\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=enwind\b)/)[0]; verbObject.singularPast = regex + "enwound"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(enwrap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=enwrap\b)/)[0]; verbObject.singularPast = regex + "enwrapped"; verbObject.continuous = regex + "enwrapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(equal\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=equal\b)/)[0]; verbObject.singularPast = regex + "equalled"; verbObject.continuous = regex + "equalling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(equip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=equip\b)/)[0]; verbObject.singularPast = regex + "equipped"; verbObject.continuous = regex + "equipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(espy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=espy\b)/)[0]; verbObject.singularPast = regex + "espied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(esterify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=esterify\b)/)[0]; verbObject.singularPast = regex + "esterified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(estop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=estop\b)/)[0]; verbObject.singularPast = regex + "estopped"; verbObject.continuous = regex + "estopping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(etherify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=etherify\b)/)[0]; verbObject.singularPast = regex + "etherified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(excel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=excel\b)/)[0]; verbObject.singularPast = regex + "excelled"; verbObject.continuous = regex + "excelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(exemplify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=exemplify\b)/)[0]; verbObject.singularPast = regex + "exemplified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(expel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=expel\b)/)[0]; verbObject.singularPast = regex + "expelled"; verbObject.continuous = regex + "expelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(extoll\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=extoll\b)/)[0]; verbObject.singularPast = regex + "extolled"; verbObject.continuous = regex + "extolling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(facet\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=facet\b)/)[0]; verbObject.singularPast = regex + "facetted"; verbObject.continuous = regex + "facetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fag\b)/)[0]; verbObject.singularPast = regex + "fagged"; verbObject.continuous = regex + "fagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fall\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fall\b)/)[0]; verbObject.perfect = regex + "fallen"; verbObject.singularPast = regex + "fell"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(falsify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=falsify\b)/)[0]; verbObject.singularPast = regex + "falsified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fan\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fan\b)/)[0]; verbObject.singularPast = regex + "fanned"; verbObject.continuous = regex + "fanning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fancy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fancy\b)/)[0]; verbObject.singularPast = regex + "fancied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fantasy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fantasy\b)/)[0]; verbObject.singularPast = regex + "fantasied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fat\b)/)[0]; verbObject.singularPast = regex + "fatted"; verbObject.continuous = regex + "fatting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(featherbed\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=featherbed\b)/)[0]; verbObject.singularPast = regex + "featherbedded"; verbObject.continuous = regex + "featherbedding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fee\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fee\b)/)[0]; verbObject.singularPast = regex + "feed"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(feed\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=feed\b)/)[0]; verbObject.singularPast = regex + "fed"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(feel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=feel\b)/)[0]; verbObject.singularPast = regex + "felt"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ferry\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ferry\b)/)[0]; verbObject.singularPast = regex + "ferried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fib\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fib\b)/)[0]; verbObject.singularPast = regex + "fibbed"; verbObject.continuous = regex + "fibbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fig\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fig\b)/)[0]; verbObject.singularPast = regex + "figged"; verbObject.continuous = regex + "figging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fight\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fight\b)/)[0]; verbObject.singularPast = regex + "fought"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fin\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fin\b)/)[0]; verbObject.singularPast = regex + "finned"; verbObject.continuous = regex + "finning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(find\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=find\b)/)[0]; verbObject.singularPast = regex + "found"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fit\b)/)[0]; verbObject.singularPast = regex + "fitted"; verbObject.continuous = regex + "fitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(flag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=flag\b)/)[0]; verbObject.singularPast = regex + "flagged"; verbObject.continuous = regex + "flagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(flam\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=flam\b)/)[0]; verbObject.singularPast = regex + "flammed"; verbObject.continuous = regex + "flamming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(flannel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=flannel\b)/)[0]; verbObject.singularPast = regex + "flannelled"; verbObject.continuous = regex + "flannelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(flap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=flap\b)/)[0]; verbObject.singularPast = regex + "flapped"; verbObject.continuous = regex + "flapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(flat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=flat\b)/)[0]; verbObject.singularPast = regex + "flatted"; verbObject.continuous = regex + "flatting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(flee\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=flee\b)/)[0]; verbObject.singularPast = regex + "fled"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(flimflam\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=flimflam\b)/)[0]; verbObject.singularPast = regex + "flimflammed"; verbObject.continuous = regex + "flimflamming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fling\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fling\b)/)[0]; verbObject.singularPast = regex + "flung"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(flip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=flip\b)/)[0]; verbObject.singularPast = regex + "flipped"; verbObject.continuous = regex + "flipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(flit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=flit\b)/)[0]; verbObject.singularPast = regex + "flitted"; verbObject.continuous = regex + "flitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(flog\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=flog\b)/)[0]; verbObject.singularPast = regex + "flogged"; verbObject.continuous = regex + "flogging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(floodlight\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=floodlight\b)/)[0]; verbObject.singularPast = regex + "floodlit"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(flop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=flop\b)/)[0]; verbObject.singularPast = regex + "flopped"; verbObject.continuous = regex + "flopping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(flub\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=flub\b)/)[0]; verbObject.singularPast = regex + "flubbed"; verbObject.continuous = regex + "flubbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(flurry\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=flurry\b)/)[0]; verbObject.singularPast = regex + "flurried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fly\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fly\b)/)[0]; verbObject.singularPast = regex + "flew"; verbObject.perfect = regex + "flown"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(flyblow\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=flyblow\b)/)[0]; verbObject.singularPast = regex + "flyblew"; verbObject.perfect = regex + "flyblown"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fob\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fob\b)/)[0]; verbObject.singularPast = regex + "fobbed"; verbObject.continuous = regex + "fobbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fog\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fog\b)/)[0]; verbObject.singularPast = regex + "fogged"; verbObject.continuous = regex + "fogging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(footslog\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=footslog\b)/)[0]; verbObject.singularPast = regex + "footslogged"; verbObject.continuous = regex + "footslogging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(forbear\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=forbear\b)/)[0]; verbObject.singularPast = regex + "forbore"; verbObject.perfect = regex + "forborne"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(forbid\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=forbid\b)/)[0]; verbObject.singularPast = regex + "forbad"; verbObject.perfect = regex + "forbidden"; verbObject.continuous = regex + "forbidding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fordo\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fordo\b)/)[0]; verbObject.singularPast = regex + "fordid"; verbObject.perfect = regex + "fordone"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(foredo\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=foredo\b)/)[0]; verbObject.singularPast = regex + "foredid"; verbObject.perfect = regex + "foredone"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(forego\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=forego\b)/)[0]; verbObject.perfect = regex + "foregone"; verbObject.singularPast = regex + "forewent"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(foreknow\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=foreknow\b)/)[0]; verbObject.singularPast = regex + "foreknew"; verbObject.perfect = regex + "foreknown"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(forerun\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=forerun\b)/)[0]; verbObject.singularPast = regex + "foreran"; verbObject.continuous = regex + "forerunning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(foresee\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=foresee\b)/)[0]; verbObject.singularPast = regex + "foresaw"; verbObject.perfect = regex + "foreseen"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(foreshow\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=foreshow\b)/)[0]; verbObject.perfect = regex + "foreshown"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(forespeak\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=forespeak\b)/)[0]; verbObject.singularPast = regex + "forespoke"; verbObject.perfect = regex + "forespoken"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(foretell\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=foretell\b)/)[0]; verbObject.singularPast = regex + "foretold"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(forget\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=forget\b)/)[0]; verbObject.continuous = regex + "forgetting"; verbObject.singularPast = regex + "forgot"; verbObject.perfect = regex + "forgotten"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(forgive\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=forgive\b)/)[0]; verbObject.singularPast = regex + "forgave"; verbObject.perfect = regex + "forgiven"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(forgo\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=forgo\b)/)[0]; verbObject.perfect = regex + "forgone"; verbObject.singularPast = regex + "forwent"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(format\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=format\b)/)[0]; verbObject.singularPast = regex + "formatted"; verbObject.continuous = regex + "formatting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(forsake\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=forsake\b)/)[0]; verbObject.perfect = regex + "forsaken"; verbObject.singularPast = regex + "forsook"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(forspeak\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=forspeak\b)/)[0]; verbObject.singularPast = regex + "forspoke"; verbObject.perfect = regex + "forspoken"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(forswear\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=forswear\b)/)[0]; verbObject.singularPast = regex + "forswore"; verbObject.perfect = regex + "forsworn"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fortify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fortify\b)/)[0]; verbObject.singularPast = regex + "fortified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(foxtrot\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=foxtrot\b)/)[0]; verbObject.singularPast = regex + "foxtrotted"; verbObject.continuous = regex + "foxtrotting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(frap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=frap\b)/)[0]; verbObject.singularPast = regex + "frapped"; verbObject.continuous = regex + "frapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(freeze\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=freeze\b)/)[0]; verbObject.singularPast = regex + "froze"; verbObject.perfect = regex + "frozen"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(frenchify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=frenchify\b)/)[0]; verbObject.singularPast = regex + "frenchified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(frenzy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=frenzy\b)/)[0]; verbObject.singularPast = regex + "frenzied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fret\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fret\b)/)[0]; verbObject.singularPast = regex + "fretted"; verbObject.continuous = regex + "fretting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(frig\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=frig\b)/)[0]; verbObject.singularPast = regex + "frigged"; verbObject.continuous = regex + "frigging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fritt\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fritt\b)/)[0]; verbObject.singularPast = regex + "fritted"; verbObject.continuous = regex + "fritting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(frivol\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=frivol\b)/)[0]; verbObject.singularPast = regex + "frivolled"; verbObject.continuous = regex + "frivolling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(frog\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=frog\b)/)[0]; verbObject.singularPast = regex + "frogged"; verbObject.continuous = regex + "frogging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(frolic\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=frolic\b)/)[0]; verbObject.singularPast = regex + "frolicked"; verbObject.continuous = regex + "frolicking"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fructify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fructify\b)/)[0]; verbObject.singularPast = regex + "fructified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fry\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fry\b)/)[0]; verbObject.singularPast = regex + "fried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fuel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fuel\b)/)[0]; verbObject.singularPast = regex + "fuelled"; verbObject.continuous = regex + "fuelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fulfill\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fulfill\b)/)[0]; verbObject.singularPast = regex + "fulfilled"; verbObject.continuous = regex + "fulfilling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fun\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fun\b)/)[0]; verbObject.singularPast = regex + "funned"; verbObject.continuous = regex + "funning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(funnel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=funnel\b)/)[0]; verbObject.singularPast = regex + "funnelled"; verbObject.continuous = regex + "funnelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(fur\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=fur\b)/)[0]; verbObject.singularPast = regex + "furred"; verbObject.continuous = regex + "furring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(gad\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=gad\b)/)[0]; verbObject.singularPast = regex + "gadded"; verbObject.continuous = regex + "gadding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(gag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=gag\b)/)[0]; verbObject.singularPast = regex + "gagged"; verbObject.continuous = regex + "gagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(gainsay\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=gainsay\b)/)[0]; verbObject.singularPast = regex + "gainsaid"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(gam\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=gam\b)/)[0]; verbObject.singularPast = regex + "gammed"; verbObject.continuous = regex + "gamming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(gambol\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=gambol\b)/)[0]; verbObject.singularPast = regex + "gambolled"; verbObject.continuous = regex + "gambolling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(gan\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=gan\b)/)[0]; verbObject.singularPast = regex + "ganned"; verbObject.continuous = regex + "ganning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(gap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=gap\b)/)[0]; verbObject.singularPast = regex + "gapped"; verbObject.continuous = regex + "gapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(gas\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=gas\b)/)[0]; verbObject.singularPast = regex + "gassed"; verbObject.singularPresent = regex + "gasses"; verbObject.continuous = regex + "gassing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(gasify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=gasify\b)/)[0]; verbObject.singularPast = regex + "gasified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(gel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=gel\b)/)[0]; verbObject.singularPast = regex + "gelled"; verbObject.continuous = regex + "gelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(gem\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=gem\b)/)[0]; verbObject.singularPast = regex + "gemmed"; verbObject.continuous = regex + "gemming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(get\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=get\b)/)[0]; verbObject.continuous = regex + "getting"; verbObject.singularPast = regex + "got"; verbObject.perfect = regex + "gotten"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ghostwrite\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ghostwrite\b)/)[0]; verbObject.perfect = regex + "ghostwritten"; verbObject.singularPast = regex + "ghostwrote"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(gib\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=gib\b)/)[0]; verbObject.singularPast = regex + "gibbed"; verbObject.continuous = regex + "gibbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(giddy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=giddy\b)/)[0]; verbObject.singularPast = regex + "giddied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(giftwrap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=giftwrap\b)/)[0]; verbObject.singularPast = regex + "giftwrapped"; verbObject.continuous = regex + "giftwrapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(gig\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=gig\b)/)[0]; verbObject.singularPast = regex + "gigged"; verbObject.continuous = regex + "gigging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(gin\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=gin\b)/)[0]; verbObject.singularPast = regex + "ginned"; verbObject.continuous = regex + "ginning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(gip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=gip\b)/)[0]; verbObject.singularPast = regex + "gipped"; verbObject.continuous = regex + "gipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(give\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=give\b)/)[0]; verbObject.singularPast = regex + "gave"; verbObject.perfect = regex + "given"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(glom\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=glom\b)/)[0]; verbObject.singularPast = regex + "glommed"; verbObject.continuous = regex + "glomming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(glorify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=glorify\b)/)[0]; verbObject.singularPast = regex + "glorified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(glory\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=glory\b)/)[0]; verbObject.singularPast = regex + "gloried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(glut\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=glut\b)/)[0]; verbObject.singularPast = regex + "glutted"; verbObject.continuous = regex + "glutting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(go\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=go\b)/)[0]; verbObject.perfect = regex + "gone"; verbObject.singularPast = regex + "went"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(golly\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=golly\b)/)[0]; verbObject.singularPast = regex + "gollied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(grab\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=grab\b)/)[0]; verbObject.singularPast = regex + "grabbed"; verbObject.continuous = regex + "grabbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(gratify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=gratify\b)/)[0]; verbObject.singularPast = regex + "gratified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(grave\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=grave\b)/)[0]; verbObject.perfect = regex + "graven"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(gravel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=gravel\b)/)[0]; verbObject.singularPast = regex + "gravelled"; verbObject.continuous = regex + "gravelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(grin\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=grin\b)/)[0]; verbObject.singularPast = regex + "grinned"; verbObject.continuous = regex + "grinning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(grind\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=grind\b)/)[0]; verbObject.singularPast = regex + "ground"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(grip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=grip\b)/)[0]; verbObject.singularPast = regex + "gripped"; verbObject.continuous = regex + "gripping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(grit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=grit\b)/)[0]; verbObject.singularPast = regex + "gritted"; verbObject.continuous = regex + "gritting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(grovel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=grovel\b)/)[0]; verbObject.singularPast = regex + "grovelled"; verbObject.continuous = regex + "grovelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(grow\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=grow\b)/)[0]; verbObject.singularPast = regex + "grew"; verbObject.perfect = regex + "grown"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(grub\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=grub\b)/)[0]; verbObject.singularPast = regex + "grubbed"; verbObject.continuous = regex + "grubbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(guaranty\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=guaranty\b)/)[0]; verbObject.singularPast = regex + "guarantied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(gully\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=gully\b)/)[0]; verbObject.singularPast = regex + "gullied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(gum\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=gum\b)/)[0]; verbObject.singularPast = regex + "gummed"; verbObject.continuous = regex + "gumming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(gun\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=gun\b)/)[0]; verbObject.singularPast = regex + "gunned"; verbObject.continuous = regex + "gunning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(gyp\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=gyp\b)/)[0]; verbObject.singularPast = regex + "gypped"; verbObject.continuous = regex + "gypping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hacksaw\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hacksaw\b)/)[0]; verbObject.perfect = regex + "hacksawn"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ham\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ham\b)/)[0]; verbObject.singularPast = regex + "hammed"; verbObject.continuous = regex + "hamming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hamstring\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hamstring\b)/)[0]; verbObject.singularPast = regex + "hamstrung"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(handfeed\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=handfeed\b)/)[0]; verbObject.singularPast = regex + "handfed"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(handicap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=handicap\b)/)[0]; verbObject.singularPast = regex + "handicapped"; verbObject.continuous = regex + "handicapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(handsel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=handsel\b)/)[0]; verbObject.singularPast = regex + "handselled"; verbObject.continuous = regex + "handselling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hang\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hang\b)/)[0]; verbObject.singularPast = regex + "hung"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(harry\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=harry\b)/)[0]; verbObject.singularPast = regex + "harried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hat\b)/)[0]; verbObject.singularPast = regex + "hatted"; verbObject.continuous = regex + "hatting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hatchel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hatchel\b)/)[0]; verbObject.singularPast = regex + "hatchelled"; verbObject.continuous = regex + "hatchelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(have\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=have\b)/)[0]; verbObject.singularPast = regex + "had"; verbObject.singularPresent = regex + "has"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hear\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hear\b)/)[0]; verbObject.singularPast = regex + "heard"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hedgehop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hedgehop\b)/)[0]; verbObject.singularPast = regex + "hedgehopped"; verbObject.continuous = regex + "hedgehopping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hem\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hem\b)/)[0]; verbObject.singularPast = regex + "hemmed"; verbObject.continuous = regex + "hemming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hew\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hew\b)/)[0]; verbObject.perfect = regex + "hewn"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hiccup\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hiccup\b)/)[0]; verbObject.singularPast = regex + "hiccupped"; verbObject.continuous = regex + "hiccupping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hide\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hide\b)/)[0]; verbObject.singularPast = regex + "hid"; verbObject.perfect = regex + "hidden"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hinny\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hinny\b)/)[0]; verbObject.singularPast = regex + "hinnied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hit\b)/)[0]; verbObject.continuous = regex + "hitting"; verbObject.singularPast = regex + "hit"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hob\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hob\b)/)[0]; verbObject.singularPast = regex + "hobbed"; verbObject.continuous = regex + "hobbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hobnob\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hobnob\b)/)[0]; verbObject.singularPast = regex + "hobnobbed"; verbObject.continuous = regex + "hobnobbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hocus\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hocus\b)/)[0]; verbObject.singularPast = regex + "hocussed"; verbObject.continuous = regex + "hocussing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hog\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hog\b)/)[0]; verbObject.singularPast = regex + "hogged"; verbObject.continuous = regex + "hogging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hogtie\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hogtie\b)/)[0]; verbObject.continuous = regex + "hogtying"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hold\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hold\b)/)[0]; verbObject.singularPast = regex + "held"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hop\b)/)[0]; verbObject.singularPast = regex + "hopped"; verbObject.continuous = regex + "hopping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(horrify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=horrify\b)/)[0]; verbObject.singularPast = regex + "horrified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(horsewhip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=horsewhip\b)/)[0]; verbObject.singularPast = regex + "horsewhipped"; verbObject.continuous = regex + "horsewhipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(housel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=housel\b)/)[0]; verbObject.singularPast = regex + "houselled"; verbObject.continuous = regex + "houselling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hovel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hovel\b)/)[0]; verbObject.singularPast = regex + "hovelled"; verbObject.continuous = regex + "hovelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hug\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hug\b)/)[0]; verbObject.singularPast = regex + "hugged"; verbObject.continuous = regex + "hugging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hum\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hum\b)/)[0]; verbObject.singularPast = regex + "hummed"; verbObject.continuous = regex + "humming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(humbug\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=humbug\b)/)[0]; verbObject.singularPast = regex + "humbugged"; verbObject.continuous = regex + "humbugging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(humidify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=humidify\b)/)[0]; verbObject.singularPast = regex + "humidified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hurry\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hurry\b)/)[0]; verbObject.singularPast = regex + "hurried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(hypertrophy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=hypertrophy\b)/)[0]; verbObject.singularPast = regex + "hypertrophied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(identify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=identify\b)/)[0]; verbObject.singularPast = regex + "identified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(imbed\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=imbed\b)/)[0]; verbObject.singularPast = regex + "imbedded"; verbObject.continuous = regex + "imbedding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(impanel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=impanel\b)/)[0]; verbObject.singularPast = regex + "impanelled"; verbObject.continuous = regex + "impanelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(impel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=impel\b)/)[0]; verbObject.singularPast = regex + "impelled"; verbObject.continuous = regex + "impelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(imply\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=imply\b)/)[0]; verbObject.singularPast = regex + "implied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(inbreed\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=inbreed\b)/)[0]; verbObject.singularPast = regex + "inbred"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(incur\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=incur\b)/)[0]; verbObject.singularPast = regex + "incurred"; verbObject.continuous = regex + "incurring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(indemnify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=indemnify\b)/)[0]; verbObject.singularPast = regex + "indemnified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(infer\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=infer\b)/)[0]; verbObject.singularPast = regex + "inferred"; verbObject.continuous = regex + "inferring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(initial\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=initial\b)/)[0]; verbObject.singularPast = regex + "initialled"; verbObject.continuous = regex + "initialling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(inlay\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=inlay\b)/)[0]; verbObject.singularPast = regex + "inlaid"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(inset\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=inset\b)/)[0]; verbObject.continuous = regex + "insetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(inspan\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=inspan\b)/)[0]; verbObject.singularPast = regex + "inspanned"; verbObject.continuous = regex + "inspanning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(install\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=install\b)/)[0]; verbObject.singularPast = regex + "installed"; verbObject.continuous = regex + "installing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(intensify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=intensify\b)/)[0]; verbObject.singularPast = regex + "intensified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(inter\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=inter\b)/)[0]; verbObject.singularPast = regex + "interred"; verbObject.continuous = regex + "interring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(intermit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=intermit\b)/)[0]; verbObject.singularPast = regex + "intermitted"; verbObject.continuous = regex + "intermitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(intromit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=intromit\b)/)[0]; verbObject.singularPast = regex + "intromitted"; verbObject.continuous = regex + "intromitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(inweave\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=inweave\b)/)[0]; verbObject.singularPast = regex + "inwove"; verbObject.perfect = regex + "inwoven"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(inwrap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=inwrap\b)/)[0]; verbObject.singularPast = regex + "inwrapped"; verbObject.continuous = regex + "inwrapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(jab\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=jab\b)/)[0]; verbObject.singularPast = regex + "jabbed"; verbObject.continuous = regex + "jabbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(jag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=jag\b)/)[0]; verbObject.singularPast = regex + "jagged"; verbObject.continuous = regex + "jagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(jam\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=jam\b)/)[0]; verbObject.singularPast = regex + "jammed"; verbObject.continuous = regex + "jamming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(japan\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=japan\b)/)[0]; verbObject.singularPast = regex + "japanned"; verbObject.continuous = regex + "japanning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(jar\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=jar\b)/)[0]; verbObject.singularPast = regex + "jarred"; verbObject.continuous = regex + "jarring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(jellify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=jellify\b)/)[0]; verbObject.singularPast = regex + "jellified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(jelly\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=jelly\b)/)[0]; verbObject.singularPast = regex + "jellied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(jemmy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=jemmy\b)/)[0]; verbObject.singularPast = regex + "jemmied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(jet\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=jet\b)/)[0]; verbObject.singularPast = regex + "jetted"; verbObject.continuous = regex + "jetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(jewel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=jewel\b)/)[0]; verbObject.singularPast = regex + "jewelled"; verbObject.continuous = regex + "jewelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(jib\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=jib\b)/)[0]; verbObject.singularPast = regex + "jibbed"; verbObject.continuous = regex + "jibbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(jig\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=jig\b)/)[0]; verbObject.singularPast = regex + "jigged"; verbObject.continuous = regex + "jigging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(jimmy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=jimmy\b)/)[0]; verbObject.singularPast = regex + "jimmied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(jitterbug\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=jitterbug\b)/)[0]; verbObject.singularPast = regex + "jitterbugged"; verbObject.continuous = regex + "jitterbugging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(job\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=job\b)/)[0]; verbObject.singularPast = regex + "jobbed"; verbObject.continuous = regex + "jobbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(jog\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=jog\b)/)[0]; verbObject.singularPast = regex + "jogged"; verbObject.continuous = regex + "jogging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(jollify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=jollify\b)/)[0]; verbObject.singularPast = regex + "jollified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(jolly\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=jolly\b)/)[0]; verbObject.singularPast = regex + "jollied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(jot\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=jot\b)/)[0]; verbObject.singularPast = regex + "jotted"; verbObject.continuous = regex + "jotting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(joypop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=joypop\b)/)[0]; verbObject.singularPast = regex + "joypopped"; verbObject.continuous = regex + "joypopping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(jug\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=jug\b)/)[0]; verbObject.singularPast = regex + "jugged"; verbObject.continuous = regex + "jugging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(justify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=justify\b)/)[0]; verbObject.singularPast = regex + "justified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(jut\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=jut\b)/)[0]; verbObject.singularPast = regex + "jutted"; verbObject.continuous = regex + "jutting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(keep\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=keep\b)/)[0]; verbObject.singularPast = regex + "kept"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ken\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ken\b)/)[0]; verbObject.singularPast = regex + "kenned"; verbObject.continuous = regex + "kenning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(kennel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=kennel\b)/)[0]; verbObject.singularPast = regex + "kennelled"; verbObject.continuous = regex + "kennelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(kernel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=kernel\b)/)[0]; verbObject.singularPast = regex + "kernelled"; verbObject.continuous = regex + "kernelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(kid\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=kid\b)/)[0]; verbObject.singularPast = regex + "kidded"; verbObject.continuous = regex + "kidding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(kidnap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=kidnap\b)/)[0]; verbObject.singularPast = regex + "kidnapped"; verbObject.continuous = regex + "kidnapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(kip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=kip\b)/)[0]; verbObject.singularPast = regex + "kipped"; verbObject.continuous = regex + "kipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(knap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=knap\b)/)[0]; verbObject.singularPast = regex + "knapped"; verbObject.continuous = regex + "knapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(kneecap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=kneecap\b)/)[0]; verbObject.singularPast = regex + "kneecapped"; verbObject.continuous = regex + "kneecapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(knit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=knit\b)/)[0]; verbObject.singularPast = regex + "knitted"; verbObject.continuous = regex + "knitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(knob\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=knob\b)/)[0]; verbObject.singularPast = regex + "knobbed"; verbObject.continuous = regex + "knobbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(knot\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=knot\b)/)[0]; verbObject.singularPast = regex + "knotted"; verbObject.continuous = regex + "knotting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(know\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=know\b)/)[0]; verbObject.singularPast = regex + "knew"; verbObject.perfect = regex + "known"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ko\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ko\b)/)[0]; verbObject.singularPresent = regex + "ko's"; verbObject.singularPast = regex + "ko'd"; verbObject.continuous = regex + "ko'ing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(label\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=label\b)/)[0]; verbObject.singularPast = regex + "labelled"; verbObject.continuous = regex + "labelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(lade\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=lade\b)/)[0]; verbObject.perfect = regex + "laden"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ladify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ladify\b)/)[0]; verbObject.singularPast = regex + "ladyfied"; verbObject.singularPresent = regex + "ladyfies"; verbObject.continuous = regex + "ladyfying"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(lag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=lag\b)/)[0]; verbObject.singularPast = regex + "lagged"; verbObject.continuous = regex + "lagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(lallygag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=lallygag\b)/)[0]; verbObject.singularPast = regex + "lallygagged"; verbObject.continuous = regex + "lallygagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(lam\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=lam\b)/)[0]; verbObject.singularPast = regex + "lammed"; verbObject.continuous = regex + "lamming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(lap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=lap\b)/)[0]; verbObject.singularPast = regex + "lapped"; verbObject.continuous = regex + "lapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(lapidify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=lapidify\b)/)[0]; verbObject.singularPast = regex + "lapidified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(laurel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=laurel\b)/)[0]; verbObject.singularPast = regex + "laurelled"; verbObject.continuous = regex + "laurelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(lay\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=lay\b)/)[0]; verbObject.singularPast = regex + "laid"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(lead\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=lead\b)/)[0]; verbObject.singularPast = regex + "led"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(leapfrog\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=leapfrog\b)/)[0]; verbObject.singularPast = regex + "leapfrogged"; verbObject.continuous = regex + "leapfrogging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(leave\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=leave\b)/)[0]; verbObject.singularPast = regex + "left"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(lend\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=lend\b)/)[0]; verbObject.singularPast = regex + "lent"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(let\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=let\b)/)[0]; verbObject.continuous = regex + "letting"; verbObject.singularPast = regex + "let"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(level\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=level\b)/)[0]; verbObject.singularPast = regex + "levelled"; verbObject.continuous = regex + "levelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(levy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=levy\b)/)[0]; verbObject.singularPast = regex + "levied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(libel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=libel\b)/)[0]; verbObject.singularPast = regex + "libelled"; verbObject.continuous = regex + "libelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(lie\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=lie\b)/)[0]; verbObject.perfect = regex + "lain"; verbObject.singularPast = regex + "lay"; verbObject.continuous = regex + "lying"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(light\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=light\b)/)[0]; verbObject.singularPast = regex + "lit"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(lignify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=lignify\b)/)[0]; verbObject.singularPast = regex + "lignified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(lip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=lip\b)/)[0]; verbObject.singularPast = regex + "lipped"; verbObject.continuous = regex + "lipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(liquefy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=liquefy\b)/)[0]; verbObject.singularPast = regex + "liquefied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(liquify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=liquify\b)/)[0]; verbObject.singularPast = regex + "liquified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(lob\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=lob\b)/)[0]; verbObject.singularPast = regex + "lobbed"; verbObject.continuous = regex + "lobbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(lobby\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=lobby\b)/)[0]; verbObject.singularPast = regex + "lobbied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(log\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=log\b)/)[0]; verbObject.singularPast = regex + "logged"; verbObject.continuous = regex + "logging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(lop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=lop\b)/)[0]; verbObject.singularPast = regex + "lopped"; verbObject.continuous = regex + "lopping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(lose\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=lose\b)/)[0]; verbObject.singularPast = regex + "lost"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(lot\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=lot\b)/)[0]; verbObject.singularPast = regex + "lotted"; verbObject.continuous = regex + "lotting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(lug\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=lug\b)/)[0]; verbObject.singularPast = regex + "lugged"; verbObject.continuous = regex + "lugging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(lullaby\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=lullaby\b)/)[0]; verbObject.singularPast = regex + "lullabied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(mad\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=mad\b)/)[0]; verbObject.singularPast = regex + "madded"; verbObject.continuous = regex + "madding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(magnify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=magnify\b)/)[0]; verbObject.singularPast = regex + "magnified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(make\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=make\b)/)[0]; verbObject.singularPast = regex + "made"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(man\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=man\b)/)[0]; verbObject.singularPast = regex + "manned"; verbObject.continuous = regex + "manning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(manumit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=manumit\b)/)[0]; verbObject.singularPast = regex + "manumitted"; verbObject.continuous = regex + "manumitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(map\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=map\b)/)[0]; verbObject.singularPast = regex + "mapped"; verbObject.continuous = regex + "mapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(mar\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=mar\b)/)[0]; verbObject.singularPast = regex + "marred"; verbObject.continuous = regex + "marring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(marcel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=marcel\b)/)[0]; verbObject.singularPast = regex + "marcelled"; verbObject.continuous = regex + "marcelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(marry\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=marry\b)/)[0]; verbObject.singularPast = regex + "married"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(marshal\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=marshal\b)/)[0]; verbObject.singularPast = regex + "marshalled"; verbObject.continuous = regex + "marshalling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(marvel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=marvel\b)/)[0]; verbObject.singularPast = regex + "marvelled"; verbObject.continuous = regex + "marvelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(mat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=mat\b)/)[0]; verbObject.singularPast = regex + "matted"; verbObject.continuous = regex + "matting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(mean\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=mean\b)/)[0]; verbObject.singularPast = regex + "meant"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(medal\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=medal\b)/)[0]; verbObject.singularPast = regex + "medalled"; verbObject.continuous = regex + "medalling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(meet\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=meet\b)/)[0]; verbObject.singularPast = regex + "met"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(metal\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=metal\b)/)[0]; verbObject.singularPast = regex + "metalled"; verbObject.continuous = regex + "metalling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(metrify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=metrify\b)/)[0]; verbObject.singularPast = regex + "metrified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(mimic\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=mimic\b)/)[0]; verbObject.singularPast = regex + "mimicked"; verbObject.continuous = regex + "mimicking"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(minify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=minify\b)/)[0]; verbObject.singularPast = regex + "minified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(mob\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=mob\b)/)[0]; verbObject.singularPast = regex + "mobbed"; verbObject.continuous = regex + "mobbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(model\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=model\b)/)[0]; verbObject.singularPast = regex + "modelled"; verbObject.continuous = regex + "modelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(modify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=modify\b)/)[0]; verbObject.singularPast = regex + "modified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(mollify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=mollify\b)/)[0]; verbObject.singularPast = regex + "mollified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(mop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=mop\b)/)[0]; verbObject.singularPast = regex + "mopped"; verbObject.continuous = regex + "mopping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(mortify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=mortify\b)/)[0]; verbObject.singularPast = regex + "mortified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(mow\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=mow\b)/)[0]; verbObject.perfect = regex + "mown"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(mud\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=mud\b)/)[0]; verbObject.singularPast = regex + "mudded"; verbObject.continuous = regex + "mudding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(muddy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=muddy\b)/)[0]; verbObject.singularPast = regex + "muddied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(mug\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=mug\b)/)[0]; verbObject.singularPast = regex + "mugged"; verbObject.continuous = regex + "mugging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(multiply\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=multiply\b)/)[0]; verbObject.singularPast = regex + "multiplied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(mum\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=mum\b)/)[0]; verbObject.singularPast = regex + "mummed"; verbObject.continuous = regex + "mumming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(mummify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=mummify\b)/)[0]; verbObject.singularPast = regex + "mummified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(mutiny\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=mutiny\b)/)[0]; verbObject.singularPast = regex + "mutinied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(mystify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=mystify\b)/)[0]; verbObject.singularPast = regex + "mystified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(nab\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=nab\b)/)[0]; verbObject.singularPast = regex + "nabbed"; verbObject.continuous = regex + "nabbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(nag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=nag\b)/)[0]; verbObject.singularPast = regex + "nagged"; verbObject.continuous = regex + "nagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(nap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=nap\b)/)[0]; verbObject.singularPast = regex + "napped"; verbObject.continuous = regex + "napping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(net\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=net\b)/)[0]; verbObject.singularPast = regex + "netted"; verbObject.continuous = regex + "netting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(nib\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=nib\b)/)[0]; verbObject.singularPast = regex + "nibbed"; verbObject.continuous = regex + "nibbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(nickel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=nickel\b)/)[0]; verbObject.singularPast = regex + "nickelled"; verbObject.continuous = regex + "nickelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(nidify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=nidify\b)/)[0]; verbObject.singularPast = regex + "nidified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(nigrify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=nigrify\b)/)[0]; verbObject.singularPast = regex + "nigrified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(nip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=nip\b)/)[0]; verbObject.singularPast = regex + "nipped"; verbObject.continuous = regex + "nipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(nitrify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=nitrify\b)/)[0]; verbObject.singularPast = regex + "nitrified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(nod\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=nod\b)/)[0]; verbObject.singularPast = regex + "nodded"; verbObject.continuous = regex + "nodding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(nonplus\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=nonplus\b)/)[0]; verbObject.singularPast = regex + "nonplussed"; verbObject.singularPresent = regex + "nonplusses"; verbObject.continuous = regex + "nonplussing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(notify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=notify\b)/)[0]; verbObject.singularPast = regex + "notified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(nullify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=nullify\b)/)[0]; verbObject.singularPast = regex + "nullified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(nut\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=nut\b)/)[0]; verbObject.singularPast = regex + "nutted"; verbObject.continuous = regex + "nutting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(objectify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=objectify\b)/)[0]; verbObject.singularPast = regex + "objectified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(occupy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=occupy\b)/)[0]; verbObject.singularPast = regex + "occupied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(occur\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=occur\b)/)[0]; verbObject.singularPast = regex + "occurred"; verbObject.continuous = regex + "occurring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(offset\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=offset\b)/)[0]; verbObject.continuous = regex + "offsetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(omit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=omit\b)/)[0]; verbObject.singularPast = regex + "omitted"; verbObject.continuous = regex + "omitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ossify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ossify\b)/)[0]; verbObject.singularPast = regex + "ossified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pacify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pacify\b)/)[0]; verbObject.singularPast = regex + "pacified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pad\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pad\b)/)[0]; verbObject.singularPast = regex + "padded"; verbObject.continuous = regex + "padding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pal\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pal\b)/)[0]; verbObject.singularPast = regex + "palled"; verbObject.continuous = regex + "palling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(palsy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=palsy\b)/)[0]; verbObject.singularPast = regex + "palsied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pan\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pan\b)/)[0]; verbObject.singularPast = regex + "panned"; verbObject.continuous = regex + "panning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pandy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pandy\b)/)[0]; verbObject.singularPast = regex + "pandied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(panel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=panel\b)/)[0]; verbObject.singularPast = regex + "panelled"; verbObject.continuous = regex + "panelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(panic\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=panic\b)/)[0]; verbObject.singularPast = regex + "panicked"; verbObject.continuous = regex + "panicking"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(parallel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=parallel\b)/)[0]; verbObject.singularPast = regex + "parallelled"; verbObject.continuous = regex + "parallelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(parcel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=parcel\b)/)[0]; verbObject.singularPast = regex + "parcelled"; verbObject.continuous = regex + "parcelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(parody\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=parody\b)/)[0]; verbObject.singularPast = regex + "parodied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(parry\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=parry\b)/)[0]; verbObject.singularPast = regex + "parried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(partake\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=partake\b)/)[0]; verbObject.perfect = regex + "partaken"; verbObject.singularPast = regex + "partook"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pat\b)/)[0]; verbObject.singularPast = regex + "patted"; verbObject.continuous = regex + "patting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(patrol\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=patrol\b)/)[0]; verbObject.singularPast = regex + "patrolled"; verbObject.continuous = regex + "patrolling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pay\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pay\b)/)[0]; verbObject.singularPast = regex + "paid"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pedal\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pedal\b)/)[0]; verbObject.singularPast = regex + "pedalled"; verbObject.continuous = regex + "pedalling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(peg\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=peg\b)/)[0]; verbObject.singularPast = regex + "pegged"; verbObject.continuous = regex + "pegging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pen\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pen\b)/)[0]; verbObject.singularPast = regex + "penned"; verbObject.continuous = regex + "penning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pencil\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pencil\b)/)[0]; verbObject.singularPast = regex + "pencilled"; verbObject.continuous = regex + "pencilling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pep\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pep\b)/)[0]; verbObject.singularPast = regex + "pepped"; verbObject.continuous = regex + "pepping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(permit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=permit\b)/)[0]; verbObject.singularPast = regex + "permitted"; verbObject.continuous = regex + "permitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(personify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=personify\b)/)[0]; verbObject.singularPast = regex + "personified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pet\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pet\b)/)[0]; verbObject.singularPast = regex + "petted"; verbObject.continuous = regex + "petting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(petrify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=petrify\b)/)[0]; verbObject.singularPast = regex + "petrified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pettifog\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pettifog\b)/)[0]; verbObject.singularPast = regex + "pettifogged"; verbObject.continuous = regex + "pettifogging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(phantasy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=phantasy\b)/)[0]; verbObject.singularPast = regex + "phantasied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(photocopy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=photocopy\b)/)[0]; verbObject.singularPast = regex + "photocopied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(photomap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=photomap\b)/)[0]; verbObject.singularPast = regex + "photomapped"; verbObject.continuous = regex + "photomapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(photoset\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=photoset\b)/)[0]; verbObject.continuous = regex + "photosetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(physic\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=physic\b)/)[0]; verbObject.singularPast = regex + "physicked"; verbObject.continuous = regex + "physicking"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(picnic\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=picnic\b)/)[0]; verbObject.singularPast = regex + "picnicked"; verbObject.continuous = regex + "picnicking"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pig\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pig\b)/)[0]; verbObject.singularPast = regex + "pigged"; verbObject.continuous = regex + "pigging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pillory\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pillory\b)/)[0]; verbObject.singularPast = regex + "pilloried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pin\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pin\b)/)[0]; verbObject.singularPast = regex + "pinned"; verbObject.continuous = regex + "pinning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pip\b)/)[0]; verbObject.singularPast = regex + "pipped"; verbObject.continuous = regex + "pipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pistol\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pistol\b)/)[0]; verbObject.singularPast = regex + "pistolled"; verbObject.continuous = regex + "pistolling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pit\b)/)[0]; verbObject.singularPast = regex + "pitted"; verbObject.continuous = regex + "pitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pitapat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pitapat\b)/)[0]; verbObject.singularPast = regex + "pitapatted"; verbObject.continuous = regex + "pitapatting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pity\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pity\b)/)[0]; verbObject.singularPast = regex + "pitied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(plan\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=plan\b)/)[0]; verbObject.singularPast = regex + "planned"; verbObject.continuous = regex + "planning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(plat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=plat\b)/)[0]; verbObject.singularPast = regex + "platted"; verbObject.continuous = regex + "platting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(plead\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=plead\b)/)[0]; verbObject.singularPast = regex + "pled"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(plod\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=plod\b)/)[0]; verbObject.singularPast = regex + "plodded"; verbObject.continuous = regex + "plodding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(plop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=plop\b)/)[0]; verbObject.singularPast = regex + "plopped"; verbObject.continuous = regex + "plopping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(plot\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=plot\b)/)[0]; verbObject.singularPast = regex + "plotted"; verbObject.continuous = regex + "plotting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(plug\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=plug\b)/)[0]; verbObject.singularPast = regex + "plugged"; verbObject.continuous = regex + "plugging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ply\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ply\b)/)[0]; verbObject.singularPast = regex + "plied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pod\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pod\b)/)[0]; verbObject.singularPast = regex + "podded"; verbObject.continuous = regex + "podding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pommel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pommel\b)/)[0]; verbObject.singularPast = regex + "pommelled"; verbObject.continuous = regex + "pommelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pop\b)/)[0]; verbObject.singularPast = regex + "popped"; verbObject.continuous = regex + "popping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pot\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pot\b)/)[0]; verbObject.singularPast = regex + "potted"; verbObject.continuous = regex + "potting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(preachify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=preachify\b)/)[0]; verbObject.singularPast = regex + "preachified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(prefer\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=prefer\b)/)[0]; verbObject.singularPast = regex + "preferred"; verbObject.continuous = regex + "preferring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pretermit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pretermit\b)/)[0]; verbObject.singularPast = regex + "pretermitted"; verbObject.continuous = regex + "pretermitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(prettify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=prettify\b)/)[0]; verbObject.singularPast = regex + "prettified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pretty\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pretty\b)/)[0]; verbObject.singularPast = regex + "prettied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(prig\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=prig\b)/)[0]; verbObject.singularPast = regex + "prigged"; verbObject.continuous = regex + "prigging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(prim\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=prim\b)/)[0]; verbObject.singularPast = regex + "primmed"; verbObject.continuous = regex + "primming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(prod\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=prod\b)/)[0]; verbObject.singularPast = regex + "prodded"; verbObject.continuous = regex + "prodding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(program\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=program\b)/)[0]; verbObject.singularPast = regex + "programmed"; verbObject.continuous = regex + "programming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(prop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=prop\b)/)[0]; verbObject.singularPast = regex + "propped"; verbObject.continuous = regex + "propping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(propel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=propel\b)/)[0]; verbObject.singularPast = regex + "propelled"; verbObject.continuous = regex + "propelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(prophesy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=prophesy\b)/)[0]; verbObject.singularPast = regex + "prophesied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pry\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pry\b)/)[0]; verbObject.singularPast = regex + "pried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pub\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pub\b)/)[0]; verbObject.singularPast = regex + "pubbed"; verbObject.continuous = regex + "pubbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pug\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pug\b)/)[0]; verbObject.singularPast = regex + "pugged"; verbObject.continuous = regex + "pugging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pummel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pummel\b)/)[0]; verbObject.singularPast = regex + "pummelled"; verbObject.continuous = regex + "pummelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pun\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pun\b)/)[0]; verbObject.singularPast = regex + "punned"; verbObject.continuous = regex + "punning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(pup\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=pup\b)/)[0]; verbObject.singularPast = regex + "pupped"; verbObject.continuous = regex + "pupping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(purify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=purify\b)/)[0]; verbObject.singularPast = regex + "purified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(put\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=put\b)/)[0]; verbObject.continuous = regex + "putting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(putrefy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=putrefy\b)/)[0]; verbObject.singularPast = regex + "putrefied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(putty\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=putty\b)/)[0]; verbObject.singularPast = regex + "puttied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(qualify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=qualify\b)/)[0]; verbObject.singularPast = regex + "qualified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(quantify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=quantify\b)/)[0]; verbObject.singularPast = regex + "quantified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(quarrel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=quarrel\b)/)[0]; verbObject.singularPast = regex + "quarrelled"; verbObject.continuous = regex + "quarrelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(quarry\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=quarry\b)/)[0]; verbObject.singularPast = regex + "quarried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(quartersaw\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=quartersaw\b)/)[0]; verbObject.perfect = regex + "quartersawn"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(query\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=query\b)/)[0]; verbObject.singularPast = regex + "queried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(quickstep\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=quickstep\b)/)[0]; verbObject.singularPast = regex + "quickstepped"; verbObject.continuous = regex + "quickstepping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(quip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=quip\b)/)[0]; verbObject.singularPast = regex + "quipped"; verbObject.continuous = regex + "quipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(quit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=quit\b)/)[0]; verbObject.singularPast = regex + "quitted"; verbObject.continuous = regex + "quitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(quiz\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=quiz\b)/)[0]; verbObject.singularPast = regex + "quizzed"; verbObject.singularPresent = regex + "quizzes"; verbObject.continuous = regex + "quizzing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rag\b)/)[0]; verbObject.singularPast = regex + "ragged"; verbObject.continuous = regex + "ragging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rally\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rally\b)/)[0]; verbObject.singularPast = regex + "rallied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ram\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ram\b)/)[0]; verbObject.singularPast = regex + "rammed"; verbObject.continuous = regex + "ramming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ramify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ramify\b)/)[0]; verbObject.singularPast = regex + "ramified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rap\b)/)[0]; verbObject.singularPast = regex + "rapped"; verbObject.continuous = regex + "rapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rappel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rappel\b)/)[0]; verbObject.singularPast = regex + "rappelled"; verbObject.continuous = regex + "rappelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rarefy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rarefy\b)/)[0]; verbObject.singularPast = regex + "rarefied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rat\b)/)[0]; verbObject.singularPast = regex + "ratted"; verbObject.continuous = regex + "ratting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ratify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ratify\b)/)[0]; verbObject.singularPast = regex + "ratified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ravel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ravel\b)/)[0]; verbObject.singularPast = regex + "ravelled"; verbObject.continuous = regex + "ravelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(reave\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=reave\b)/)[0]; verbObject.singularPast = regex + "reft"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rebel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rebel\b)/)[0]; verbObject.singularPast = regex + "rebelled"; verbObject.continuous = regex + "rebelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rectify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rectify\b)/)[0]; verbObject.singularPast = regex + "rectified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(recur\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=recur\b)/)[0]; verbObject.singularPast = regex + "recurred"; verbObject.continuous = regex + "recurring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(red\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=red\b)/)[0]; verbObject.singularPast = regex + "redded"; verbObject.continuous = regex + "redding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(redd\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=redd\b)/)[0]; verbObject.singularPast = regex + "redded"; verbObject.continuous = regex + "redding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(refer\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=refer\b)/)[0]; verbObject.singularPast = regex + "referred"; verbObject.continuous = regex + "referring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(regret\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=regret\b)/)[0]; verbObject.singularPast = regex + "regretted"; verbObject.continuous = regex + "regretting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(reify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=reify\b)/)[0]; verbObject.singularPast = regex + "reified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rely\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rely\b)/)[0]; verbObject.singularPast = regex + "relied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(remit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=remit\b)/)[0]; verbObject.singularPast = regex + "remitted"; verbObject.continuous = regex + "remitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(repel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=repel\b)/)[0]; verbObject.singularPast = regex + "repelled"; verbObject.continuous = regex + "repelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(replevy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=replevy\b)/)[0]; verbObject.singularPast = regex + "replevied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(reply\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=reply\b)/)[0]; verbObject.singularPast = regex + "replied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ret\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ret\b)/)[0]; verbObject.singularPast = regex + "retted"; verbObject.continuous = regex + "retting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(retrofit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=retrofit\b)/)[0]; verbObject.singularPast = regex + "retrofitted"; verbObject.continuous = regex + "retrofitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rev\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rev\b)/)[0]; verbObject.singularPast = regex + "revved"; verbObject.continuous = regex + "revving"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(revel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=revel\b)/)[0]; verbObject.singularPast = regex + "revelled"; verbObject.continuous = regex + "revelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(revet\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=revet\b)/)[0]; verbObject.singularPast = regex + "revetted"; verbObject.continuous = regex + "revetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rib\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rib\b)/)[0]; verbObject.singularPast = regex + "ribbed"; verbObject.continuous = regex + "ribbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ricochet\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ricochet\b)/)[0]; verbObject.singularPast = regex + "ricochetted"; verbObject.continuous = regex + "ricochetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rid\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rid\b)/)[0]; verbObject.singularPast = regex + "ridded"; verbObject.continuous = regex + "ridding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ride\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ride\b)/)[0]; verbObject.perfect = regex + "ridden"; verbObject.singularPast = regex + "rode"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rig\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rig\b)/)[0]; verbObject.singularPast = regex + "rigged"; verbObject.continuous = regex + "rigging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rigidify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rigidify\b)/)[0]; verbObject.singularPast = regex + "rigidified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rim\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rim\b)/)[0]; verbObject.singularPast = regex + "rimmed"; verbObject.continuous = regex + "rimming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ring\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ring\b)/)[0]; verbObject.singularPast = regex + "rang"; verbObject.perfect = regex + "rung"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rip\b)/)[0]; verbObject.singularPast = regex + "ripped"; verbObject.continuous = regex + "ripping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rise\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rise\b)/)[0]; verbObject.perfect = regex + "risen"; verbObject.singularPast = regex + "rose"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rival\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rival\b)/)[0]; verbObject.singularPast = regex + "rivalled"; verbObject.continuous = regex + "rivalling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rive\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rive\b)/)[0]; verbObject.perfect = regex + "riven"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rob\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rob\b)/)[0]; verbObject.singularPast = regex + "robbed"; verbObject.continuous = regex + "robbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rot\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rot\b)/)[0]; verbObject.singularPast = regex + "rotted"; verbObject.continuous = regex + "rotting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rowel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rowel\b)/)[0]; verbObject.singularPast = regex + "rowelled"; verbObject.continuous = regex + "rowelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rub\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rub\b)/)[0]; verbObject.singularPast = regex + "rubbed"; verbObject.continuous = regex + "rubbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(run\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=run\b)/)[0]; verbObject.singularPast = regex + "ran"; verbObject.continuous = regex + "running"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(rut\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=rut\b)/)[0]; verbObject.singularPast = regex + "rutted"; verbObject.continuous = regex + "rutting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(saccharify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=saccharify\b)/)[0]; verbObject.singularPast = regex + "saccharified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sag\b)/)[0]; verbObject.singularPast = regex + "sagged"; verbObject.continuous = regex + "sagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(salary\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=salary\b)/)[0]; verbObject.singularPast = regex + "salaried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(salify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=salify\b)/)[0]; verbObject.singularPast = regex + "salified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sally\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sally\b)/)[0]; verbObject.singularPast = regex + "sallied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sanctify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sanctify\b)/)[0]; verbObject.singularPast = regex + "sanctified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sandbag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sandbag\b)/)[0]; verbObject.singularPast = regex + "sandbagged"; verbObject.continuous = regex + "sandbagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sap\b)/)[0]; verbObject.singularPast = regex + "sapped"; verbObject.continuous = regex + "sapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(saponify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=saponify\b)/)[0]; verbObject.singularPast = regex + "saponified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(satisfy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=satisfy\b)/)[0]; verbObject.singularPast = regex + "satisfied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(savvy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=savvy\b)/)[0]; verbObject.singularPast = regex + "savvied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(saw\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=saw\b)/)[0]; verbObject.perfect = regex + "sawn"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(say\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=say\b)/)[0]; verbObject.singularPast = regex + "said"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(scag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=scag\b)/)[0]; verbObject.singularPast = regex + "scagged"; verbObject.continuous = regex + "scagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(scan\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=scan\b)/)[0]; verbObject.singularPast = regex + "scanned"; verbObject.continuous = regex + "scanning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(scar\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=scar\b)/)[0]; verbObject.singularPast = regex + "scarred"; verbObject.continuous = regex + "scarring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(scarify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=scarify\b)/)[0]; verbObject.singularPast = regex + "scarified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(scat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=scat\b)/)[0]; verbObject.singularPast = regex + "scatted"; verbObject.continuous = regex + "scatting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(scorify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=scorify\b)/)[0]; verbObject.singularPast = regex + "scorified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(scrag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=scrag\b)/)[0]; verbObject.singularPast = regex + "scragged"; verbObject.continuous = regex + "scragging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(scram\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=scram\b)/)[0]; verbObject.singularPast = regex + "scrammed"; verbObject.continuous = regex + "scramming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(scrap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=scrap\b)/)[0]; verbObject.singularPast = regex + "scrapped"; verbObject.continuous = regex + "scrapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(scrub\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=scrub\b)/)[0]; verbObject.singularPast = regex + "scrubbed"; verbObject.continuous = regex + "scrubbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(scrum\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=scrum\b)/)[0]; verbObject.singularPast = regex + "scrummed"; verbObject.continuous = regex + "scrumming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(scry\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=scry\b)/)[0]; verbObject.singularPast = regex + "scried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(scud\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=scud\b)/)[0]; verbObject.singularPast = regex + "scudded"; verbObject.continuous = regex + "scudding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(scum\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=scum\b)/)[0]; verbObject.singularPast = regex + "scummed"; verbObject.continuous = regex + "scumming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(scurry\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=scurry\b)/)[0]; verbObject.singularPast = regex + "scurried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(see\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=see\b)/)[0]; verbObject.singularPast = regex + "saw"; verbObject.perfect = regex + "seen"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(seek\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=seek\b)/)[0]; verbObject.singularPast = regex + "sought"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sell\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sell\b)/)[0]; verbObject.singularPast = regex + "sold"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(send\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=send\b)/)[0]; verbObject.singularPast = regex + "sent"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(set\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=set\b)/)[0]; verbObject.continuous = regex + "setting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sew\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sew\b)/)[0]; verbObject.perfect = regex + "sewn"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shag\b)/)[0]; verbObject.singularPast = regex + "shagged"; verbObject.continuous = regex + "shagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shake\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shake\b)/)[0]; verbObject.perfect = regex + "shaken"; verbObject.singularPast = regex + "shook"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sham\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sham\b)/)[0]; verbObject.singularPast = regex + "shammed"; verbObject.continuous = regex + "shamming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sharecrop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sharecrop\b)/)[0]; verbObject.singularPast = regex + "sharecropped"; verbObject.continuous = regex + "sharecropping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shed\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shed\b)/)[0]; verbObject.singularPast = regex + "shed"; verbObject.continuous = regex + "shedding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shellac\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shellac\b)/)[0]; verbObject.singularPast = regex + "shellacked"; verbObject.continuous = regex + "shellacking"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shew\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shew\b)/)[0]; verbObject.perfect = regex + "shewn"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shikar\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shikar\b)/)[0]; verbObject.singularPast = regex + "shikarred"; verbObject.continuous = regex + "shikarring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shillyshally\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shillyshally\b)/)[0]; verbObject.singularPast = regex + "shillyshallied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shim\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shim\b)/)[0]; verbObject.singularPast = regex + "shimmed"; verbObject.continuous = regex + "shimming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shimmy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shimmy\b)/)[0]; verbObject.singularPast = regex + "shimmied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shin\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shin\b)/)[0]; verbObject.singularPast = regex + "shinned"; verbObject.continuous = regex + "shinning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shine\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shine\b)/)[0]; verbObject.singularPast = regex + "shone"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ship\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ship\b)/)[0]; verbObject.singularPast = regex + "shipped"; verbObject.continuous = regex + "shipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shit\b)/)[0]; verbObject.singularPast = regex + "shat"; verbObject.continuous = regex + "shitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shoe\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shoe\b)/)[0]; verbObject.singularPast = regex + "shod"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shoot\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shoot\b)/)[0]; verbObject.singularPast = regex + "shot"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shop\b)/)[0]; verbObject.singularPast = regex + "shopped"; verbObject.continuous = regex + "shopping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shot\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shot\b)/)[0]; verbObject.singularPast = regex + "shotted"; verbObject.continuous = regex + "shotting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shotgun\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shotgun\b)/)[0]; verbObject.singularPast = regex + "shotgunned"; verbObject.continuous = regex + "shotgunning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shovel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shovel\b)/)[0]; verbObject.singularPast = regex + "shovelled"; verbObject.continuous = regex + "shovelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(show\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=show\b)/)[0]; verbObject.perfect = regex + "shown"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shred\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shred\b)/)[0]; verbObject.singularPast = regex + "shredded"; verbObject.continuous = regex + "shredding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shrink\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shrink\b)/)[0]; verbObject.singularPast = regex + "shrank"; verbObject.perfect = regex + "shrunk"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shrive\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shrive\b)/)[0]; verbObject.perfect = regex + "shriven"; verbObject.singularPast = regex + "shrove"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shrivel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shrivel\b)/)[0]; verbObject.singularPast = regex + "shrivelled"; verbObject.continuous = regex + "shrivelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shrug\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shrug\b)/)[0]; verbObject.singularPast = regex + "shrugged"; verbObject.continuous = regex + "shrugging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shun\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shun\b)/)[0]; verbObject.singularPast = regex + "shunned"; verbObject.continuous = regex + "shunning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shut\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shut\b)/)[0]; verbObject.continuous = regex + "shutting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(shy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=shy\b)/)[0]; verbObject.singularPast = regex + "shied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sic\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sic\b)/)[0]; verbObject.singularPast = regex + "sicked"; verbObject.continuous = regex + "sicking"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sideslip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sideslip\b)/)[0]; verbObject.singularPast = regex + "sideslipped"; verbObject.continuous = regex + "sideslipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sidestep\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sidestep\b)/)[0]; verbObject.singularPast = regex + "sidestepped"; verbObject.continuous = regex + "sidestepping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sightsee\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sightsee\b)/)[0]; verbObject.singularPast = regex + "sightsaw"; verbObject.perfect = regex + "sightseen"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(signal\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=signal\b)/)[0]; verbObject.singularPast = regex + "signalled"; verbObject.continuous = regex + "signalling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(signify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=signify\b)/)[0]; verbObject.singularPast = regex + "signified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(silicify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=silicify\b)/)[0]; verbObject.singularPast = regex + "silicified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(simplify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=simplify\b)/)[0]; verbObject.singularPast = regex + "simplified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sin\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sin\b)/)[0]; verbObject.singularPast = regex + "sinned"; verbObject.continuous = regex + "sinning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sing\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sing\b)/)[0]; verbObject.singularPast = regex + "sang"; verbObject.perfect = regex + "sung"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(singe\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=singe\b)/)[0]; verbObject.continuous = regex + "singing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sink\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sink\b)/)[0]; verbObject.singularPast = regex + "sank"; verbObject.perfect = regex + "sunk"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sip\b)/)[0]; verbObject.singularPast = regex + "sipped"; verbObject.continuous = regex + "sipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sit\b)/)[0]; verbObject.singularPast = regex + "sat"; verbObject.continuous = regex + "sitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(skelly\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=skelly\b)/)[0]; verbObject.singularPast = regex + "skellied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sken\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sken\b)/)[0]; verbObject.singularPast = regex + "skenned"; verbObject.continuous = regex + "skenning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sket\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sket\b)/)[0]; verbObject.singularPast = regex + "sketted"; verbObject.continuous = regex + "sketting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(skid\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=skid\b)/)[0]; verbObject.singularPast = regex + "skidded"; verbObject.continuous = regex + "skidding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(skim\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=skim\b)/)[0]; verbObject.singularPast = regex + "skimmed"; verbObject.continuous = regex + "skimming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(skin\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=skin\b)/)[0]; verbObject.singularPast = regex + "skinned"; verbObject.continuous = regex + "skinning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(skip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=skip\b)/)[0]; verbObject.singularPast = regex + "skipped"; verbObject.continuous = regex + "skipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(skivvy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=skivvy\b)/)[0]; verbObject.singularPast = regex + "skivvied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(slab\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=slab\b)/)[0]; verbObject.singularPast = regex + "slabbed"; verbObject.continuous = regex + "slabbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(slag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=slag\b)/)[0]; verbObject.singularPast = regex + "slagged"; verbObject.continuous = regex + "slagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(slam\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=slam\b)/)[0]; verbObject.singularPast = regex + "slammed"; verbObject.continuous = regex + "slamming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(slap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=slap\b)/)[0]; verbObject.singularPast = regex + "slapped"; verbObject.continuous = regex + "slapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(slat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=slat\b)/)[0]; verbObject.singularPast = regex + "slatted"; verbObject.continuous = regex + "slatting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(slay\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=slay\b)/)[0]; verbObject.perfect = regex + "slain"; verbObject.singularPast = regex + "slew"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sled\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sled\b)/)[0]; verbObject.continuous = regex + "sledding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sleep\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sleep\b)/)[0]; verbObject.singularPast = regex + "slept"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(slide\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=slide\b)/)[0]; verbObject.singularPast = regex + "slid"; verbObject.perfect = regex + "slidden"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sling\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sling\b)/)[0]; verbObject.singularPast = regex + "slung"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(slink\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=slink\b)/)[0]; verbObject.singularPast = regex + "slunk"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(slip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=slip\b)/)[0]; verbObject.singularPast = regex + "slipped"; verbObject.continuous = regex + "slipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(slit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=slit\b)/)[0]; verbObject.continuous = regex + "slitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(slog\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=slog\b)/)[0]; verbObject.singularPast = regex + "slogged"; verbObject.continuous = regex + "slogging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(slop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=slop\b)/)[0]; verbObject.singularPast = regex + "slopped"; verbObject.continuous = regex + "slopping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(slot\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=slot\b)/)[0]; verbObject.singularPast = regex + "slotted"; verbObject.continuous = regex + "slotting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(slug\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=slug\b)/)[0]; verbObject.singularPast = regex + "slugged"; verbObject.continuous = regex + "slugging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(slum\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=slum\b)/)[0]; verbObject.singularPast = regex + "slummed"; verbObject.continuous = regex + "slumming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(slur\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=slur\b)/)[0]; verbObject.singularPast = regex + "slurred"; verbObject.continuous = regex + "slurring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(smite\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=smite\b)/)[0]; verbObject.perfect = regex + "smitten"; verbObject.singularPast = regex + "smote"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(smut\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=smut\b)/)[0]; verbObject.singularPast = regex + "smutted"; verbObject.continuous = regex + "smutting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(snag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=snag\b)/)[0]; verbObject.singularPast = regex + "snagged"; verbObject.continuous = regex + "snagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(snap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=snap\b)/)[0]; verbObject.singularPast = regex + "snapped"; verbObject.continuous = regex + "snapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sned\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sned\b)/)[0]; verbObject.singularPast = regex + "snedded"; verbObject.continuous = regex + "snedding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(snip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=snip\b)/)[0]; verbObject.singularPast = regex + "snipped"; verbObject.continuous = regex + "snipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(snivel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=snivel\b)/)[0]; verbObject.singularPast = regex + "snivelled"; verbObject.continuous = regex + "snivelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(snog\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=snog\b)/)[0]; verbObject.singularPast = regex + "snogged"; verbObject.continuous = regex + "snogging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(snub\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=snub\b)/)[0]; verbObject.singularPast = regex + "snubbed"; verbObject.continuous = regex + "snubbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(snug\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=snug\b)/)[0]; verbObject.singularPast = regex + "snugged"; verbObject.continuous = regex + "snugging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sob\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sob\b)/)[0]; verbObject.singularPast = regex + "sobbed"; verbObject.continuous = regex + "sobbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sod\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sod\b)/)[0]; verbObject.singularPast = regex + "sodded"; verbObject.continuous = regex + "sodding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(solemnify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=solemnify\b)/)[0]; verbObject.singularPast = regex + "solemnified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(solidify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=solidify\b)/)[0]; verbObject.singularPast = regex + "solidified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(soothsay\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=soothsay\b)/)[0]; verbObject.singularPast = regex + "soothsaid"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sop\b)/)[0]; verbObject.singularPast = regex + "sopped"; verbObject.continuous = regex + "sopping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sow\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sow\b)/)[0]; verbObject.perfect = regex + "sown"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(spag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=spag\b)/)[0]; verbObject.singularPast = regex + "spagged"; verbObject.continuous = regex + "spagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(span\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=span\b)/)[0]; verbObject.singularPast = regex + "spanned"; verbObject.continuous = regex + "spanning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(spancel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=spancel\b)/)[0]; verbObject.singularPast = regex + "spancelled"; verbObject.continuous = regex + "spancelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(spar\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=spar\b)/)[0]; verbObject.singularPast = regex + "sparred"; verbObject.continuous = regex + "sparring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(spat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=spat\b)/)[0]; verbObject.singularPast = regex + "spatted"; verbObject.continuous = regex + "spatting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(speak\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=speak\b)/)[0]; verbObject.singularPast = regex + "spoke"; verbObject.perfect = regex + "spoken"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(specify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=specify\b)/)[0]; verbObject.singularPast = regex + "specified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(speechify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=speechify\b)/)[0]; verbObject.singularPast = regex + "speechified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(speed\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=speed\b)/)[0]; verbObject.singularPast = regex + "sped"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(spellbind\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=spellbind\b)/)[0]; verbObject.singularPast = regex + "spellbound"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(spend\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=spend\b)/)[0]; verbObject.singularPast = regex + "spent"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(spin\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=spin\b)/)[0]; verbObject.continuous = regex + "spinning"; verbObject.singularPast = regex + "spun"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(spiral\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=spiral\b)/)[0]; verbObject.singularPast = regex + "spiralled"; verbObject.continuous = regex + "spiralling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(spit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=spit\b)/)[0]; verbObject.singularPast = regex + "spat"; verbObject.continuous = regex + "spitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(split\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=split\b)/)[0]; verbObject.continuous = regex + "splitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(spot\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=spot\b)/)[0]; verbObject.singularPast = regex + "spotted"; verbObject.continuous = regex + "spotting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(spotlight\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=spotlight\b)/)[0]; verbObject.singularPast = regex + "spotlit"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sprig\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sprig\b)/)[0]; verbObject.singularPast = regex + "sprigged"; verbObject.continuous = regex + "sprigging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(spring\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=spring\b)/)[0]; verbObject.singularPast = regex + "sprang"; verbObject.perfect = regex + "sprung"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(spud\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=spud\b)/)[0]; verbObject.singularPast = regex + "spudded"; verbObject.continuous = regex + "spudding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(spur\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=spur\b)/)[0]; verbObject.singularPast = regex + "spurred"; verbObject.continuous = regex + "spurring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(spy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=spy\b)/)[0]; verbObject.singularPast = regex + "spied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(squat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=squat\b)/)[0]; verbObject.singularPast = regex + "squatted"; verbObject.continuous = regex + "squatting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(squib\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=squib\b)/)[0]; verbObject.singularPast = regex + "squibbed"; verbObject.continuous = regex + "squibbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(squid\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=squid\b)/)[0]; verbObject.singularPast = regex + "squidded"; verbObject.continuous = regex + "squidding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(stab\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=stab\b)/)[0]; verbObject.singularPast = regex + "stabbed"; verbObject.continuous = regex + "stabbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(stand\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=stand\b)/)[0]; verbObject.singularPast = regex + "stood"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(star\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=star\b)/)[0]; verbObject.singularPast = regex + "starred"; verbObject.continuous = regex + "starring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(steady\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=steady\b)/)[0]; verbObject.singularPast = regex + "steadied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(steal\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=steal\b)/)[0]; verbObject.singularPast = regex + "stole"; verbObject.perfect = regex + "stolen"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(stellify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=stellify\b)/)[0]; verbObject.singularPast = regex + "stellified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(stem\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=stem\b)/)[0]; verbObject.singularPast = regex + "stemmed"; verbObject.continuous = regex + "stemming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(stencil\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=stencil\b)/)[0]; verbObject.singularPast = regex + "stencilled"; verbObject.continuous = regex + "stencilling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(step\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=step\b)/)[0]; verbObject.singularPast = regex + "stepped"; verbObject.continuous = regex + "stepping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(stet\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=stet\b)/)[0]; verbObject.singularPast = regex + "stetted"; verbObject.continuous = regex + "stetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(stick\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=stick\b)/)[0]; verbObject.singularPast = regex + "stuck"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(stiletto\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=stiletto\b)/)[0]; verbObject.continuous = regex + "stilettoeing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sting\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sting\b)/)[0]; verbObject.singularPast = regex + "stung"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(stink\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=stink\b)/)[0]; verbObject.singularPast = regex + "stank"; verbObject.perfect = regex + "stunk"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(stir\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=stir\b)/)[0]; verbObject.singularPast = regex + "stirred"; verbObject.continuous = regex + "stirring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(stop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=stop\b)/)[0]; verbObject.singularPast = regex + "stopped"; verbObject.continuous = regex + "stopping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(story\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=story\b)/)[0]; verbObject.singularPast = regex + "storied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(stot\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=stot\b)/)[0]; verbObject.singularPast = regex + "stotted"; verbObject.continuous = regex + "stotting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(strap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=strap\b)/)[0]; verbObject.singularPast = regex + "strapped"; verbObject.continuous = regex + "strapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(stratify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=stratify\b)/)[0]; verbObject.singularPast = regex + "stratified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(strew\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=strew\b)/)[0]; verbObject.perfect = regex + "strewn"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(stride\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=stride\b)/)[0]; verbObject.perfect = regex + "stridden"; verbObject.singularPast = regex + "strode"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(strike\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=strike\b)/)[0]; verbObject.singularPast = regex + "struck"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(string\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=string\b)/)[0]; verbObject.singularPast = regex + "strung"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(strip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=strip\b)/)[0]; verbObject.singularPast = regex + "stripped"; verbObject.continuous = regex + "stripping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(strive\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=strive\b)/)[0]; verbObject.perfect = regex + "striven"; verbObject.singularPast = regex + "strove"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(strop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=strop\b)/)[0]; verbObject.singularPast = regex + "stropped"; verbObject.continuous = regex + "stropping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(strow\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=strow\b)/)[0]; verbObject.perfect = regex + "strown"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(strum\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=strum\b)/)[0]; verbObject.singularPast = regex + "strummed"; verbObject.continuous = regex + "strumming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(strut\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=strut\b)/)[0]; verbObject.singularPast = regex + "strutted"; verbObject.continuous = regex + "strutting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(stub\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=stub\b)/)[0]; verbObject.singularPast = regex + "stubbed"; verbObject.continuous = regex + "stubbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(stud\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=stud\b)/)[0]; verbObject.singularPast = regex + "studded"; verbObject.continuous = regex + "studding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(study\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=study\b)/)[0]; verbObject.singularPast = regex + "studied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(stultify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=stultify\b)/)[0]; verbObject.singularPast = regex + "stultified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(stum\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=stum\b)/)[0]; verbObject.singularPast = regex + "stummed"; verbObject.continuous = regex + "stumming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(stun\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=stun\b)/)[0]; verbObject.singularPast = regex + "stunned"; verbObject.continuous = regex + "stunning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(stupefy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=stupefy\b)/)[0]; verbObject.singularPast = regex + "stupefied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sty\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sty\b)/)[0]; verbObject.singularPast = regex + "stied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(stymie\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=stymie\b)/)[0]; verbObject.continuous = regex + "stymying"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sub\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sub\b)/)[0]; verbObject.singularPast = regex + "subbed"; verbObject.continuous = regex + "subbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(subjectify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=subjectify\b)/)[0]; verbObject.singularPast = regex + "subjectified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sublet\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sublet\b)/)[0]; verbObject.continuous = regex + "subletting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(submit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=submit\b)/)[0]; verbObject.singularPast = regex + "submitted"; verbObject.continuous = regex + "submitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sully\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sully\b)/)[0]; verbObject.singularPast = regex + "sullied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sulphuret\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sulphuret\b)/)[0]; verbObject.singularPast = regex + "sulphuretted"; verbObject.continuous = regex + "sulphuretting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sum\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sum\b)/)[0]; verbObject.singularPast = regex + "summed"; verbObject.continuous = regex + "summing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sun\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sun\b)/)[0]; verbObject.singularPast = regex + "sunned"; verbObject.continuous = regex + "sunning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sup\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sup\b)/)[0]; verbObject.singularPast = regex + "supped"; verbObject.continuous = regex + "supping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(supply\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=supply\b)/)[0]; verbObject.singularPast = regex + "supplied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(swab\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=swab\b)/)[0]; verbObject.singularPast = regex + "swabbed"; verbObject.continuous = regex + "swabbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(swag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=swag\b)/)[0]; verbObject.singularPast = regex + "swagged"; verbObject.continuous = regex + "swagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(swap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=swap\b)/)[0]; verbObject.singularPast = regex + "swapped"; verbObject.continuous = regex + "swapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(swat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=swat\b)/)[0]; verbObject.singularPast = regex + "swatted"; verbObject.continuous = regex + "swatting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(swear\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=swear\b)/)[0]; verbObject.singularPast = regex + "swore"; verbObject.perfect = regex + "sworn"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(sweep\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=sweep\b)/)[0]; verbObject.singularPast = regex + "swept"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(swell\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=swell\b)/)[0]; verbObject.perfect = regex + "swollen"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(swig\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=swig\b)/)[0]; verbObject.singularPast = regex + "swigged"; verbObject.continuous = regex + "swigging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(swim\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=swim\b)/)[0]; verbObject.singularPast = regex + "swam"; verbObject.continuous = regex + "swimming"; verbObject.perfect = regex + "swum"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(swing\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=swing\b)/)[0]; verbObject.singularPast = regex + "swung"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(swivel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=swivel\b)/)[0]; verbObject.singularPast = regex + "swivelled"; verbObject.continuous = regex + "swivelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(swot\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=swot\b)/)[0]; verbObject.singularPast = regex + "swotted"; verbObject.continuous = regex + "swotting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(syllabify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=syllabify\b)/)[0]; verbObject.singularPast = regex + "syllabified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(symbol\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=symbol\b)/)[0]; verbObject.singularPast = regex + "symbolled"; verbObject.continuous = regex + "symbolling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tab\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tab\b)/)[0]; verbObject.singularPast = regex + "tabbed"; verbObject.continuous = regex + "tabbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tag\b)/)[0]; verbObject.singularPast = regex + "tagged"; verbObject.continuous = regex + "tagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(take\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=take\b)/)[0]; verbObject.perfect = regex + "taken"; verbObject.singularPast = regex + "took"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tally\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tally\b)/)[0]; verbObject.singularPast = regex + "tallied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tammy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tammy\b)/)[0]; verbObject.singularPast = regex + "tammied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tan\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tan\b)/)[0]; verbObject.singularPast = regex + "tanned"; verbObject.continuous = regex + "tanning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tap\b)/)[0]; verbObject.singularPast = regex + "tapped"; verbObject.continuous = regex + "tapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tar\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tar\b)/)[0]; verbObject.singularPast = regex + "tarred"; verbObject.continuous = regex + "tarring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tarry\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tarry\b)/)[0]; verbObject.singularPast = regex + "tarried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tassel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tassel\b)/)[0]; verbObject.singularPast = regex + "tasselled"; verbObject.continuous = regex + "tasselling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tat\b)/)[0]; verbObject.singularPast = regex + "tatted"; verbObject.continuous = regex + "tatting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(taxi\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=taxi\b)/)[0]; verbObject.continuous = regex + "taxying"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(teach\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=teach\b)/)[0]; verbObject.singularPast = regex + "taught"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tear\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tear\b)/)[0]; verbObject.singularPast = regex + "tore"; verbObject.perfect = regex + "torn"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(teasel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=teasel\b)/)[0]; verbObject.singularPast = regex + "teaselled"; verbObject.continuous = regex + "teaselling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(ted\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=ted\b)/)[0]; verbObject.singularPast = regex + "tedded"; verbObject.continuous = regex + "tedding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tell\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tell\b)/)[0]; verbObject.singularPast = regex + "told"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tepefy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tepefy\b)/)[0]; verbObject.singularPast = regex + "tepefied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(terrify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=terrify\b)/)[0]; verbObject.singularPast = regex + "terrified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(testify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=testify\b)/)[0]; verbObject.singularPast = regex + "testified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(thin\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=thin\b)/)[0]; verbObject.singularPast = regex + "thinned"; verbObject.continuous = regex + "thinning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(think\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=think\b)/)[0]; verbObject.singularPast = regex + "thought"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(throb\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=throb\b)/)[0]; verbObject.singularPast = regex + "throbbed"; verbObject.continuous = regex + "throbbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(throw\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=throw\b)/)[0]; verbObject.singularPast = regex + "threw"; verbObject.perfect = regex + "thrown"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(thrum\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=thrum\b)/)[0]; verbObject.singularPast = regex + "thrummed"; verbObject.continuous = regex + "thrumming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(thud\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=thud\b)/)[0]; verbObject.singularPast = regex + "thudded"; verbObject.continuous = regex + "thudding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tidy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tidy\b)/)[0]; verbObject.singularPast = regex + "tidied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tie\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tie\b)/)[0]; verbObject.continuous = regex + "tying"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tin\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tin\b)/)[0]; verbObject.singularPast = regex + "tinned"; verbObject.continuous = regex + "tinning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tinsel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tinsel\b)/)[0]; verbObject.singularPast = regex + "tinselled"; verbObject.continuous = regex + "tinselling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tip\b)/)[0]; verbObject.singularPast = regex + "tipped"; verbObject.continuous = regex + "tipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tittup\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tittup\b)/)[0]; verbObject.singularPast = regex + "tittupped"; verbObject.continuous = regex + "tittupping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(toady\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=toady\b)/)[0]; verbObject.singularPast = regex + "toadied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tog\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tog\b)/)[0]; verbObject.singularPast = regex + "togged"; verbObject.continuous = regex + "togging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(top\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=top\b)/)[0]; verbObject.singularPast = regex + "topped"; verbObject.continuous = regex + "topping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(torrefy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=torrefy\b)/)[0]; verbObject.singularPast = regex + "torrefied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tot\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tot\b)/)[0]; verbObject.singularPast = regex + "totted"; verbObject.continuous = regex + "totting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(total\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=total\b)/)[0]; verbObject.singularPast = regex + "totalled"; verbObject.continuous = regex + "totalling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(towel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=towel\b)/)[0]; verbObject.singularPast = regex + "towelled"; verbObject.continuous = regex + "towelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(traffic\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=traffic\b)/)[0]; verbObject.singularPast = regex + "trafficked"; verbObject.continuous = regex + "trafficking"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tram\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tram\b)/)[0]; verbObject.singularPast = regex + "trammed"; verbObject.continuous = regex + "tramming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(trammel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=trammel\b)/)[0]; verbObject.singularPast = regex + "tramelled"; verbObject.continuous = regex + "tramelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(transfer\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=transfer\b)/)[0]; verbObject.singularPast = regex + "transferred"; verbObject.continuous = regex + "transferring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tranship\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tranship\b)/)[0]; verbObject.singularPast = regex + "transhipped"; verbObject.continuous = regex + "transhipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(transmit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=transmit\b)/)[0]; verbObject.singularPast = regex + "transmitted"; verbObject.continuous = regex + "transmitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(transmogrify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=transmogrify\b)/)[0]; verbObject.singularPast = regex + "transmogrified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(transship\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=transship\b)/)[0]; verbObject.singularPast = regex + "transshipped"; verbObject.continuous = regex + "transshipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(trap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=trap\b)/)[0]; verbObject.singularPast = regex + "trapped"; verbObject.continuous = regex + "trapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(trapan\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=trapan\b)/)[0]; verbObject.singularPast = regex + "trapanned"; verbObject.continuous = regex + "trapanning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(travel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=travel\b)/)[0]; verbObject.singularPast = regex + "travelled"; verbObject.continuous = regex + "travelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(travesty\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=travesty\b)/)[0]; verbObject.singularPast = regex + "travestied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tread\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tread\b)/)[0]; verbObject.singularPast = regex + "trod"; verbObject.perfect = regex + "trodden"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(trek\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=trek\b)/)[0]; verbObject.singularPast = regex + "trekked"; verbObject.continuous = regex + "trekking"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(trepan\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=trepan\b)/)[0]; verbObject.singularPast = regex + "trepanned"; verbObject.continuous = regex + "trepanning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(trig\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=trig\b)/)[0]; verbObject.singularPast = regex + "trigged"; verbObject.continuous = regex + "trigging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(trim\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=trim\b)/)[0]; verbObject.singularPast = regex + "trimmed"; verbObject.continuous = regex + "trimming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(trip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=trip\b)/)[0]; verbObject.singularPast = regex + "tripped"; verbObject.continuous = regex + "tripping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(trog\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=trog\b)/)[0]; verbObject.singularPast = regex + "trogged"; verbObject.continuous = regex + "trogging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(trot\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=trot\b)/)[0]; verbObject.singularPast = regex + "trotted"; verbObject.continuous = regex + "trotting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(trowel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=trowel\b)/)[0]; verbObject.singularPast = regex + "trowelled"; verbObject.continuous = regex + "trowelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(try\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=try\b)/)[0]; verbObject.singularPast = regex + "tried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tug\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tug\b)/)[0]; verbObject.singularPast = regex + "tugged"; verbObject.continuous = regex + "tugging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tumefy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tumefy\b)/)[0]; verbObject.singularPast = regex + "tumefied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tun\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tun\b)/)[0]; verbObject.singularPast = regex + "tunned"; verbObject.continuous = regex + "tunning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tunnel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tunnel\b)/)[0]; verbObject.singularPast = regex + "tunnelled"; verbObject.continuous = regex + "tunnelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(tup\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=tup\b)/)[0]; verbObject.singularPast = regex + "tupped"; verbObject.continuous = regex + "tupping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(twig\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=twig\b)/)[0]; verbObject.singularPast = regex + "twigged"; verbObject.continuous = regex + "twigging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(twin\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=twin\b)/)[0]; verbObject.singularPast = regex + "twinned"; verbObject.continuous = regex + "twinning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(twit\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=twit\b)/)[0]; verbObject.singularPast = regex + "twitted"; verbObject.continuous = regex + "twitting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(typeset\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=typeset\b)/)[0]; verbObject.continuous = regex + "typesetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(typewrite\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=typewrite\b)/)[0]; verbObject.perfect = regex + "typewritten"; verbObject.singularPast = regex + "typewrote"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(typify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=typify\b)/)[0]; verbObject.singularPast = regex + "typified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(uglify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=uglify\b)/)[0]; verbObject.singularPast = regex + "uglified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(unify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=unify\b)/)[0]; verbObject.singularPast = regex + "unified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(up\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=up\b)/)[0]; verbObject.singularPast = regex + "upped"; verbObject.continuous = regex + "upping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(upbuild\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=upbuild\b)/)[0]; verbObject.singularPast = regex + "upbuilt"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(uphold\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=uphold\b)/)[0]; verbObject.singularPast = regex + "upheld"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(uppercut\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=uppercut\b)/)[0]; verbObject.continuous = regex + "uppercutting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(uprise\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=uprise\b)/)[0]; verbObject.perfect = regex + "uprisen"; verbObject.singularPast = regex + "uprose"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(upset\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=upset\b)/)[0]; verbObject.continuous = regex + "upsetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(upspring\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=upspring\b)/)[0]; verbObject.singularPast = regex + "upsprang"; verbObject.perfect = regex + "upsprung"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(upsweep\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=upsweep\b)/)[0]; verbObject.singularPast = regex + "upswept"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(upswell\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=upswell\b)/)[0]; verbObject.perfect = regex + "upswollen"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(upswing\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=upswing\b)/)[0]; verbObject.singularPast = regex + "upswung"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(vag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=vag\b)/)[0]; verbObject.singularPast = regex + "vagged"; verbObject.continuous = regex + "vagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(vary\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=vary\b)/)[0]; verbObject.singularPast = regex + "varied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(vat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=vat\b)/)[0]; verbObject.singularPast = regex + "vatted"; verbObject.continuous = regex + "vatting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(verbify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=verbify\b)/)[0]; verbObject.singularPast = regex + "verbified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(verify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=verify\b)/)[0]; verbObject.singularPast = regex + "verified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(versify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=versify\b)/)[0]; verbObject.singularPast = regex + "versified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(vet\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=vet\b)/)[0]; verbObject.singularPast = regex + "vetted"; verbObject.continuous = regex + "vetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(victual\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=victual\b)/)[0]; verbObject.singularPast = regex + "victualled"; verbObject.continuous = regex + "victualling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(vie\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=vie\b)/)[0]; verbObject.continuous = regex + "vying"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(vilify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=vilify\b)/)[0]; verbObject.singularPast = regex + "vilified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(vitrify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=vitrify\b)/)[0]; verbObject.singularPast = regex + "vitrified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(vitriol\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=vitriol\b)/)[0]; verbObject.singularPast = regex + "vitriolled"; verbObject.continuous = regex + "vitriolling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(vivify\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=vivify\b)/)[0]; verbObject.singularPast = regex + "vivified"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(wad\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=wad\b)/)[0]; verbObject.singularPast = regex + "wadded"; verbObject.continuous = regex + "wadding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(waddy\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=waddy\b)/)[0]; verbObject.singularPast = regex + "waddied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(wadset\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=wadset\b)/)[0]; verbObject.singularPast = regex + "wadsetted"; verbObject.continuous = regex + "wadsetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(wag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=wag\b)/)[0]; verbObject.singularPast = regex + "wagged"; verbObject.continuous = regex + "wagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(wake\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=wake\b)/)[0]; verbObject.singularPast = regex + "woke"; verbObject.perfect = regex + "woken"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(wan\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=wan\b)/)[0]; verbObject.singularPast = regex + "wanned"; verbObject.continuous = regex + "wanning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(war\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=war\b)/)[0]; verbObject.singularPast = regex + "warred"; verbObject.continuous = regex + "warring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(waylay\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=waylay\b)/)[0]; verbObject.singularPast = regex + "waylaid"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(wear\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=wear\b)/)[0]; verbObject.singularPast = regex + "wore"; verbObject.perfect = regex + "worn"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(weary\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=weary\b)/)[0]; verbObject.singularPast = regex + "wearied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(weatherstrip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=weatherstrip\b)/)[0]; verbObject.singularPast = regex + "weatherstripped"; verbObject.continuous = regex + "weatherstripping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(weave\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=weave\b)/)[0]; verbObject.singularPast = regex + "wove"; verbObject.perfect = regex + "woven"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(web\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=web\b)/)[0]; verbObject.singularPast = regex + "webbed"; verbObject.continuous = regex + "webbing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(wed\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=wed\b)/)[0]; verbObject.singularPast = regex + "wedded"; verbObject.continuous = regex + "wedding"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(weep\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=weep\b)/)[0]; verbObject.singularPast = regex + "wept"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(wet\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=wet\b)/)[0]; verbObject.singularPast = regex + "wetted"; verbObject.continuous = regex + "wetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(wham\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=wham\b)/)[0]; verbObject.singularPast = regex + "whammed"; verbObject.continuous = regex + "whamming"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(whap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=whap\b)/)[0]; verbObject.singularPast = regex + "whapped"; verbObject.continuous = regex + "whapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(whet\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=whet\b)/)[0]; verbObject.singularPast = regex + "whetted"; verbObject.continuous = regex + "whetting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(whinny\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=whinny\b)/)[0]; verbObject.singularPast = regex + "whinnied"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(whip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=whip\b)/)[0]; verbObject.singularPast = regex + "whipped"; verbObject.continuous = regex + "whipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(whipsaw\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=whipsaw\b)/)[0]; verbObject.perfect = regex + "whipsawn"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(whir\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=whir\b)/)[0]; verbObject.singularPast = regex + "whirred"; verbObject.continuous = regex + "whirring"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(whiz\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=whiz\b)/)[0]; verbObject.singularPast = regex + "whizzed"; verbObject.singularPresent = regex + "whizzes"; verbObject.continuous = regex + "whizzing"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(whop\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=whop\b)/)[0]; verbObject.singularPast = regex + "whopped"; verbObject.continuous = regex + "whopping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(wig\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=wig\b)/)[0]; verbObject.singularPast = regex + "wigged"; verbObject.continuous = regex + "wigging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(wigwag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=wigwag\b)/)[0]; verbObject.singularPast = regex + "wigwagged"; verbObject.continuous = regex + "wigwagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(wildcat\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=wildcat\b)/)[0]; verbObject.singularPast = regex + "wildcatted"; verbObject.continuous = regex + "wildcatting"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(win\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=win\b)/)[0]; verbObject.continuous = regex + "winning"; verbObject.singularPast = regex + "won"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(wind\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=wind\b)/)[0]; verbObject.singularPast = regex + "wound"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(winterfeed\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=winterfeed\b)/)[0]; verbObject.singularPast = regex + "winterfed"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(wiredraw\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=wiredraw\b)/)[0]; verbObject.perfect = regex + "wiredrawn"; verbObject.singularPast = regex + "wiredrew"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(withdraw\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=withdraw\b)/)[0]; verbObject.perfect = regex + "withdrawn"; verbObject.singularPast = regex + "withdrew"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(withhold\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=withhold\b)/)[0]; verbObject.singularPast = regex + "withheld"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(withstand\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=withstand\b)/)[0]; verbObject.singularPast = regex + "withstood"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(won\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=won\b)/)[0]; verbObject.singularPast = regex + "wonned"; verbObject.continuous = regex + "wonning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(worry\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=worry\b)/)[0]; verbObject.singularPast = regex + "worried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(worship\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=worship\b)/)[0]; verbObject.singularPast = regex + "worshipped"; verbObject.continuous = regex + "worshipping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(wrap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=wrap\b)/)[0]; verbObject.singularPast = regex + "wrapped"; verbObject.continuous = regex + "wrapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(wring\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=wring\b)/)[0]; verbObject.singularPast = regex + "wrung"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(write\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=write\b)/)[0]; verbObject.perfect = regex + "written"; verbObject.singularPast = regex + "wrote"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(wry\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=wry\b)/)[0]; verbObject.singularPast = regex + "wried"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(yak\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=yak\b)/)[0]; verbObject.singularPast = regex + "yakked"; verbObject.continuous = regex + "yakking"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(yap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=yap\b)/)[0]; verbObject.singularPast = regex + "yapped"; verbObject.continuous = regex + "yapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(yen\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=yen\b)/)[0]; verbObject.singularPast = regex + "yenned"; verbObject.continuous = regex + "yenning"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(yodel\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=yodel\b)/)[0]; verbObject.singularPast = regex + "yodelled"; verbObject.continuous = regex + "yodelling"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(zap\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=zap\b)/)[0]; verbObject.singularPast = regex + "zapped"; verbObject.continuous = regex + "zapping"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(zigzag\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=zigzag\b)/)[0]; verbObject.singularPast = regex + "zigzagged"; verbObject.continuous = regex + "zigzagging"; }
    else if (lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(zip\b)/)) { regex = lowercasedVerbString.match(/(over|under|un|re|de|dis|mis|out|co|pre|post|sub|inter|over\-|under\-|un\-|re\-|de\-|dis\-|mis\-|out\-|co\-|pre\-|post\-|sub\-|inter\-|\b)(?=zip\b)/)[0]; verbObject.singularPast = regex + "zipped"; verbObject.continuous = regex + "zipping"; }
    // Set regular verb values for singular present tense
    let lastTwoChars = lowercasedVerbString.slice(-2);
    let lastOneChar = lowercasedVerbString.slice(-1);
    if (!verbObject.singularPresent) {
      if (lastTwoChars === "ch" || lastTwoChars === "sh"
      || lastOneChar === "s" || lastOneChar === "x"
      || lastOneChar === "o" && lastTwoChars != "oo") {
        verbObject.singularPresent = lowercasedVerbString + "es";
      }
      else if (lastTwoChars === "by" || lastTwoChars === "cy"
      || lastTwoChars === "dy" || lastTwoChars === "fy"
      || lastTwoChars === "gy" || lastTwoChars === "hy"
      || lastTwoChars === "jy" || lastTwoChars === "ky"
      || lastTwoChars === "ly" || lastTwoChars === "my"
      || lastTwoChars === "ny" || lastTwoChars === "py"
      || lastTwoChars === "qy" || lastTwoChars === "ry"
      || lastTwoChars === "sy" || lastTwoChars === "ty"
      || lastTwoChars === "vy" || lastTwoChars === "wy"
      || lastTwoChars === "xy" || lastTwoChars === "zy") {
        let editedVerbString = lowercasedVerbString.slice(0,-1);
        verbObject.singularPresent = editedVerbString + "ies";
        verbObject.singularPast = editedVerbString + "ied";
      }
      else {
        verbObject.singularPresent = lowercasedVerbString + "s";
      }
    }
    // Set regular verb values for singular past tense
    if (!verbObject.singularPast) {
      if (lastOneChar === "e") {
        verbObject.singularPast = lowercasedVerbString + "d";
      }
      else {
        verbObject.singularPast = lowercasedVerbString + "ed";
      }
    }
    // Set regular verb values for continuous tense
    if (!verbObject.continuous) {
      if (lastOneChar === "e" && lastTwoChars != "ee") {
        let editedVerbString = lowercasedVerbString.slice(0,-1);
        verbObject.continuous = editedVerbString + "ing";
      }
      else {
        verbObject.continuous = lowercasedVerbString + "ing";
      }
    }
    // Set default values for remaining verb tenses
    if (!verbObject.perfect) {
      verbObject.perfect = verbObject.singularPast;
    }
    if (!verbObject.firstPast) {
      verbObject.firstPast = verbObject.singularPast;
    }
    if (!verbObject.pluralPast) {
      verbObject.pluralPast = verbObject.singularPast;
    }
    if (!verbObject.firstPresent) {
      verbObject.firstPresent = verbObject.infinitive;
    }
    if (!verbObject.pluralPresent) {
      verbObject.pluralPresent = verbObject.infinitive;
    }
  }
  // Add functions for retrieving finalized verb string values
  verbObject.present = function(person,isNegative,isContinuous,isPerfect) {
    if (!person || typeof person !== 'string' || !(person.toUpperCase() === 'FIRST' || person.toUpperCase() === 'SINGULAR' || person.toUpperCase() === 'PLURAL')) {
      return this.infinitive;
    }
    if (person.toUpperCase() === 'FIRST' && !isNegative && !isContinuous && !isPerfect) {
      return this.firstPresent;
    }
    else if (person.toUpperCase() === 'FIRST' && !isNegative && isContinuous && !isPerfect) {
      return 'am ' + this.continuous;
    }
    else if (person.toUpperCase() === 'SINGULAR' && !isNegative && !isContinuous && !isPerfect) {
      return this.singularPresent;
    }
    else if (person.toUpperCase() === 'SINGULAR' && !isNegative && isContinuous && !isPerfect) {
      return 'is ' + this.continuous;
    }
    else if (person.toUpperCase() === 'PLURAL' && !isNegative && !isContinuous && !isPerfect) {
      return this.pluralPresent;
    }
    else if (person.toUpperCase() === 'PLURAL' && !isNegative && isContinuous && !isPerfect) {
      return 'are ' + this.continuous;
    }
    else if ((person.toUpperCase() === 'FIRST' || person.toUpperCase() === 'PLURAL') && !isNegative && !isContinuous && isPerfect) {
      return 'have ' + this.perfect;
    }
    else if (!(person.toUpperCase() === 'FIRST' || person.toUpperCase() === 'PLURAL') && !isNegative && !isContinuous && isPerfect) {
      return 'has ' + this.perfect;
    }
    else if ((person.toUpperCase() === 'FIRST' || person.toUpperCase() === 'PLURAL') && !isNegative && isContinuous && isPerfect) {
      return 'have been ' + this.continuous;
    }
    else if (!(person.toUpperCase() === 'FIRST' || person.toUpperCase() === 'PLURAL') && !isNegative && isContinuous && isPerfect) {
      return 'has been ' + this.continuous;
    }
    else if (lowercasedVerbString !== 'be' && (person.toUpperCase() === 'FIRST' || person.toUpperCase() === 'PLURAL') && isNegative && !isContinuous && !isPerfect) {
      return 'don\'t ' + this.infinitive;
    }
    else if (lowercasedVerbString !== 'be' && !(person.toUpperCase() === 'FIRST' || person.toUpperCase() === 'PLURAL') && isNegative && !isContinuous && !isPerfect) {
      return 'doesn\'t ' + this.infinitive;
    }
    else if (lowercasedVerbString === 'be' && person.toUpperCase() === 'FIRST' && isNegative && !isContinuous && !isPerfect) {
      return 'am not';
    }
    else if (lowercasedVerbString === 'be' && person.toUpperCase() === 'SINGULAR' && isNegative && !isContinuous && !isPerfect) {
      return 'isn\'t';
    }
    else if (lowercasedVerbString === 'be' && person.toUpperCase() === 'PLURAL' && isNegative && !isContinuous && !isPerfect) {
      return 'aren\'t';
    }
    else if (person.toUpperCase() === 'FIRST' && isNegative && isContinuous && !isPerfect) {
      return 'am not ' + this.continuous;
    }
    else if (person.toUpperCase() === 'SINGULAR' && isNegative && isContinuous && !isPerfect) {
      return 'isn\'t ' + this.continuous;
    }
    else if (person.toUpperCase() === 'PLURAL' && isNegative && isContinuous && !isPerfect) {
      return 'aren\'t ' + this.continuous;
    }
    else if ((person.toUpperCase() === 'FIRST' || person.toUpperCase() === 'PLURAL') && isNegative && !isContinuous && isPerfect) {
      return 'haven\'t ' + this.perfect;
    }
    else if (!(person.toUpperCase() === 'FIRST' || person.toUpperCase() === 'PLURAL') && isNegative && !isContinuous && isPerfect) {
      return 'hasn\'t ' + this.perfect;
    }
    else if ((person.toUpperCase() === 'FIRST' || person.toUpperCase() === 'PLURAL') && isNegative && isContinuous && isPerfect) {
      return 'haven\'t been ' + this.continuous;
    }
    else if (!(person.toUpperCase() === 'FIRST' || person.toUpperCase() === 'PLURAL') && isNegative && isContinuous && isPerfect) {
      return 'hasn\'t been ' + this.continuous;
    }
  };
  verbObject.past = function(person,isNegative,isContinuous,isPerfect) {
    if (!person || typeof person !== 'string' || !(person.toUpperCase() === 'FIRST' || person.toUpperCase() === 'SINGULAR' || person.toUpperCase() === 'PLURAL')) {
      return this.infinitive;
    }
    if (person.toUpperCase() === 'FIRST' && !isNegative && !isContinuous && !isPerfect) {
      return this.firstPast;
    }
    else if ((person.toUpperCase() === 'FIRST' || person.toUpperCase() === 'SINGULAR') && !isNegative && isContinuous && !isPerfect) {
      return 'was ' + this.continuous;
    }
    else if (person.toUpperCase() === 'SINGULAR' && !isNegative && !isContinuous && !isPerfect) {
      return this.singularPast;
    }
    else if (person.toUpperCase() === 'PLURAL' && !isNegative && !isContinuous && !isPerfect) {
      return this.pluralPast;
    }
    else if (person.toUpperCase() === 'PLURAL' && !isNegative && isContinuous && !isPerfect) {
      return 'were ' + this.continuous;
    }
    else if (!isNegative && !isContinuous && isPerfect) {
      return 'had ' + this.perfect;
    }
    else if (!isNegative && isContinuous && isPerfect) {
      return 'had been ' + this.continuous;
    }
    else if (lowercasedVerbString !== 'be' && isNegative && !isContinuous && !isPerfect) {
      return 'didn\'t ' + this.infinitive;
    }
    else if (lowercasedVerbString === 'be' && (person.toUpperCase() === 'FIRST' || person.toUpperCase() === 'SINGULAR') && isNegative && !isContinuous && !isPerfect) {
      return 'wasn\'t';
    }
    else if (lowercasedVerbString === 'be' && person.toUpperCase() === 'PLURAL' && isNegative && !isContinuous && !isPerfect) {
      return 'weren\'t';
    }
    else if ((person.toUpperCase() === 'FIRST' || person.toUpperCase() === 'SINGULAR') && isNegative && isContinuous && !isPerfect) {
      return 'wasn\'t ' + this.continuous;
    }
    else if (person.toUpperCase() === 'PLURAL' && isNegative && isContinuous && !isPerfect) {
      return 'weren\'t ' + this.continuous;
    }
    else if (isNegative && !isContinuous && isPerfect) {
      return 'hadn\'t ' + this.perfect;
    }
    else if (isNegative && isContinuous && isPerfect) {
      return 'hadn\'t been ' + this.continuous;
    }
  };
  verbObject.future = function(person,isNegative,isContinuous,isPerfect) {
    if (!person || typeof person !== 'string' || !(person.toUpperCase() === 'FIRST' || person.toUpperCase() === 'SINGULAR' || person.toUpperCase() === 'PLURAL')) {
      return this.infinitive;
    }
    if (!isNegative && !isContinuous && !isPerfect) {
      return 'will ' + this.infinitive;
    }
    else if (isNegative && !isContinuous && !isPerfect) {
      return 'won\'t ' + this.infinitive;
    }
    if (!isNegative && isContinuous && !isPerfect) {
      return 'will be ' + this.continuous;
    }
    else if (isNegative && isContinuous && !isPerfect) {
      return 'won\'t be ' + this.continuous;
    }
    if (!isNegative && !isContinuous && isPerfect) {
      return 'will have ' + this.perfect;
    }
    else if (isNegative && !isContinuous && isPerfect) {
      return 'won\'t have ' + this.perfect;
    }
    if (!isNegative && isContinuous && isPerfect) {
      return 'will have been ' + this.continuous;
    }
    else if (isNegative && isContinuous && isPerfect) {
      return 'won\'t have been ' + this.continuous;
    }
  };
  return verbObject;
};
